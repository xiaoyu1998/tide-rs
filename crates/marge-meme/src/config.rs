/**

Generated by the following Solidity interface...
```solidity
interface Config {
    error EmptyPool(bytes32 key);
    error EmptyTokenBase();
    error EmptyTreasury();
    error InvalidFeeFactor(uint256 feeFactor, uint256 MaxValidFeeFactor);
    error ReentrancyGuardReentrantCall();
    error Unauthorized(address msgSender, string role);

    constructor(address _roleStore, address _dataStore);

    function dataStore() external view returns (address);
    function multicall(bytes[] memory data) external returns (bytes[] memory results);
    function roleStore() external view returns (address);
    function setDebtSafetyFactor(uint256 debtSaftyFactor) external;
    function setDefaultInterestRateStrategy(address interestRateStrategy) external;
    function setDefaultPoolConfiguration(uint256 configuration) external;
    function setLiquidationFee(uint256 liquidationFee) external;
    function setMarginLevelThreshold(uint256 threshold) external;
    function setMaxBorrowRate(uint256 maxBorrowRate) external;
    function setMaxDepositRate(uint256 maxDepositRate) external;
    function setShortEnabled(address token0, address token1, bool shortEnabled) external;
    function setShortLiquidityThreshold(uint256 shortLiquidityThreshold) external;
    function setSwapFeeFactor(address token0, address token1, uint256 feeFactor) external;
    function setTokenBase(address token) external;
    function setTradableDebtMultipierFactor(uint256 multipierFactor) external;
    function setTreasury(address treasury) external;
    function setTreasuryFeeFactor(address token0, address token1, uint256 feeFactor) external;
    function setTwapPeriod(uint256 period) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_roleStore",
        "type": "address",
        "internalType": "contract RoleStore"
      },
      {
        "name": "_dataStore",
        "type": "address",
        "internalType": "contract DataStore"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "dataStore",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract DataStore"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "multicall",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [
      {
        "name": "results",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "roleStore",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract RoleStore"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setDebtSafetyFactor",
    "inputs": [
      {
        "name": "debtSaftyFactor",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setDefaultInterestRateStrategy",
    "inputs": [
      {
        "name": "interestRateStrategy",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setDefaultPoolConfiguration",
    "inputs": [
      {
        "name": "configuration",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setLiquidationFee",
    "inputs": [
      {
        "name": "liquidationFee",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMarginLevelThreshold",
    "inputs": [
      {
        "name": "threshold",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMaxBorrowRate",
    "inputs": [
      {
        "name": "maxBorrowRate",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMaxDepositRate",
    "inputs": [
      {
        "name": "maxDepositRate",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setShortEnabled",
    "inputs": [
      {
        "name": "token0",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "token1",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "shortEnabled",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setShortLiquidityThreshold",
    "inputs": [
      {
        "name": "shortLiquidityThreshold",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSwapFeeFactor",
    "inputs": [
      {
        "name": "token0",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "token1",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "feeFactor",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setTokenBase",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setTradableDebtMultipierFactor",
    "inputs": [
      {
        "name": "multipierFactor",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setTreasury",
    "inputs": [
      {
        "name": "treasury",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setTreasuryFeeFactor",
    "inputs": [
      {
        "name": "token0",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "token1",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "feeFactor",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setTwapPeriod",
    "inputs": [
      {
        "name": "period",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "error",
    "name": "EmptyPool",
    "inputs": [
      {
        "name": "key",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "EmptyTokenBase",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyTreasury",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidFeeFactor",
    "inputs": [
      {
        "name": "feeFactor",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "MaxValidFeeFactor",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ReentrancyGuardReentrantCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "Unauthorized",
    "inputs": [
      {
        "name": "msgSender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "role",
        "type": "string",
        "internalType": "string"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod Config {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c060405234801561000f575f5ffd5b5060405161185338038061185383398101604081905261002e91610060565b6001600160a01b0391821660805260015f551660a052610098565b6001600160a01b038116811461005d575f5ffd5b50565b5f5f60408385031215610071575f5ffd5b825161007c81610049565b602084015190925061008d81610049565b809150509250929050565b60805160a0516117236101305f395f81816101d2015281816102e8015281816104360152818161046e015281816104d101528181610504015281816105fc0152818161062f0152818161069f0152818161070f015281816107aa015281816107fa015281816108210152818161089101528181610a2001528181610a640152610aa801525f81816101550152610ae901526117235ff3fe608060405234801561000f575f5ffd5b5060043610610111575f3560e01c80636a72c63f1161009e578063956228c61161006e578063956228c614610253578063ac9650d814610266578063bb789bd714610286578063f0f4426014610299578063fef0bec8146102ac575f5ffd5b80636a72c63f146102075780636a97c0fe1461021a57806388235d101461022d57806392547c3814610240575f5ffd5b806357c25c66116100e457806357c25c66146101945780635e657adf146101a75780635eadca7e146101ba578063660d0d67146101cd57806369ea8682146101f4575f5ffd5b80631dee7f3e146101155780632ffaf5591461012a57806330a767c51461013d5780634a4a7b0414610150575b5f5ffd5b610128610123366004611349565b6102bf565b005b610128610138366004611371565b6103c8565b61012861014b3660046113b9565b6104a4565b6101777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101286101a23660046113f7565b610502565b6101286101b53660046113f7565b6105dd565b6101286101c83660046113f7565b61062d565b6101777f000000000000000000000000000000000000000000000000000000000000000081565b610128610202366004611349565b61069d565b6101286102153660046113f7565b61070d565b6101286102283660046113b9565b61077d565b61012861023b3660046113f7565b6107db565b61012861024e3660046113f7565b61081f565b6101286102613660046113f7565b61088f565b61027961027436600461140e565b6108f2565b60405161018b91906114ad565b6101286102943660046113f7565b610a01565b6101286102a7366004611349565b610a45565b6101286102ba3660046113f7565b610a89565b6001600160a01b0381166102e6576040516358c52e4d60e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca446dd9604051602001610343906020808252600a9082015269544f4b454e5f4241534560b01b604082015260600190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e084901b16825260048201526001600160a01b03841660248201526044016020604051808303815f875af11580156103a0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c49190611510565b5050565b61041b6040516020016103da9061152b565b604051602081830303815290604052805190602001206040518060400160405280600d81526020016c21a7a72324a3afa5a2a2a822a960991b815250610acd565b610423610b84565b5f61042e8484610bac565b90505f61045b7f000000000000000000000000000000000000000000000000000000000000000083610c53565b90506104678184610c65565b90506104947f00000000000000000000000000000000000000000000000000000000000000008383610c8f565b505061049f60015f55565b505050565b6104b66040516020016103da9061152b565b6104be610b84565b5f6104c98484610bac565b90505f6104f67f000000000000000000000000000000000000000000000000000000000000000083610c53565b90506104678184610d92565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2a4853a604051602001610564906020808252600f908201526e4d41585f424f52524f575f5241544560881b604082015260600190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e084901b1682526004820152602481018490526044016020604051808303815f875af11580156105b9573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c49190611552565b6105ef6040516020016103da9061152b565b6105f7610b84565b6106217f000000000000000000000000000000000000000000000000000000000000000082610dda565b61062a60015f55565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2a4853a604051602001610564906020808252601a908201527f44454641554c545f504f4f4c5f434f4e46494755524154494f4e000000000000604082015260600190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca446dd9604051602001610343906020808252601e908201527f44454641554c545f494e5445524553545f524154455f53545241544547590000604082015260600190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2a4853a604051602001610564906020808252601e908201527f5452414441424c455f444542545f4d554c5449504945525f464143544f520000604082015260600190565b61078f6040516020016103da9061152b565b610797610b84565b5f6107a28484610bac565b90505f6107cf7f000000000000000000000000000000000000000000000000000000000000000083610c53565b90506104678184610e91565b6107ed6040516020016103da9061152b565b6107f5610b84565b6106217f000000000000000000000000000000000000000000000000000000000000000082610ed7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2a4853a6040516020016105649060208082526019908201527f53484f52545f4c49515549444954595f5448524553484f4c4400000000000000604082015260600190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2a4853a6040516020016105649060208082526010908201526f4d41585f4445504f5349545f5241544560801b604082015260600190565b60608167ffffffffffffffff81111561090d5761090d611569565b60405190808252806020026020018201604052801561094057816020015b606081526020019060019003908161092b5790505b5090505f5b828110156109fa575f80308686858181106109625761096261157d565b90506020028101906109749190611591565b6040516109829291906115db565b5f60405180830381855af49150503d805f81146109ba576040519150601f19603f3d011682016040523d82523d5f602084013e6109bf565b606091505b5091509150816109d2576109d281610f27565b808484815181106109e5576109e561157d565b60209081029190910101525050600101610945565b5092915050565b610a136040516020016103da9061152b565b610a1b610b84565b6106217f000000000000000000000000000000000000000000000000000000000000000082610f5f565b610a576040516020016103da9061152b565b610a5f610b84565b6106217f000000000000000000000000000000000000000000000000000000000000000082610fa4565b610a9b6040516020016103da9061152b565b610aa3610b84565b6106217f000000000000000000000000000000000000000000000000000000000000000082611087565b60405163ac4ab3fb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac4ab3fb90604401602060405180830381865afa158015610b36573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b5a91906115ea565b6103c457338160405163a35b150b60e01b8152600401610b7b929190611605565b60405180910390fd5b60025f5403610ba657604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b5f816001600160a01b0316836001600160a01b031610610bcd578183610bd0565b82825b6040519194509250610bfd906020016020808252600490820152631413d3d360e21b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b03808616918301919091528316606082015260800160405160208183030381529060405280519060200120905092915050565b5f610c5e83836110c9565b9392505050565b5f603382610c73575f610c76565b60015b60ff16901b660800000000000019841617905092915050565b5f610c9a84846111c8565b9050806001600160a01b031663e2a4853a84604051602001610ce2906020808252601290820152712827a7a62fa1a7a72324a3aaa920aa24a7a760711b604082015260600190565b60405160208183030381529060405280519060200120604051602001610d12929190918252602082015260400190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e084901b1682526004820152602481018590526044016020604051808303815f875af1158015610d67573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d8b9190611552565b5050505050565b5f61ffff821115610dc157604051639d1ea70b60e01b81526004810183905261ffff6024820152604401610b7b565b5060481b6affff00000000000000000019919091161790565b816001600160a01b031663e2a4853a604051602001610e18906020808252600b908201526a1515d05417d411549253d160aa1b604082015260600190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e084901b1682526004820152602481018490526044016020604051808303815f875af1158015610e6d573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061049f9190611552565b5f61ffff821115610ec057604051639d1ea70b60e01b81526004810183905261ffff6024820152604401610b7b565b5060381b68ffff0000000000000019919091161790565b816001600160a01b031663e2a4853a604051602001610e189060208082526017908201527f4d415247494e5f4c4556454c4c5f5448524553484f4c44000000000000000000604082015260600190565b5f5f610f32836112a1565b915091508015610f56578160405162461bcd60e51b8152600401610b7b9190611628565b61049f8361132c565b816001600160a01b031663e2a4853a604051602001610e18906020808252601290820152712222a12a2fa9a0a322aa2cafa320a1aa27a960711b604082015260600190565b6001600160a01b038116610fcb57604051633372d42d60e21b815260040160405180910390fd5b816001600160a01b031663ca446dd960405160200161100690602080825260089082015267545245415355525960c01b604082015260600190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e084901b16825260048201526001600160a01b03841660248201526044016020604051808303815f875af1158015611063573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061049f9190611510565b816001600160a01b031663e2a4853a604051602001610e18906020808252600f908201526e4c49515549444154494f4e5f46454560881b604082015260600190565b5f5f6110d584846111c8565b9050806001600160a01b031663bd02d0f58460405160200161111d906020808252601290820152712827a7a62fa1a7a72324a3aaa920aa24a7a760711b604082015260600190565b6040516020818303038152906040528051906020012060405160200161114d929190918252602082015260400190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161118191815260200190565b602060405180830381865afa15801561119c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111c09190611552565b949350505050565b5f5f839050806001600160a01b03166391d4403c604051602001611209906020808252600990820152681413d3d317d31254d560ba1b604082015260600190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e084901b168252600482015260248101869052604401602060405180830381865afa15801561125d573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061128191906115ea565b610c5e57604051637357d91f60e01b815260048101849052602401610b7b565b60605f6044835110156112c657505060408051602081019091525f8082529092909150565b5f6112d2846020015190565b90506307b9e43360e51b6001600160e01b03198216016113115760048401935083806020019051810190611306919061163a565b946001945092505050565b5f60405180602001604052805f815250909250925050915091565b80518060208301fd5b6001600160a01b038116811461062a575f5ffd5b5f60208284031215611359575f5ffd5b8135610c5e81611335565b801515811461062a575f5ffd5b5f5f5f60608486031215611383575f5ffd5b833561138e81611335565b9250602084013561139e81611335565b915060408401356113ae81611364565b809150509250925092565b5f5f5f606084860312156113cb575f5ffd5b83356113d681611335565b925060208401356113e681611335565b929592945050506040919091013590565b5f60208284031215611407575f5ffd5b5035919050565b5f5f6020838503121561141f575f5ffd5b823567ffffffffffffffff811115611435575f5ffd5b8301601f81018513611445575f5ffd5b803567ffffffffffffffff81111561145b575f5ffd5b8560208260051b840101111561146f575f5ffd5b6020919091019590945092505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b8281101561150457603f198786030184526114ef85835161147f565b945060209384019391909101906001016114d3565b50929695505050505050565b5f60208284031215611520575f5ffd5b8151610c5e81611335565b6020808252600d908201526c21a7a72324a3afa5a2a2a822a960991b604082015260600190565b5f60208284031215611562575f5ffd5b5051919050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f5f8335601e198436030181126115a6575f5ffd5b83018035915067ffffffffffffffff8211156115c0575f5ffd5b6020019150368190038213156115d4575f5ffd5b9250929050565b818382375f9101908152919050565b5f602082840312156115fa575f5ffd5b8151610c5e81611364565b6001600160a01b03831681526040602082018190525f906111c09083018461147f565b602081525f610c5e602083018461147f565b5f6020828403121561164a575f5ffd5b815167ffffffffffffffff811115611660575f5ffd5b8201601f81018413611670575f5ffd5b805167ffffffffffffffff81111561168a5761168a611569565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156116b9576116b9611569565b6040528181528282016020018610156116d0575f5ffd5b8160208401602083015e5f9181016020019190915294935050505056fea264697066735822122010921c2093ba438ac210ab2d958f8f035705dbae3379e5bfa1887304bd0a2da464736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa\x18S8\x03\x80a\x18S\x839\x81\x01`@\x81\x90Ra\0.\x91a\0`V[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x80R`\x01_U\x16`\xA0Ra\0\x98V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0]W__\xFD[PV[__`@\x83\x85\x03\x12\x15a\0qW__\xFD[\x82Qa\0|\x81a\0IV[` \x84\x01Q\x90\x92Pa\0\x8D\x81a\0IV[\x80\x91PP\x92P\x92\x90PV[`\x80Q`\xA0Qa\x17#a\x010_9_\x81\x81a\x01\xD2\x01R\x81\x81a\x02\xE8\x01R\x81\x81a\x046\x01R\x81\x81a\x04n\x01R\x81\x81a\x04\xD1\x01R\x81\x81a\x05\x04\x01R\x81\x81a\x05\xFC\x01R\x81\x81a\x06/\x01R\x81\x81a\x06\x9F\x01R\x81\x81a\x07\x0F\x01R\x81\x81a\x07\xAA\x01R\x81\x81a\x07\xFA\x01R\x81\x81a\x08!\x01R\x81\x81a\x08\x91\x01R\x81\x81a\n \x01R\x81\x81a\nd\x01Ra\n\xA8\x01R_\x81\x81a\x01U\x01Ra\n\xE9\x01Ra\x17#_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x01\x11W_5`\xE0\x1C\x80cjr\xC6?\x11a\0\x9EW\x80c\x95b(\xC6\x11a\0nW\x80c\x95b(\xC6\x14a\x02SW\x80c\xAC\x96P\xD8\x14a\x02fW\x80c\xBBx\x9B\xD7\x14a\x02\x86W\x80c\xF0\xF4B`\x14a\x02\x99W\x80c\xFE\xF0\xBE\xC8\x14a\x02\xACW__\xFD[\x80cjr\xC6?\x14a\x02\x07W\x80cj\x97\xC0\xFE\x14a\x02\x1AW\x80c\x88#]\x10\x14a\x02-W\x80c\x92T|8\x14a\x02@W__\xFD[\x80cW\xC2\\f\x11a\0\xE4W\x80cW\xC2\\f\x14a\x01\x94W\x80c^ez\xDF\x14a\x01\xA7W\x80c^\xAD\xCA~\x14a\x01\xBAW\x80cf\r\rg\x14a\x01\xCDW\x80ci\xEA\x86\x82\x14a\x01\xF4W__\xFD[\x80c\x1D\xEE\x7F>\x14a\x01\x15W\x80c/\xFA\xF5Y\x14a\x01*W\x80c0\xA7g\xC5\x14a\x01=W\x80cJJ{\x04\x14a\x01PW[__\xFD[a\x01(a\x01#6`\x04a\x13IV[a\x02\xBFV[\0[a\x01(a\x0186`\x04a\x13qV[a\x03\xC8V[a\x01(a\x01K6`\x04a\x13\xB9V[a\x04\xA4V[a\x01w\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01(a\x01\xA26`\x04a\x13\xF7V[a\x05\x02V[a\x01(a\x01\xB56`\x04a\x13\xF7V[a\x05\xDDV[a\x01(a\x01\xC86`\x04a\x13\xF7V[a\x06-V[a\x01w\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x01(a\x02\x026`\x04a\x13IV[a\x06\x9DV[a\x01(a\x02\x156`\x04a\x13\xF7V[a\x07\rV[a\x01(a\x02(6`\x04a\x13\xB9V[a\x07}V[a\x01(a\x02;6`\x04a\x13\xF7V[a\x07\xDBV[a\x01(a\x02N6`\x04a\x13\xF7V[a\x08\x1FV[a\x01(a\x02a6`\x04a\x13\xF7V[a\x08\x8FV[a\x02ya\x02t6`\x04a\x14\x0EV[a\x08\xF2V[`@Qa\x01\x8B\x91\x90a\x14\xADV[a\x01(a\x02\x946`\x04a\x13\xF7V[a\n\x01V[a\x01(a\x02\xA76`\x04a\x13IV[a\nEV[a\x01(a\x02\xBA6`\x04a\x13\xF7V[a\n\x89V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x02\xE6W`@QcX\xC5.M`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xCADm\xD9`@Q` \x01a\x03C\x90` \x80\x82R`\n\x90\x82\x01RiTOKEN_BASE`\xB0\x1B`@\x82\x01R``\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x80Q` \x90\x91\x01 `\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x82R`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x84\x16`$\x82\x01R`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x03\xA0W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xC4\x91\x90a\x15\x10V[PPV[a\x04\x1B`@Q` \x01a\x03\xDA\x90a\x15+V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q\x80`@\x01`@R\x80`\r\x81R` \x01l!\xA7\xA7#$\xA3\xAF\xA5\xA2\xA2\xA8\"\xA9`\x99\x1B\x81RPa\n\xCDV[a\x04#a\x0B\x84V[_a\x04.\x84\x84a\x0B\xACV[\x90P_a\x04[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x0CSV[\x90Pa\x04g\x81\x84a\x0CeV[\x90Pa\x04\x94\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x83a\x0C\x8FV[PPa\x04\x9F`\x01_UV[PPPV[a\x04\xB6`@Q` \x01a\x03\xDA\x90a\x15+V[a\x04\xBEa\x0B\x84V[_a\x04\xC9\x84\x84a\x0B\xACV[\x90P_a\x04\xF6\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x0CSV[\x90Pa\x04g\x81\x84a\r\x92V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x05d\x90` \x80\x82R`\x0F\x90\x82\x01RnMAX_BORROW_RATE`\x88\x1B`@\x82\x01R``\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x80Q` \x90\x91\x01 `\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x82R`\x04\x82\x01R`$\x81\x01\x84\x90R`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\xB9W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xC4\x91\x90a\x15RV[a\x05\xEF`@Q` \x01a\x03\xDA\x90a\x15+V[a\x05\xF7a\x0B\x84V[a\x06!\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82a\r\xDAV[a\x06*`\x01_UV[PV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x05d\x90` \x80\x82R`\x1A\x90\x82\x01R\x7FDEFAULT_POOL_CONFIGURATION\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xCADm\xD9`@Q` \x01a\x03C\x90` \x80\x82R`\x1E\x90\x82\x01R\x7FDEFAULT_INTEREST_RATE_STRATEGY\0\0`@\x82\x01R``\x01\x90V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x05d\x90` \x80\x82R`\x1E\x90\x82\x01R\x7FTRADABLE_DEBT_MULTIPIER_FACTOR\0\0`@\x82\x01R``\x01\x90V[a\x07\x8F`@Q` \x01a\x03\xDA\x90a\x15+V[a\x07\x97a\x0B\x84V[_a\x07\xA2\x84\x84a\x0B\xACV[\x90P_a\x07\xCF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x0CSV[\x90Pa\x04g\x81\x84a\x0E\x91V[a\x07\xED`@Q` \x01a\x03\xDA\x90a\x15+V[a\x07\xF5a\x0B\x84V[a\x06!\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82a\x0E\xD7V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x05d\x90` \x80\x82R`\x19\x90\x82\x01R\x7FSHORT_LIQUIDITY_THRESHOLD\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x05d\x90` \x80\x82R`\x10\x90\x82\x01RoMAX_DEPOSIT_RATE`\x80\x1B`@\x82\x01R``\x01\x90V[``\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t\rWa\t\ra\x15iV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\t@W\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\t+W\x90P[P\x90P_[\x82\x81\x10\x15a\t\xFAW_\x800\x86\x86\x85\x81\x81\x10a\tbWa\tba\x15}V[\x90P` \x02\x81\x01\x90a\tt\x91\x90a\x15\x91V[`@Qa\t\x82\x92\x91\x90a\x15\xDBV[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a\t\xBAW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t\xBFV[``\x91P[P\x91P\x91P\x81a\t\xD2Wa\t\xD2\x81a\x0F'V[\x80\x84\x84\x81Q\x81\x10a\t\xE5Wa\t\xE5a\x15}V[` \x90\x81\x02\x91\x90\x91\x01\x01RPP`\x01\x01a\tEV[P\x92\x91PPV[a\n\x13`@Q` \x01a\x03\xDA\x90a\x15+V[a\n\x1Ba\x0B\x84V[a\x06!\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82a\x0F_V[a\nW`@Q` \x01a\x03\xDA\x90a\x15+V[a\n_a\x0B\x84V[a\x06!\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82a\x0F\xA4V[a\n\x9B`@Q` \x01a\x03\xDA\x90a\x15+V[a\n\xA3a\x0B\x84V[a\x06!\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82a\x10\x87V[`@Qc\xACJ\xB3\xFB`\xE0\x1B\x81R3`\x04\x82\x01R`$\x81\x01\x83\x90R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x90c\xACJ\xB3\xFB\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0B6W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0BZ\x91\x90a\x15\xEAV[a\x03\xC4W3\x81`@Qc\xA3[\x15\x0B`\xE0\x1B\x81R`\x04\x01a\x0B{\x92\x91\x90a\x16\x05V[`@Q\x80\x91\x03\x90\xFD[`\x02_T\x03a\x0B\xA6W`@Qc>\xE5\xAE\xB5`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02_UV[_\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x10a\x0B\xCDW\x81\x83a\x0B\xD0V[\x82\x82[`@Q\x91\x94P\x92Pa\x0B\xFD\x90` \x01` \x80\x82R`\x04\x90\x82\x01Rc\x14\x13\xD3\xD3`\xE2\x1B`@\x82\x01R``\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x90\x83\x01R`\x01`\x01`\xA0\x1B\x03\x80\x86\x16\x91\x83\x01\x91\x90\x91R\x83\x16``\x82\x01R`\x80\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x92\x91PPV[_a\x0C^\x83\x83a\x10\xC9V[\x93\x92PPPV[_`3\x82a\x0CsW_a\x0CvV[`\x01[`\xFF\x16\x90\x1Bf\x08\0\0\0\0\0\0\x19\x84\x16\x17\x90P\x92\x91PPV[_a\x0C\x9A\x84\x84a\x11\xC8V[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:\x84`@Q` \x01a\x0C\xE2\x90` \x80\x82R`\x12\x90\x82\x01Rq('\xA7\xA6/\xA1\xA7\xA7#$\xA3\xAA\xA9 \xAA$\xA7\xA7`q\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\r\x12\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x80Q` \x90\x91\x01 `\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x82R`\x04\x82\x01R`$\x81\x01\x85\x90R`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\rgW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\x8B\x91\x90a\x15RV[PPPPPV[_a\xFF\xFF\x82\x11\x15a\r\xC1W`@Qc\x9D\x1E\xA7\x0B`\xE0\x1B\x81R`\x04\x81\x01\x83\x90Ra\xFF\xFF`$\x82\x01R`D\x01a\x0B{V[P`H\x1Bj\xFF\xFF\0\0\0\0\0\0\0\0\0\x19\x91\x90\x91\x16\x17\x90V[\x81`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x0E\x18\x90` \x80\x82R`\x0B\x90\x82\x01Rj\x15\x15\xD0T\x17\xD4\x11T\x92S\xD1`\xAA\x1B`@\x82\x01R``\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x80Q` \x90\x91\x01 `\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x82R`\x04\x82\x01R`$\x81\x01\x84\x90R`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0EmW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x9F\x91\x90a\x15RV[_a\xFF\xFF\x82\x11\x15a\x0E\xC0W`@Qc\x9D\x1E\xA7\x0B`\xE0\x1B\x81R`\x04\x81\x01\x83\x90Ra\xFF\xFF`$\x82\x01R`D\x01a\x0B{V[P`8\x1Bh\xFF\xFF\0\0\0\0\0\0\0\x19\x91\x90\x91\x16\x17\x90V[\x81`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x0E\x18\x90` \x80\x82R`\x17\x90\x82\x01R\x7FMARGIN_LEVELL_THRESHOLD\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[__a\x0F2\x83a\x12\xA1V[\x91P\x91P\x80\x15a\x0FVW\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x0B{\x91\x90a\x16(V[a\x04\x9F\x83a\x13,V[\x81`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x0E\x18\x90` \x80\x82R`\x12\x90\x82\x01Rq\"\"\xA1*/\xA9\xA0\xA3\"\xAA,\xAF\xA3 \xA1\xAA'\xA9`q\x1B`@\x82\x01R``\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x0F\xCBW`@Qc3r\xD4-`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81`\x01`\x01`\xA0\x1B\x03\x16c\xCADm\xD9`@Q` \x01a\x10\x06\x90` \x80\x82R`\x08\x90\x82\x01RgTREASURY`\xC0\x1B`@\x82\x01R``\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x80Q` \x90\x91\x01 `\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x82R`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x84\x16`$\x82\x01R`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x10cW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x9F\x91\x90a\x15\x10V[\x81`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x0E\x18\x90` \x80\x82R`\x0F\x90\x82\x01RnLIQUIDATION_FEE`\x88\x1B`@\x82\x01R``\x01\x90V[__a\x10\xD5\x84\x84a\x11\xC8V[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16c\xBD\x02\xD0\xF5\x84`@Q` \x01a\x11\x1D\x90` \x80\x82R`\x12\x90\x82\x01Rq('\xA7\xA6/\xA1\xA7\xA7#$\xA3\xAA\xA9 \xAA$\xA7\xA7`q\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\x11M\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x11\x81\x91\x81R` \x01\x90V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\x9CW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\xC0\x91\x90a\x15RV[\x94\x93PPPPV[__\x83\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16c\x91\xD4@<`@Q` \x01a\x12\t\x90` \x80\x82R`\t\x90\x82\x01Rh\x14\x13\xD3\xD3\x17\xD3\x12T\xD5`\xBA\x1B`@\x82\x01R``\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x80Q` \x90\x91\x01 `\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x82R`\x04\x82\x01R`$\x81\x01\x86\x90R`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x12]W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\x81\x91\x90a\x15\xEAV[a\x0C^W`@QcsW\xD9\x1F`\xE0\x1B\x81R`\x04\x81\x01\x84\x90R`$\x01a\x0B{V[``_`D\x83Q\x10\x15a\x12\xC6WPP`@\x80Q` \x81\x01\x90\x91R_\x80\x82R\x90\x92\x90\x91PV[_a\x12\xD2\x84` \x01Q\x90V[\x90Pc\x07\xB9\xE43`\xE5\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\x13\x11W`\x04\x84\x01\x93P\x83\x80` \x01\x90Q\x81\x01\x90a\x13\x06\x91\x90a\x16:V[\x94`\x01\x94P\x92PPPV[_`@Q\x80` \x01`@R\x80_\x81RP\x90\x92P\x92PP\x91P\x91V[\x80Q\x80` \x83\x01\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x06*W__\xFD[_` \x82\x84\x03\x12\x15a\x13YW__\xFD[\x815a\x0C^\x81a\x135V[\x80\x15\x15\x81\x14a\x06*W__\xFD[___``\x84\x86\x03\x12\x15a\x13\x83W__\xFD[\x835a\x13\x8E\x81a\x135V[\x92P` \x84\x015a\x13\x9E\x81a\x135V[\x91P`@\x84\x015a\x13\xAE\x81a\x13dV[\x80\x91PP\x92P\x92P\x92V[___``\x84\x86\x03\x12\x15a\x13\xCBW__\xFD[\x835a\x13\xD6\x81a\x135V[\x92P` \x84\x015a\x13\xE6\x81a\x135V[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[_` \x82\x84\x03\x12\x15a\x14\x07W__\xFD[P5\x91\x90PV[__` \x83\x85\x03\x12\x15a\x14\x1FW__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x145W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x14EW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14[W__\xFD[\x85` \x82`\x05\x1B\x84\x01\x01\x11\x15a\x14oW__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[_` \x82\x01` \x83R\x80\x84Q\x80\x83R`@\x85\x01\x91P`@\x81`\x05\x1B\x86\x01\x01\x92P` \x86\x01_[\x82\x81\x10\x15a\x15\x04W`?\x19\x87\x86\x03\x01\x84Ra\x14\xEF\x85\x83Qa\x14\x7FV[\x94P` \x93\x84\x01\x93\x91\x90\x91\x01\x90`\x01\x01a\x14\xD3V[P\x92\x96\x95PPPPPPV[_` \x82\x84\x03\x12\x15a\x15 W__\xFD[\x81Qa\x0C^\x81a\x135V[` \x80\x82R`\r\x90\x82\x01Rl!\xA7\xA7#$\xA3\xAF\xA5\xA2\xA2\xA8\"\xA9`\x99\x1B`@\x82\x01R``\x01\x90V[_` \x82\x84\x03\x12\x15a\x15bW__\xFD[PQ\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[__\x835`\x1E\x19\x846\x03\x01\x81\x12a\x15\xA6W__\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x15\xC0W__\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x15\xD4W__\xFD[\x92P\x92\x90PV[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[_` \x82\x84\x03\x12\x15a\x15\xFAW__\xFD[\x81Qa\x0C^\x81a\x13dV[`\x01`\x01`\xA0\x1B\x03\x83\x16\x81R`@` \x82\x01\x81\x90R_\x90a\x11\xC0\x90\x83\x01\x84a\x14\x7FV[` \x81R_a\x0C^` \x83\x01\x84a\x14\x7FV[_` \x82\x84\x03\x12\x15a\x16JW__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16`W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x16pW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16\x8AWa\x16\x8Aa\x15iV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x16\xB9Wa\x16\xB9a\x15iV[`@R\x81\x81R\x82\x82\x01` \x01\x86\x10\x15a\x16\xD0W__\xFD[\x81` \x84\x01` \x83\x01^_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV\xFE\xA2dipfsX\"\x12 \x10\x92\x1C \x93\xBAC\x8A\xC2\x10\xAB-\x95\x8F\x8F\x03W\x05\xDB\xAE3y\xE5\xBF\xA1\x88s\x04\xBD\n-\xA4dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610111575f3560e01c80636a72c63f1161009e578063956228c61161006e578063956228c614610253578063ac9650d814610266578063bb789bd714610286578063f0f4426014610299578063fef0bec8146102ac575f5ffd5b80636a72c63f146102075780636a97c0fe1461021a57806388235d101461022d57806392547c3814610240575f5ffd5b806357c25c66116100e457806357c25c66146101945780635e657adf146101a75780635eadca7e146101ba578063660d0d67146101cd57806369ea8682146101f4575f5ffd5b80631dee7f3e146101155780632ffaf5591461012a57806330a767c51461013d5780634a4a7b0414610150575b5f5ffd5b610128610123366004611349565b6102bf565b005b610128610138366004611371565b6103c8565b61012861014b3660046113b9565b6104a4565b6101777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101286101a23660046113f7565b610502565b6101286101b53660046113f7565b6105dd565b6101286101c83660046113f7565b61062d565b6101777f000000000000000000000000000000000000000000000000000000000000000081565b610128610202366004611349565b61069d565b6101286102153660046113f7565b61070d565b6101286102283660046113b9565b61077d565b61012861023b3660046113f7565b6107db565b61012861024e3660046113f7565b61081f565b6101286102613660046113f7565b61088f565b61027961027436600461140e565b6108f2565b60405161018b91906114ad565b6101286102943660046113f7565b610a01565b6101286102a7366004611349565b610a45565b6101286102ba3660046113f7565b610a89565b6001600160a01b0381166102e6576040516358c52e4d60e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca446dd9604051602001610343906020808252600a9082015269544f4b454e5f4241534560b01b604082015260600190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e084901b16825260048201526001600160a01b03841660248201526044016020604051808303815f875af11580156103a0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c49190611510565b5050565b61041b6040516020016103da9061152b565b604051602081830303815290604052805190602001206040518060400160405280600d81526020016c21a7a72324a3afa5a2a2a822a960991b815250610acd565b610423610b84565b5f61042e8484610bac565b90505f61045b7f000000000000000000000000000000000000000000000000000000000000000083610c53565b90506104678184610c65565b90506104947f00000000000000000000000000000000000000000000000000000000000000008383610c8f565b505061049f60015f55565b505050565b6104b66040516020016103da9061152b565b6104be610b84565b5f6104c98484610bac565b90505f6104f67f000000000000000000000000000000000000000000000000000000000000000083610c53565b90506104678184610d92565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2a4853a604051602001610564906020808252600f908201526e4d41585f424f52524f575f5241544560881b604082015260600190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e084901b1682526004820152602481018490526044016020604051808303815f875af11580156105b9573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c49190611552565b6105ef6040516020016103da9061152b565b6105f7610b84565b6106217f000000000000000000000000000000000000000000000000000000000000000082610dda565b61062a60015f55565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2a4853a604051602001610564906020808252601a908201527f44454641554c545f504f4f4c5f434f4e46494755524154494f4e000000000000604082015260600190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca446dd9604051602001610343906020808252601e908201527f44454641554c545f494e5445524553545f524154455f53545241544547590000604082015260600190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2a4853a604051602001610564906020808252601e908201527f5452414441424c455f444542545f4d554c5449504945525f464143544f520000604082015260600190565b61078f6040516020016103da9061152b565b610797610b84565b5f6107a28484610bac565b90505f6107cf7f000000000000000000000000000000000000000000000000000000000000000083610c53565b90506104678184610e91565b6107ed6040516020016103da9061152b565b6107f5610b84565b6106217f000000000000000000000000000000000000000000000000000000000000000082610ed7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2a4853a6040516020016105649060208082526019908201527f53484f52545f4c49515549444954595f5448524553484f4c4400000000000000604082015260600190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e2a4853a6040516020016105649060208082526010908201526f4d41585f4445504f5349545f5241544560801b604082015260600190565b60608167ffffffffffffffff81111561090d5761090d611569565b60405190808252806020026020018201604052801561094057816020015b606081526020019060019003908161092b5790505b5090505f5b828110156109fa575f80308686858181106109625761096261157d565b90506020028101906109749190611591565b6040516109829291906115db565b5f60405180830381855af49150503d805f81146109ba576040519150601f19603f3d011682016040523d82523d5f602084013e6109bf565b606091505b5091509150816109d2576109d281610f27565b808484815181106109e5576109e561157d565b60209081029190910101525050600101610945565b5092915050565b610a136040516020016103da9061152b565b610a1b610b84565b6106217f000000000000000000000000000000000000000000000000000000000000000082610f5f565b610a576040516020016103da9061152b565b610a5f610b84565b6106217f000000000000000000000000000000000000000000000000000000000000000082610fa4565b610a9b6040516020016103da9061152b565b610aa3610b84565b6106217f000000000000000000000000000000000000000000000000000000000000000082611087565b60405163ac4ab3fb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac4ab3fb90604401602060405180830381865afa158015610b36573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b5a91906115ea565b6103c457338160405163a35b150b60e01b8152600401610b7b929190611605565b60405180910390fd5b60025f5403610ba657604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b5f816001600160a01b0316836001600160a01b031610610bcd578183610bd0565b82825b6040519194509250610bfd906020016020808252600490820152631413d3d360e21b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b03808616918301919091528316606082015260800160405160208183030381529060405280519060200120905092915050565b5f610c5e83836110c9565b9392505050565b5f603382610c73575f610c76565b60015b60ff16901b660800000000000019841617905092915050565b5f610c9a84846111c8565b9050806001600160a01b031663e2a4853a84604051602001610ce2906020808252601290820152712827a7a62fa1a7a72324a3aaa920aa24a7a760711b604082015260600190565b60405160208183030381529060405280519060200120604051602001610d12929190918252602082015260400190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e084901b1682526004820152602481018590526044016020604051808303815f875af1158015610d67573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d8b9190611552565b5050505050565b5f61ffff821115610dc157604051639d1ea70b60e01b81526004810183905261ffff6024820152604401610b7b565b5060481b6affff00000000000000000019919091161790565b816001600160a01b031663e2a4853a604051602001610e18906020808252600b908201526a1515d05417d411549253d160aa1b604082015260600190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e084901b1682526004820152602481018490526044016020604051808303815f875af1158015610e6d573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061049f9190611552565b5f61ffff821115610ec057604051639d1ea70b60e01b81526004810183905261ffff6024820152604401610b7b565b5060381b68ffff0000000000000019919091161790565b816001600160a01b031663e2a4853a604051602001610e189060208082526017908201527f4d415247494e5f4c4556454c4c5f5448524553484f4c44000000000000000000604082015260600190565b5f5f610f32836112a1565b915091508015610f56578160405162461bcd60e51b8152600401610b7b9190611628565b61049f8361132c565b816001600160a01b031663e2a4853a604051602001610e18906020808252601290820152712222a12a2fa9a0a322aa2cafa320a1aa27a960711b604082015260600190565b6001600160a01b038116610fcb57604051633372d42d60e21b815260040160405180910390fd5b816001600160a01b031663ca446dd960405160200161100690602080825260089082015267545245415355525960c01b604082015260600190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e084901b16825260048201526001600160a01b03841660248201526044016020604051808303815f875af1158015611063573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061049f9190611510565b816001600160a01b031663e2a4853a604051602001610e18906020808252600f908201526e4c49515549444154494f4e5f46454560881b604082015260600190565b5f5f6110d584846111c8565b9050806001600160a01b031663bd02d0f58460405160200161111d906020808252601290820152712827a7a62fa1a7a72324a3aaa920aa24a7a760711b604082015260600190565b6040516020818303038152906040528051906020012060405160200161114d929190918252602082015260400190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161118191815260200190565b602060405180830381865afa15801561119c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111c09190611552565b949350505050565b5f5f839050806001600160a01b03166391d4403c604051602001611209906020808252600990820152681413d3d317d31254d560ba1b604082015260600190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e084901b168252600482015260248101869052604401602060405180830381865afa15801561125d573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061128191906115ea565b610c5e57604051637357d91f60e01b815260048101849052602401610b7b565b60605f6044835110156112c657505060408051602081019091525f8082529092909150565b5f6112d2846020015190565b90506307b9e43360e51b6001600160e01b03198216016113115760048401935083806020019051810190611306919061163a565b946001945092505050565b5f60405180602001604052805f815250909250925050915091565b80518060208301fd5b6001600160a01b038116811461062a575f5ffd5b5f60208284031215611359575f5ffd5b8135610c5e81611335565b801515811461062a575f5ffd5b5f5f5f60608486031215611383575f5ffd5b833561138e81611335565b9250602084013561139e81611335565b915060408401356113ae81611364565b809150509250925092565b5f5f5f606084860312156113cb575f5ffd5b83356113d681611335565b925060208401356113e681611335565b929592945050506040919091013590565b5f60208284031215611407575f5ffd5b5035919050565b5f5f6020838503121561141f575f5ffd5b823567ffffffffffffffff811115611435575f5ffd5b8301601f81018513611445575f5ffd5b803567ffffffffffffffff81111561145b575f5ffd5b8560208260051b840101111561146f575f5ffd5b6020919091019590945092505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b8281101561150457603f198786030184526114ef85835161147f565b945060209384019391909101906001016114d3565b50929695505050505050565b5f60208284031215611520575f5ffd5b8151610c5e81611335565b6020808252600d908201526c21a7a72324a3afa5a2a2a822a960991b604082015260600190565b5f60208284031215611562575f5ffd5b5051919050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f5f8335601e198436030181126115a6575f5ffd5b83018035915067ffffffffffffffff8211156115c0575f5ffd5b6020019150368190038213156115d4575f5ffd5b9250929050565b818382375f9101908152919050565b5f602082840312156115fa575f5ffd5b8151610c5e81611364565b6001600160a01b03831681526040602082018190525f906111c09083018461147f565b602081525f610c5e602083018461147f565b5f6020828403121561164a575f5ffd5b815167ffffffffffffffff811115611660575f5ffd5b8201601f81018413611670575f5ffd5b805167ffffffffffffffff81111561168a5761168a611569565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156116b9576116b9611569565b6040528181528282016020018610156116d0575f5ffd5b8160208401602083015e5f9181016020019190915294935050505056fea264697066735822122010921c2093ba438ac210ab2d958f8f035705dbae3379e5bfa1887304bd0a2da464736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x01\x11W_5`\xE0\x1C\x80cjr\xC6?\x11a\0\x9EW\x80c\x95b(\xC6\x11a\0nW\x80c\x95b(\xC6\x14a\x02SW\x80c\xAC\x96P\xD8\x14a\x02fW\x80c\xBBx\x9B\xD7\x14a\x02\x86W\x80c\xF0\xF4B`\x14a\x02\x99W\x80c\xFE\xF0\xBE\xC8\x14a\x02\xACW__\xFD[\x80cjr\xC6?\x14a\x02\x07W\x80cj\x97\xC0\xFE\x14a\x02\x1AW\x80c\x88#]\x10\x14a\x02-W\x80c\x92T|8\x14a\x02@W__\xFD[\x80cW\xC2\\f\x11a\0\xE4W\x80cW\xC2\\f\x14a\x01\x94W\x80c^ez\xDF\x14a\x01\xA7W\x80c^\xAD\xCA~\x14a\x01\xBAW\x80cf\r\rg\x14a\x01\xCDW\x80ci\xEA\x86\x82\x14a\x01\xF4W__\xFD[\x80c\x1D\xEE\x7F>\x14a\x01\x15W\x80c/\xFA\xF5Y\x14a\x01*W\x80c0\xA7g\xC5\x14a\x01=W\x80cJJ{\x04\x14a\x01PW[__\xFD[a\x01(a\x01#6`\x04a\x13IV[a\x02\xBFV[\0[a\x01(a\x0186`\x04a\x13qV[a\x03\xC8V[a\x01(a\x01K6`\x04a\x13\xB9V[a\x04\xA4V[a\x01w\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01(a\x01\xA26`\x04a\x13\xF7V[a\x05\x02V[a\x01(a\x01\xB56`\x04a\x13\xF7V[a\x05\xDDV[a\x01(a\x01\xC86`\x04a\x13\xF7V[a\x06-V[a\x01w\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x01(a\x02\x026`\x04a\x13IV[a\x06\x9DV[a\x01(a\x02\x156`\x04a\x13\xF7V[a\x07\rV[a\x01(a\x02(6`\x04a\x13\xB9V[a\x07}V[a\x01(a\x02;6`\x04a\x13\xF7V[a\x07\xDBV[a\x01(a\x02N6`\x04a\x13\xF7V[a\x08\x1FV[a\x01(a\x02a6`\x04a\x13\xF7V[a\x08\x8FV[a\x02ya\x02t6`\x04a\x14\x0EV[a\x08\xF2V[`@Qa\x01\x8B\x91\x90a\x14\xADV[a\x01(a\x02\x946`\x04a\x13\xF7V[a\n\x01V[a\x01(a\x02\xA76`\x04a\x13IV[a\nEV[a\x01(a\x02\xBA6`\x04a\x13\xF7V[a\n\x89V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x02\xE6W`@QcX\xC5.M`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xCADm\xD9`@Q` \x01a\x03C\x90` \x80\x82R`\n\x90\x82\x01RiTOKEN_BASE`\xB0\x1B`@\x82\x01R``\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x80Q` \x90\x91\x01 `\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x82R`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x84\x16`$\x82\x01R`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x03\xA0W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xC4\x91\x90a\x15\x10V[PPV[a\x04\x1B`@Q` \x01a\x03\xDA\x90a\x15+V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q\x80`@\x01`@R\x80`\r\x81R` \x01l!\xA7\xA7#$\xA3\xAF\xA5\xA2\xA2\xA8\"\xA9`\x99\x1B\x81RPa\n\xCDV[a\x04#a\x0B\x84V[_a\x04.\x84\x84a\x0B\xACV[\x90P_a\x04[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x0CSV[\x90Pa\x04g\x81\x84a\x0CeV[\x90Pa\x04\x94\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x83a\x0C\x8FV[PPa\x04\x9F`\x01_UV[PPPV[a\x04\xB6`@Q` \x01a\x03\xDA\x90a\x15+V[a\x04\xBEa\x0B\x84V[_a\x04\xC9\x84\x84a\x0B\xACV[\x90P_a\x04\xF6\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x0CSV[\x90Pa\x04g\x81\x84a\r\x92V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x05d\x90` \x80\x82R`\x0F\x90\x82\x01RnMAX_BORROW_RATE`\x88\x1B`@\x82\x01R``\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x80Q` \x90\x91\x01 `\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x82R`\x04\x82\x01R`$\x81\x01\x84\x90R`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x05\xB9W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xC4\x91\x90a\x15RV[a\x05\xEF`@Q` \x01a\x03\xDA\x90a\x15+V[a\x05\xF7a\x0B\x84V[a\x06!\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82a\r\xDAV[a\x06*`\x01_UV[PV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x05d\x90` \x80\x82R`\x1A\x90\x82\x01R\x7FDEFAULT_POOL_CONFIGURATION\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xCADm\xD9`@Q` \x01a\x03C\x90` \x80\x82R`\x1E\x90\x82\x01R\x7FDEFAULT_INTEREST_RATE_STRATEGY\0\0`@\x82\x01R``\x01\x90V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x05d\x90` \x80\x82R`\x1E\x90\x82\x01R\x7FTRADABLE_DEBT_MULTIPIER_FACTOR\0\0`@\x82\x01R``\x01\x90V[a\x07\x8F`@Q` \x01a\x03\xDA\x90a\x15+V[a\x07\x97a\x0B\x84V[_a\x07\xA2\x84\x84a\x0B\xACV[\x90P_a\x07\xCF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x0CSV[\x90Pa\x04g\x81\x84a\x0E\x91V[a\x07\xED`@Q` \x01a\x03\xDA\x90a\x15+V[a\x07\xF5a\x0B\x84V[a\x06!\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82a\x0E\xD7V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x05d\x90` \x80\x82R`\x19\x90\x82\x01R\x7FSHORT_LIQUIDITY_THRESHOLD\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x05d\x90` \x80\x82R`\x10\x90\x82\x01RoMAX_DEPOSIT_RATE`\x80\x1B`@\x82\x01R``\x01\x90V[``\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t\rWa\t\ra\x15iV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\t@W\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\t+W\x90P[P\x90P_[\x82\x81\x10\x15a\t\xFAW_\x800\x86\x86\x85\x81\x81\x10a\tbWa\tba\x15}V[\x90P` \x02\x81\x01\x90a\tt\x91\x90a\x15\x91V[`@Qa\t\x82\x92\x91\x90a\x15\xDBV[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a\t\xBAW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t\xBFV[``\x91P[P\x91P\x91P\x81a\t\xD2Wa\t\xD2\x81a\x0F'V[\x80\x84\x84\x81Q\x81\x10a\t\xE5Wa\t\xE5a\x15}V[` \x90\x81\x02\x91\x90\x91\x01\x01RPP`\x01\x01a\tEV[P\x92\x91PPV[a\n\x13`@Q` \x01a\x03\xDA\x90a\x15+V[a\n\x1Ba\x0B\x84V[a\x06!\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82a\x0F_V[a\nW`@Q` \x01a\x03\xDA\x90a\x15+V[a\n_a\x0B\x84V[a\x06!\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82a\x0F\xA4V[a\n\x9B`@Q` \x01a\x03\xDA\x90a\x15+V[a\n\xA3a\x0B\x84V[a\x06!\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82a\x10\x87V[`@Qc\xACJ\xB3\xFB`\xE0\x1B\x81R3`\x04\x82\x01R`$\x81\x01\x83\x90R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x90c\xACJ\xB3\xFB\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0B6W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0BZ\x91\x90a\x15\xEAV[a\x03\xC4W3\x81`@Qc\xA3[\x15\x0B`\xE0\x1B\x81R`\x04\x01a\x0B{\x92\x91\x90a\x16\x05V[`@Q\x80\x91\x03\x90\xFD[`\x02_T\x03a\x0B\xA6W`@Qc>\xE5\xAE\xB5`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02_UV[_\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x10a\x0B\xCDW\x81\x83a\x0B\xD0V[\x82\x82[`@Q\x91\x94P\x92Pa\x0B\xFD\x90` \x01` \x80\x82R`\x04\x90\x82\x01Rc\x14\x13\xD3\xD3`\xE2\x1B`@\x82\x01R``\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x82\x82R\x80Q` \x91\x82\x01 \x90\x83\x01R`\x01`\x01`\xA0\x1B\x03\x80\x86\x16\x91\x83\x01\x91\x90\x91R\x83\x16``\x82\x01R`\x80\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x92\x91PPV[_a\x0C^\x83\x83a\x10\xC9V[\x93\x92PPPV[_`3\x82a\x0CsW_a\x0CvV[`\x01[`\xFF\x16\x90\x1Bf\x08\0\0\0\0\0\0\x19\x84\x16\x17\x90P\x92\x91PPV[_a\x0C\x9A\x84\x84a\x11\xC8V[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:\x84`@Q` \x01a\x0C\xE2\x90` \x80\x82R`\x12\x90\x82\x01Rq('\xA7\xA6/\xA1\xA7\xA7#$\xA3\xAA\xA9 \xAA$\xA7\xA7`q\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\r\x12\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x80Q` \x90\x91\x01 `\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x82R`\x04\x82\x01R`$\x81\x01\x85\x90R`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\rgW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\r\x8B\x91\x90a\x15RV[PPPPPV[_a\xFF\xFF\x82\x11\x15a\r\xC1W`@Qc\x9D\x1E\xA7\x0B`\xE0\x1B\x81R`\x04\x81\x01\x83\x90Ra\xFF\xFF`$\x82\x01R`D\x01a\x0B{V[P`H\x1Bj\xFF\xFF\0\0\0\0\0\0\0\0\0\x19\x91\x90\x91\x16\x17\x90V[\x81`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x0E\x18\x90` \x80\x82R`\x0B\x90\x82\x01Rj\x15\x15\xD0T\x17\xD4\x11T\x92S\xD1`\xAA\x1B`@\x82\x01R``\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x80Q` \x90\x91\x01 `\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x82R`\x04\x82\x01R`$\x81\x01\x84\x90R`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0EmW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x9F\x91\x90a\x15RV[_a\xFF\xFF\x82\x11\x15a\x0E\xC0W`@Qc\x9D\x1E\xA7\x0B`\xE0\x1B\x81R`\x04\x81\x01\x83\x90Ra\xFF\xFF`$\x82\x01R`D\x01a\x0B{V[P`8\x1Bh\xFF\xFF\0\0\0\0\0\0\0\x19\x91\x90\x91\x16\x17\x90V[\x81`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x0E\x18\x90` \x80\x82R`\x17\x90\x82\x01R\x7FMARGIN_LEVELL_THRESHOLD\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[__a\x0F2\x83a\x12\xA1V[\x91P\x91P\x80\x15a\x0FVW\x81`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x0B{\x91\x90a\x16(V[a\x04\x9F\x83a\x13,V[\x81`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x0E\x18\x90` \x80\x82R`\x12\x90\x82\x01Rq\"\"\xA1*/\xA9\xA0\xA3\"\xAA,\xAF\xA3 \xA1\xAA'\xA9`q\x1B`@\x82\x01R``\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x0F\xCBW`@Qc3r\xD4-`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81`\x01`\x01`\xA0\x1B\x03\x16c\xCADm\xD9`@Q` \x01a\x10\x06\x90` \x80\x82R`\x08\x90\x82\x01RgTREASURY`\xC0\x1B`@\x82\x01R``\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x80Q` \x90\x91\x01 `\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x82R`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x84\x16`$\x82\x01R`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x10cW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x9F\x91\x90a\x15\x10V[\x81`\x01`\x01`\xA0\x1B\x03\x16c\xE2\xA4\x85:`@Q` \x01a\x0E\x18\x90` \x80\x82R`\x0F\x90\x82\x01RnLIQUIDATION_FEE`\x88\x1B`@\x82\x01R``\x01\x90V[__a\x10\xD5\x84\x84a\x11\xC8V[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16c\xBD\x02\xD0\xF5\x84`@Q` \x01a\x11\x1D\x90` \x80\x82R`\x12\x90\x82\x01Rq('\xA7\xA6/\xA1\xA7\xA7#$\xA3\xAA\xA9 \xAA$\xA7\xA7`q\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\x11M\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x11\x81\x91\x81R` \x01\x90V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\x9CW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\xC0\x91\x90a\x15RV[\x94\x93PPPPV[__\x83\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16c\x91\xD4@<`@Q` \x01a\x12\t\x90` \x80\x82R`\t\x90\x82\x01Rh\x14\x13\xD3\xD3\x17\xD3\x12T\xD5`\xBA\x1B`@\x82\x01R``\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90R\x80Q` \x90\x91\x01 `\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x82R`\x04\x82\x01R`$\x81\x01\x86\x90R`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x12]W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\x81\x91\x90a\x15\xEAV[a\x0C^W`@QcsW\xD9\x1F`\xE0\x1B\x81R`\x04\x81\x01\x84\x90R`$\x01a\x0B{V[``_`D\x83Q\x10\x15a\x12\xC6WPP`@\x80Q` \x81\x01\x90\x91R_\x80\x82R\x90\x92\x90\x91PV[_a\x12\xD2\x84` \x01Q\x90V[\x90Pc\x07\xB9\xE43`\xE5\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\x13\x11W`\x04\x84\x01\x93P\x83\x80` \x01\x90Q\x81\x01\x90a\x13\x06\x91\x90a\x16:V[\x94`\x01\x94P\x92PPPV[_`@Q\x80` \x01`@R\x80_\x81RP\x90\x92P\x92PP\x91P\x91V[\x80Q\x80` \x83\x01\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x06*W__\xFD[_` \x82\x84\x03\x12\x15a\x13YW__\xFD[\x815a\x0C^\x81a\x135V[\x80\x15\x15\x81\x14a\x06*W__\xFD[___``\x84\x86\x03\x12\x15a\x13\x83W__\xFD[\x835a\x13\x8E\x81a\x135V[\x92P` \x84\x015a\x13\x9E\x81a\x135V[\x91P`@\x84\x015a\x13\xAE\x81a\x13dV[\x80\x91PP\x92P\x92P\x92V[___``\x84\x86\x03\x12\x15a\x13\xCBW__\xFD[\x835a\x13\xD6\x81a\x135V[\x92P` \x84\x015a\x13\xE6\x81a\x135V[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[_` \x82\x84\x03\x12\x15a\x14\x07W__\xFD[P5\x91\x90PV[__` \x83\x85\x03\x12\x15a\x14\x1FW__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x145W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x14EW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14[W__\xFD[\x85` \x82`\x05\x1B\x84\x01\x01\x11\x15a\x14oW__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[_` \x82\x01` \x83R\x80\x84Q\x80\x83R`@\x85\x01\x91P`@\x81`\x05\x1B\x86\x01\x01\x92P` \x86\x01_[\x82\x81\x10\x15a\x15\x04W`?\x19\x87\x86\x03\x01\x84Ra\x14\xEF\x85\x83Qa\x14\x7FV[\x94P` \x93\x84\x01\x93\x91\x90\x91\x01\x90`\x01\x01a\x14\xD3V[P\x92\x96\x95PPPPPPV[_` \x82\x84\x03\x12\x15a\x15 W__\xFD[\x81Qa\x0C^\x81a\x135V[` \x80\x82R`\r\x90\x82\x01Rl!\xA7\xA7#$\xA3\xAF\xA5\xA2\xA2\xA8\"\xA9`\x99\x1B`@\x82\x01R``\x01\x90V[_` \x82\x84\x03\x12\x15a\x15bW__\xFD[PQ\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[__\x835`\x1E\x19\x846\x03\x01\x81\x12a\x15\xA6W__\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x15\xC0W__\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x15\xD4W__\xFD[\x92P\x92\x90PV[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[_` \x82\x84\x03\x12\x15a\x15\xFAW__\xFD[\x81Qa\x0C^\x81a\x13dV[`\x01`\x01`\xA0\x1B\x03\x83\x16\x81R`@` \x82\x01\x81\x90R_\x90a\x11\xC0\x90\x83\x01\x84a\x14\x7FV[` \x81R_a\x0C^` \x83\x01\x84a\x14\x7FV[_` \x82\x84\x03\x12\x15a\x16JW__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16`W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x16pW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x16\x8AWa\x16\x8Aa\x15iV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x16\xB9Wa\x16\xB9a\x15iV[`@R\x81\x81R\x82\x82\x01` \x01\x86\x10\x15a\x16\xD0W__\xFD[\x81` \x84\x01` \x83\x01^_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV\xFE\xA2dipfsX\"\x12 \x10\x92\x1C \x93\xBAC\x8A\xC2\x10\xAB-\x95\x8F\x8F\x03W\x05\xDB\xAE3y\xE5\xBF\xA1\x88s\x04\xBD\n-\xA4dsolcC\0\x08\x1C\x003",
    );
    /**Custom error with signature `EmptyPool(bytes32)` and selector `0x7357d91f`.
```solidity
error EmptyPool(bytes32 key);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyPool {
        pub key: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyPool> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyPool) -> Self {
                (value.key,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyPool {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { key: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyPool {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyPool(bytes32)";
            const SELECTOR: [u8; 4] = [115u8, 87u8, 217u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.key),
                )
            }
        }
    };
    /**Custom error with signature `EmptyTokenBase()` and selector `0x58c52e4d`.
```solidity
error EmptyTokenBase();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyTokenBase {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyTokenBase> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyTokenBase) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyTokenBase {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyTokenBase {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyTokenBase()";
            const SELECTOR: [u8; 4] = [88u8, 197u8, 46u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EmptyTreasury()` and selector `0xcdcb50b4`.
```solidity
error EmptyTreasury();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyTreasury {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyTreasury> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyTreasury) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyTreasury {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyTreasury {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyTreasury()";
            const SELECTOR: [u8; 4] = [205u8, 203u8, 80u8, 180u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidFeeFactor(uint256,uint256)` and selector `0x9d1ea70b`.
```solidity
error InvalidFeeFactor(uint256 feeFactor, uint256 MaxValidFeeFactor);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidFeeFactor {
        pub feeFactor: alloy::sol_types::private::primitives::aliases::U256,
        pub MaxValidFeeFactor: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidFeeFactor> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidFeeFactor) -> Self {
                (value.feeFactor, value.MaxValidFeeFactor)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidFeeFactor {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    feeFactor: tuple.0,
                    MaxValidFeeFactor: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidFeeFactor {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidFeeFactor(uint256,uint256)";
            const SELECTOR: [u8; 4] = [157u8, 30u8, 167u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeFactor),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.MaxValidFeeFactor),
                )
            }
        }
    };
    /**Custom error with signature `ReentrancyGuardReentrantCall()` and selector `0x3ee5aeb5`.
```solidity
error ReentrancyGuardReentrantCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ReentrancyGuardReentrantCall {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ReentrancyGuardReentrantCall>
        for UnderlyingRustTuple<'_> {
            fn from(value: ReentrancyGuardReentrantCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ReentrancyGuardReentrantCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ReentrancyGuardReentrantCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ReentrancyGuardReentrantCall()";
            const SELECTOR: [u8; 4] = [62u8, 229u8, 174u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `Unauthorized(address,string)` and selector `0xa35b150b`.
```solidity
error Unauthorized(address msgSender, string role);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Unauthorized {
        pub msgSender: alloy::sol_types::private::Address,
        pub role: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::String,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::String,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Unauthorized> for UnderlyingRustTuple<'_> {
            fn from(value: Unauthorized) -> Self {
                (value.msgSender, value.role)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Unauthorized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    msgSender: tuple.0,
                    role: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for Unauthorized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "Unauthorized(address,string)";
            const SELECTOR: [u8; 4] = [163u8, 91u8, 21u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.msgSender,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.role,
                    ),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _roleStore, address _dataStore);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _roleStore: alloy::sol_types::private::Address,
        pub _dataStore: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._roleStore, value._dataStore)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _roleStore: tuple.0,
                        _dataStore: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._roleStore,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._dataStore,
                    ),
                )
            }
        }
    };
    /**Function with signature `dataStore()` and selector `0x660d0d67`.
```solidity
function dataStore() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dataStoreCall {}
    ///Container type for the return parameters of the [`dataStore()`](dataStoreCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dataStoreReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dataStoreCall> for UnderlyingRustTuple<'_> {
                fn from(value: dataStoreCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dataStoreCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dataStoreReturn> for UnderlyingRustTuple<'_> {
                fn from(value: dataStoreReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dataStoreReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for dataStoreCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = dataStoreReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "dataStore()";
            const SELECTOR: [u8; 4] = [102u8, 13u8, 13u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `multicall(bytes[])` and selector `0xac9650d8`.
```solidity
function multicall(bytes[] memory data) external returns (bytes[] memory results);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct multicallCall {
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`multicall(bytes[])`](multicallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct multicallReturn {
        pub results: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<multicallCall> for UnderlyingRustTuple<'_> {
                fn from(value: multicallCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for multicallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<multicallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: multicallReturn) -> Self {
                    (value.results,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for multicallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { results: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for multicallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = multicallReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "multicall(bytes[])";
            const SELECTOR: [u8; 4] = [172u8, 150u8, 80u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `roleStore()` and selector `0x4a4a7b04`.
```solidity
function roleStore() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct roleStoreCall {}
    ///Container type for the return parameters of the [`roleStore()`](roleStoreCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct roleStoreReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<roleStoreCall> for UnderlyingRustTuple<'_> {
                fn from(value: roleStoreCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for roleStoreCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<roleStoreReturn> for UnderlyingRustTuple<'_> {
                fn from(value: roleStoreReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for roleStoreReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for roleStoreCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = roleStoreReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "roleStore()";
            const SELECTOR: [u8; 4] = [74u8, 74u8, 123u8, 4u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setDebtSafetyFactor(uint256)` and selector `0xbb789bd7`.
```solidity
function setDebtSafetyFactor(uint256 debtSaftyFactor) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDebtSafetyFactorCall {
        pub debtSaftyFactor: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setDebtSafetyFactor(uint256)`](setDebtSafetyFactorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDebtSafetyFactorReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDebtSafetyFactorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setDebtSafetyFactorCall) -> Self {
                    (value.debtSaftyFactor,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setDebtSafetyFactorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { debtSaftyFactor: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDebtSafetyFactorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setDebtSafetyFactorReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setDebtSafetyFactorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setDebtSafetyFactorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setDebtSafetyFactorReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setDebtSafetyFactor(uint256)";
            const SELECTOR: [u8; 4] = [187u8, 120u8, 155u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.debtSaftyFactor),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setDefaultInterestRateStrategy(address)` and selector `0x69ea8682`.
```solidity
function setDefaultInterestRateStrategy(address interestRateStrategy) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDefaultInterestRateStrategyCall {
        pub interestRateStrategy: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setDefaultInterestRateStrategy(address)`](setDefaultInterestRateStrategyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDefaultInterestRateStrategyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDefaultInterestRateStrategyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setDefaultInterestRateStrategyCall) -> Self {
                    (value.interestRateStrategy,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setDefaultInterestRateStrategyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        interestRateStrategy: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDefaultInterestRateStrategyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setDefaultInterestRateStrategyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setDefaultInterestRateStrategyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setDefaultInterestRateStrategyCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setDefaultInterestRateStrategyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setDefaultInterestRateStrategy(address)";
            const SELECTOR: [u8; 4] = [105u8, 234u8, 134u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.interestRateStrategy,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setDefaultPoolConfiguration(uint256)` and selector `0x5eadca7e`.
```solidity
function setDefaultPoolConfiguration(uint256 configuration) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDefaultPoolConfigurationCall {
        pub configuration: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setDefaultPoolConfiguration(uint256)`](setDefaultPoolConfigurationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDefaultPoolConfigurationReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDefaultPoolConfigurationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setDefaultPoolConfigurationCall) -> Self {
                    (value.configuration,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setDefaultPoolConfigurationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { configuration: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDefaultPoolConfigurationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setDefaultPoolConfigurationReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setDefaultPoolConfigurationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setDefaultPoolConfigurationCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setDefaultPoolConfigurationReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setDefaultPoolConfiguration(uint256)";
            const SELECTOR: [u8; 4] = [94u8, 173u8, 202u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.configuration),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setLiquidationFee(uint256)` and selector `0xfef0bec8`.
```solidity
function setLiquidationFee(uint256 liquidationFee) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setLiquidationFeeCall {
        pub liquidationFee: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setLiquidationFee(uint256)`](setLiquidationFeeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setLiquidationFeeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setLiquidationFeeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setLiquidationFeeCall) -> Self {
                    (value.liquidationFee,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setLiquidationFeeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { liquidationFee: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setLiquidationFeeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setLiquidationFeeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setLiquidationFeeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setLiquidationFeeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setLiquidationFeeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setLiquidationFee(uint256)";
            const SELECTOR: [u8; 4] = [254u8, 240u8, 190u8, 200u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.liquidationFee),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMarginLevelThreshold(uint256)` and selector `0x88235d10`.
```solidity
function setMarginLevelThreshold(uint256 threshold) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMarginLevelThresholdCall {
        pub threshold: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setMarginLevelThreshold(uint256)`](setMarginLevelThresholdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMarginLevelThresholdReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMarginLevelThresholdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMarginLevelThresholdCall) -> Self {
                    (value.threshold,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMarginLevelThresholdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { threshold: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMarginLevelThresholdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMarginLevelThresholdReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMarginLevelThresholdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMarginLevelThresholdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMarginLevelThresholdReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMarginLevelThreshold(uint256)";
            const SELECTOR: [u8; 4] = [136u8, 35u8, 93u8, 16u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.threshold),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMaxBorrowRate(uint256)` and selector `0x57c25c66`.
```solidity
function setMaxBorrowRate(uint256 maxBorrowRate) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxBorrowRateCall {
        pub maxBorrowRate: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setMaxBorrowRate(uint256)`](setMaxBorrowRateCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxBorrowRateReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxBorrowRateCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxBorrowRateCall) -> Self {
                    (value.maxBorrowRate,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxBorrowRateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { maxBorrowRate: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxBorrowRateReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxBorrowRateReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxBorrowRateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMaxBorrowRateCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMaxBorrowRateReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMaxBorrowRate(uint256)";
            const SELECTOR: [u8; 4] = [87u8, 194u8, 92u8, 102u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxBorrowRate),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMaxDepositRate(uint256)` and selector `0x956228c6`.
```solidity
function setMaxDepositRate(uint256 maxDepositRate) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxDepositRateCall {
        pub maxDepositRate: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setMaxDepositRate(uint256)`](setMaxDepositRateCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxDepositRateReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxDepositRateCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxDepositRateCall) -> Self {
                    (value.maxDepositRate,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxDepositRateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { maxDepositRate: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxDepositRateReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxDepositRateReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxDepositRateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMaxDepositRateCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMaxDepositRateReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMaxDepositRate(uint256)";
            const SELECTOR: [u8; 4] = [149u8, 98u8, 40u8, 198u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxDepositRate),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setShortEnabled(address,address,bool)` and selector `0x2ffaf559`.
```solidity
function setShortEnabled(address token0, address token1, bool shortEnabled) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShortEnabledCall {
        pub token0: alloy::sol_types::private::Address,
        pub token1: alloy::sol_types::private::Address,
        pub shortEnabled: bool,
    }
    ///Container type for the return parameters of the [`setShortEnabled(address,address,bool)`](setShortEnabledCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShortEnabledReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShortEnabledCall> for UnderlyingRustTuple<'_> {
                fn from(value: setShortEnabledCall) -> Self {
                    (value.token0, value.token1, value.shortEnabled)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setShortEnabledCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token0: tuple.0,
                        token1: tuple.1,
                        shortEnabled: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShortEnabledReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setShortEnabledReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setShortEnabledReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setShortEnabledCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setShortEnabledReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setShortEnabled(address,address,bool)";
            const SELECTOR: [u8; 4] = [47u8, 250u8, 245u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token1,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.shortEnabled,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setShortLiquidityThreshold(uint256)` and selector `0x92547c38`.
```solidity
function setShortLiquidityThreshold(uint256 shortLiquidityThreshold) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShortLiquidityThresholdCall {
        pub shortLiquidityThreshold: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setShortLiquidityThreshold(uint256)`](setShortLiquidityThresholdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShortLiquidityThresholdReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShortLiquidityThresholdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setShortLiquidityThresholdCall) -> Self {
                    (value.shortLiquidityThreshold,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setShortLiquidityThresholdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        shortLiquidityThreshold: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShortLiquidityThresholdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setShortLiquidityThresholdReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setShortLiquidityThresholdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setShortLiquidityThresholdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setShortLiquidityThresholdReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setShortLiquidityThreshold(uint256)";
            const SELECTOR: [u8; 4] = [146u8, 84u8, 124u8, 56u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.shortLiquidityThreshold,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setSwapFeeFactor(address,address,uint256)` and selector `0x6a97c0fe`.
```solidity
function setSwapFeeFactor(address token0, address token1, uint256 feeFactor) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSwapFeeFactorCall {
        pub token0: alloy::sol_types::private::Address,
        pub token1: alloy::sol_types::private::Address,
        pub feeFactor: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setSwapFeeFactor(address,address,uint256)`](setSwapFeeFactorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSwapFeeFactorReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSwapFeeFactorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSwapFeeFactorCall) -> Self {
                    (value.token0, value.token1, value.feeFactor)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSwapFeeFactorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token0: tuple.0,
                        token1: tuple.1,
                        feeFactor: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSwapFeeFactorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSwapFeeFactorReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSwapFeeFactorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSwapFeeFactorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSwapFeeFactorReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSwapFeeFactor(address,address,uint256)";
            const SELECTOR: [u8; 4] = [106u8, 151u8, 192u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token1,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeFactor),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setTokenBase(address)` and selector `0x1dee7f3e`.
```solidity
function setTokenBase(address token) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTokenBaseCall {
        pub token: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setTokenBase(address)`](setTokenBaseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTokenBaseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTokenBaseCall> for UnderlyingRustTuple<'_> {
                fn from(value: setTokenBaseCall) -> Self {
                    (value.token,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setTokenBaseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { token: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTokenBaseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setTokenBaseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setTokenBaseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setTokenBaseCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setTokenBaseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setTokenBase(address)";
            const SELECTOR: [u8; 4] = [29u8, 238u8, 127u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setTradableDebtMultipierFactor(uint256)` and selector `0x6a72c63f`.
```solidity
function setTradableDebtMultipierFactor(uint256 multipierFactor) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTradableDebtMultipierFactorCall {
        pub multipierFactor: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setTradableDebtMultipierFactor(uint256)`](setTradableDebtMultipierFactorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTradableDebtMultipierFactorReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTradableDebtMultipierFactorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setTradableDebtMultipierFactorCall) -> Self {
                    (value.multipierFactor,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setTradableDebtMultipierFactorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { multipierFactor: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTradableDebtMultipierFactorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setTradableDebtMultipierFactorReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setTradableDebtMultipierFactorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setTradableDebtMultipierFactorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setTradableDebtMultipierFactorReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setTradableDebtMultipierFactor(uint256)";
            const SELECTOR: [u8; 4] = [106u8, 114u8, 198u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.multipierFactor),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setTreasury(address)` and selector `0xf0f44260`.
```solidity
function setTreasury(address treasury) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTreasuryCall {
        pub treasury: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setTreasury(address)`](setTreasuryCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTreasuryReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTreasuryCall> for UnderlyingRustTuple<'_> {
                fn from(value: setTreasuryCall) -> Self {
                    (value.treasury,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setTreasuryCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { treasury: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTreasuryReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setTreasuryReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setTreasuryReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setTreasuryCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setTreasuryReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setTreasury(address)";
            const SELECTOR: [u8; 4] = [240u8, 244u8, 66u8, 96u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.treasury,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setTreasuryFeeFactor(address,address,uint256)` and selector `0x30a767c5`.
```solidity
function setTreasuryFeeFactor(address token0, address token1, uint256 feeFactor) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTreasuryFeeFactorCall {
        pub token0: alloy::sol_types::private::Address,
        pub token1: alloy::sol_types::private::Address,
        pub feeFactor: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setTreasuryFeeFactor(address,address,uint256)`](setTreasuryFeeFactorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTreasuryFeeFactorReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTreasuryFeeFactorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setTreasuryFeeFactorCall) -> Self {
                    (value.token0, value.token1, value.feeFactor)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setTreasuryFeeFactorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token0: tuple.0,
                        token1: tuple.1,
                        feeFactor: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTreasuryFeeFactorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setTreasuryFeeFactorReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setTreasuryFeeFactorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setTreasuryFeeFactorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setTreasuryFeeFactorReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setTreasuryFeeFactor(address,address,uint256)";
            const SELECTOR: [u8; 4] = [48u8, 167u8, 103u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token1,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.feeFactor),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setTwapPeriod(uint256)` and selector `0x5e657adf`.
```solidity
function setTwapPeriod(uint256 period) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTwapPeriodCall {
        pub period: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setTwapPeriod(uint256)`](setTwapPeriodCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setTwapPeriodReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTwapPeriodCall> for UnderlyingRustTuple<'_> {
                fn from(value: setTwapPeriodCall) -> Self {
                    (value.period,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setTwapPeriodCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { period: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setTwapPeriodReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setTwapPeriodReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setTwapPeriodReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setTwapPeriodCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setTwapPeriodReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setTwapPeriod(uint256)";
            const SELECTOR: [u8; 4] = [94u8, 101u8, 122u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.period),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Config`](self) function calls.
    pub enum ConfigCalls {
        dataStore(dataStoreCall),
        multicall(multicallCall),
        roleStore(roleStoreCall),
        setDebtSafetyFactor(setDebtSafetyFactorCall),
        setDefaultInterestRateStrategy(setDefaultInterestRateStrategyCall),
        setDefaultPoolConfiguration(setDefaultPoolConfigurationCall),
        setLiquidationFee(setLiquidationFeeCall),
        setMarginLevelThreshold(setMarginLevelThresholdCall),
        setMaxBorrowRate(setMaxBorrowRateCall),
        setMaxDepositRate(setMaxDepositRateCall),
        setShortEnabled(setShortEnabledCall),
        setShortLiquidityThreshold(setShortLiquidityThresholdCall),
        setSwapFeeFactor(setSwapFeeFactorCall),
        setTokenBase(setTokenBaseCall),
        setTradableDebtMultipierFactor(setTradableDebtMultipierFactorCall),
        setTreasury(setTreasuryCall),
        setTreasuryFeeFactor(setTreasuryFeeFactorCall),
        setTwapPeriod(setTwapPeriodCall),
    }
    #[automatically_derived]
    impl ConfigCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [29u8, 238u8, 127u8, 62u8],
            [47u8, 250u8, 245u8, 89u8],
            [48u8, 167u8, 103u8, 197u8],
            [74u8, 74u8, 123u8, 4u8],
            [87u8, 194u8, 92u8, 102u8],
            [94u8, 101u8, 122u8, 223u8],
            [94u8, 173u8, 202u8, 126u8],
            [102u8, 13u8, 13u8, 103u8],
            [105u8, 234u8, 134u8, 130u8],
            [106u8, 114u8, 198u8, 63u8],
            [106u8, 151u8, 192u8, 254u8],
            [136u8, 35u8, 93u8, 16u8],
            [146u8, 84u8, 124u8, 56u8],
            [149u8, 98u8, 40u8, 198u8],
            [172u8, 150u8, 80u8, 216u8],
            [187u8, 120u8, 155u8, 215u8],
            [240u8, 244u8, 66u8, 96u8],
            [254u8, 240u8, 190u8, 200u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ConfigCalls {
        const NAME: &'static str = "ConfigCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::dataStore(_) => {
                    <dataStoreCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::multicall(_) => {
                    <multicallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::roleStore(_) => {
                    <roleStoreCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setDebtSafetyFactor(_) => {
                    <setDebtSafetyFactorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setDefaultInterestRateStrategy(_) => {
                    <setDefaultInterestRateStrategyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setDefaultPoolConfiguration(_) => {
                    <setDefaultPoolConfigurationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setLiquidationFee(_) => {
                    <setLiquidationFeeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMarginLevelThreshold(_) => {
                    <setMarginLevelThresholdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMaxBorrowRate(_) => {
                    <setMaxBorrowRateCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMaxDepositRate(_) => {
                    <setMaxDepositRateCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setShortEnabled(_) => {
                    <setShortEnabledCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setShortLiquidityThreshold(_) => {
                    <setShortLiquidityThresholdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setSwapFeeFactor(_) => {
                    <setSwapFeeFactorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setTokenBase(_) => {
                    <setTokenBaseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setTradableDebtMultipierFactor(_) => {
                    <setTradableDebtMultipierFactorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setTreasury(_) => {
                    <setTreasuryCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setTreasuryFeeFactor(_) => {
                    <setTreasuryFeeFactorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setTwapPeriod(_) => {
                    <setTwapPeriodCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ConfigCalls>] = &[
                {
                    fn setTokenBase(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setTokenBaseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setTokenBase)
                    }
                    setTokenBase
                },
                {
                    fn setShortEnabled(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setShortEnabledCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setShortEnabled)
                    }
                    setShortEnabled
                },
                {
                    fn setTreasuryFeeFactor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setTreasuryFeeFactorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setTreasuryFeeFactor)
                    }
                    setTreasuryFeeFactor
                },
                {
                    fn roleStore(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <roleStoreCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::roleStore)
                    }
                    roleStore
                },
                {
                    fn setMaxBorrowRate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setMaxBorrowRateCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setMaxBorrowRate)
                    }
                    setMaxBorrowRate
                },
                {
                    fn setTwapPeriod(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setTwapPeriodCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setTwapPeriod)
                    }
                    setTwapPeriod
                },
                {
                    fn setDefaultPoolConfiguration(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setDefaultPoolConfigurationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setDefaultPoolConfiguration)
                    }
                    setDefaultPoolConfiguration
                },
                {
                    fn dataStore(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <dataStoreCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::dataStore)
                    }
                    dataStore
                },
                {
                    fn setDefaultInterestRateStrategy(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setDefaultInterestRateStrategyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setDefaultInterestRateStrategy)
                    }
                    setDefaultInterestRateStrategy
                },
                {
                    fn setTradableDebtMultipierFactor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setTradableDebtMultipierFactorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setTradableDebtMultipierFactor)
                    }
                    setTradableDebtMultipierFactor
                },
                {
                    fn setSwapFeeFactor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setSwapFeeFactorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setSwapFeeFactor)
                    }
                    setSwapFeeFactor
                },
                {
                    fn setMarginLevelThreshold(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setMarginLevelThresholdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setMarginLevelThreshold)
                    }
                    setMarginLevelThreshold
                },
                {
                    fn setShortLiquidityThreshold(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setShortLiquidityThresholdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setShortLiquidityThreshold)
                    }
                    setShortLiquidityThreshold
                },
                {
                    fn setMaxDepositRate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setMaxDepositRateCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setMaxDepositRate)
                    }
                    setMaxDepositRate
                },
                {
                    fn multicall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <multicallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::multicall)
                    }
                    multicall
                },
                {
                    fn setDebtSafetyFactor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setDebtSafetyFactorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setDebtSafetyFactor)
                    }
                    setDebtSafetyFactor
                },
                {
                    fn setTreasury(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setTreasuryCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setTreasury)
                    }
                    setTreasury
                },
                {
                    fn setLiquidationFee(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigCalls> {
                        <setLiquidationFeeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigCalls::setLiquidationFee)
                    }
                    setLiquidationFee
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::dataStore(inner) => {
                    <dataStoreCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::multicall(inner) => {
                    <multicallCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::roleStore(inner) => {
                    <roleStoreCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setDebtSafetyFactor(inner) => {
                    <setDebtSafetyFactorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setDefaultInterestRateStrategy(inner) => {
                    <setDefaultInterestRateStrategyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setDefaultPoolConfiguration(inner) => {
                    <setDefaultPoolConfigurationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setLiquidationFee(inner) => {
                    <setLiquidationFeeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMarginLevelThreshold(inner) => {
                    <setMarginLevelThresholdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMaxBorrowRate(inner) => {
                    <setMaxBorrowRateCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMaxDepositRate(inner) => {
                    <setMaxDepositRateCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setShortEnabled(inner) => {
                    <setShortEnabledCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setShortLiquidityThreshold(inner) => {
                    <setShortLiquidityThresholdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setSwapFeeFactor(inner) => {
                    <setSwapFeeFactorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setTokenBase(inner) => {
                    <setTokenBaseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setTradableDebtMultipierFactor(inner) => {
                    <setTradableDebtMultipierFactorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setTreasury(inner) => {
                    <setTreasuryCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setTreasuryFeeFactor(inner) => {
                    <setTreasuryFeeFactorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setTwapPeriod(inner) => {
                    <setTwapPeriodCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::dataStore(inner) => {
                    <dataStoreCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::multicall(inner) => {
                    <multicallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::roleStore(inner) => {
                    <roleStoreCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setDebtSafetyFactor(inner) => {
                    <setDebtSafetyFactorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setDefaultInterestRateStrategy(inner) => {
                    <setDefaultInterestRateStrategyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setDefaultPoolConfiguration(inner) => {
                    <setDefaultPoolConfigurationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setLiquidationFee(inner) => {
                    <setLiquidationFeeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMarginLevelThreshold(inner) => {
                    <setMarginLevelThresholdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMaxBorrowRate(inner) => {
                    <setMaxBorrowRateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMaxDepositRate(inner) => {
                    <setMaxDepositRateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setShortEnabled(inner) => {
                    <setShortEnabledCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setShortLiquidityThreshold(inner) => {
                    <setShortLiquidityThresholdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setSwapFeeFactor(inner) => {
                    <setSwapFeeFactorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setTokenBase(inner) => {
                    <setTokenBaseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setTradableDebtMultipierFactor(inner) => {
                    <setTradableDebtMultipierFactorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setTreasury(inner) => {
                    <setTreasuryCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setTreasuryFeeFactor(inner) => {
                    <setTreasuryFeeFactorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setTwapPeriod(inner) => {
                    <setTwapPeriodCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Config`](self) custom errors.
    pub enum ConfigErrors {
        EmptyPool(EmptyPool),
        EmptyTokenBase(EmptyTokenBase),
        EmptyTreasury(EmptyTreasury),
        InvalidFeeFactor(InvalidFeeFactor),
        ReentrancyGuardReentrantCall(ReentrancyGuardReentrantCall),
        Unauthorized(Unauthorized),
    }
    #[automatically_derived]
    impl ConfigErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [62u8, 229u8, 174u8, 181u8],
            [88u8, 197u8, 46u8, 77u8],
            [115u8, 87u8, 217u8, 31u8],
            [157u8, 30u8, 167u8, 11u8],
            [163u8, 91u8, 21u8, 11u8],
            [205u8, 203u8, 80u8, 180u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ConfigErrors {
        const NAME: &'static str = "ConfigErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::EmptyPool(_) => <EmptyPool as alloy_sol_types::SolError>::SELECTOR,
                Self::EmptyTokenBase(_) => {
                    <EmptyTokenBase as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyTreasury(_) => {
                    <EmptyTreasury as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidFeeFactor(_) => {
                    <InvalidFeeFactor as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ReentrancyGuardReentrantCall(_) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::Unauthorized(_) => {
                    <Unauthorized as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ConfigErrors>] = &[
                {
                    fn ReentrancyGuardReentrantCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigErrors> {
                        <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigErrors::ReentrancyGuardReentrantCall)
                    }
                    ReentrancyGuardReentrantCall
                },
                {
                    fn EmptyTokenBase(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigErrors> {
                        <EmptyTokenBase as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigErrors::EmptyTokenBase)
                    }
                    EmptyTokenBase
                },
                {
                    fn EmptyPool(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigErrors> {
                        <EmptyPool as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigErrors::EmptyPool)
                    }
                    EmptyPool
                },
                {
                    fn InvalidFeeFactor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigErrors> {
                        <InvalidFeeFactor as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigErrors::InvalidFeeFactor)
                    }
                    InvalidFeeFactor
                },
                {
                    fn Unauthorized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigErrors> {
                        <Unauthorized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigErrors::Unauthorized)
                    }
                    Unauthorized
                },
                {
                    fn EmptyTreasury(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ConfigErrors> {
                        <EmptyTreasury as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ConfigErrors::EmptyTreasury)
                    }
                    EmptyTreasury
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::EmptyPool(inner) => {
                    <EmptyPool as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::EmptyTokenBase(inner) => {
                    <EmptyTokenBase as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptyTreasury(inner) => {
                    <EmptyTreasury as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidFeeFactor(inner) => {
                    <InvalidFeeFactor as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::Unauthorized(inner) => {
                    <Unauthorized as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::EmptyPool(inner) => {
                    <EmptyPool as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::EmptyTokenBase(inner) => {
                    <EmptyTokenBase as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyTreasury(inner) => {
                    <EmptyTreasury as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidFeeFactor(inner) => {
                    <InvalidFeeFactor as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::Unauthorized(inner) => {
                    <Unauthorized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Config`](self) contract instance.

See the [wrapper's documentation](`ConfigInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ConfigInstance<T, P, N> {
        ConfigInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _roleStore: alloy::sol_types::private::Address,
        _dataStore: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ConfigInstance<T, P, N>>,
    > {
        ConfigInstance::<T, P, N>::deploy(provider, _roleStore, _dataStore)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _roleStore: alloy::sol_types::private::Address,
        _dataStore: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ConfigInstance::<T, P, N>::deploy_builder(provider, _roleStore, _dataStore)
    }
    /**A [`Config`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Config`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ConfigInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ConfigInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ConfigInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConfigInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Config`](self) contract instance.

See the [wrapper's documentation](`ConfigInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _roleStore: alloy::sol_types::private::Address,
            _dataStore: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<ConfigInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _roleStore, _dataStore);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _roleStore: alloy::sol_types::private::Address,
            _dataStore: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _roleStore,
                            _dataStore,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ConfigInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ConfigInstance<T, P, N> {
            ConfigInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConfigInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`dataStore`] function.
        pub fn dataStore(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, dataStoreCall, N> {
            self.call_builder(&dataStoreCall {})
        }
        ///Creates a new call builder for the [`multicall`] function.
        pub fn multicall(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, multicallCall, N> {
            self.call_builder(&multicallCall { data })
        }
        ///Creates a new call builder for the [`roleStore`] function.
        pub fn roleStore(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, roleStoreCall, N> {
            self.call_builder(&roleStoreCall {})
        }
        ///Creates a new call builder for the [`setDebtSafetyFactor`] function.
        pub fn setDebtSafetyFactor(
            &self,
            debtSaftyFactor: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setDebtSafetyFactorCall, N> {
            self.call_builder(
                &setDebtSafetyFactorCall {
                    debtSaftyFactor,
                },
            )
        }
        ///Creates a new call builder for the [`setDefaultInterestRateStrategy`] function.
        pub fn setDefaultInterestRateStrategy(
            &self,
            interestRateStrategy: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            setDefaultInterestRateStrategyCall,
            N,
        > {
            self.call_builder(
                &setDefaultInterestRateStrategyCall {
                    interestRateStrategy,
                },
            )
        }
        ///Creates a new call builder for the [`setDefaultPoolConfiguration`] function.
        pub fn setDefaultPoolConfiguration(
            &self,
            configuration: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setDefaultPoolConfigurationCall, N> {
            self.call_builder(
                &setDefaultPoolConfigurationCall {
                    configuration,
                },
            )
        }
        ///Creates a new call builder for the [`setLiquidationFee`] function.
        pub fn setLiquidationFee(
            &self,
            liquidationFee: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setLiquidationFeeCall, N> {
            self.call_builder(
                &setLiquidationFeeCall {
                    liquidationFee,
                },
            )
        }
        ///Creates a new call builder for the [`setMarginLevelThreshold`] function.
        pub fn setMarginLevelThreshold(
            &self,
            threshold: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMarginLevelThresholdCall, N> {
            self.call_builder(
                &setMarginLevelThresholdCall {
                    threshold,
                },
            )
        }
        ///Creates a new call builder for the [`setMaxBorrowRate`] function.
        pub fn setMaxBorrowRate(
            &self,
            maxBorrowRate: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMaxBorrowRateCall, N> {
            self.call_builder(
                &setMaxBorrowRateCall {
                    maxBorrowRate,
                },
            )
        }
        ///Creates a new call builder for the [`setMaxDepositRate`] function.
        pub fn setMaxDepositRate(
            &self,
            maxDepositRate: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMaxDepositRateCall, N> {
            self.call_builder(
                &setMaxDepositRateCall {
                    maxDepositRate,
                },
            )
        }
        ///Creates a new call builder for the [`setShortEnabled`] function.
        pub fn setShortEnabled(
            &self,
            token0: alloy::sol_types::private::Address,
            token1: alloy::sol_types::private::Address,
            shortEnabled: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setShortEnabledCall, N> {
            self.call_builder(
                &setShortEnabledCall {
                    token0,
                    token1,
                    shortEnabled,
                },
            )
        }
        ///Creates a new call builder for the [`setShortLiquidityThreshold`] function.
        pub fn setShortLiquidityThreshold(
            &self,
            shortLiquidityThreshold: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setShortLiquidityThresholdCall, N> {
            self.call_builder(
                &setShortLiquidityThresholdCall {
                    shortLiquidityThreshold,
                },
            )
        }
        ///Creates a new call builder for the [`setSwapFeeFactor`] function.
        pub fn setSwapFeeFactor(
            &self,
            token0: alloy::sol_types::private::Address,
            token1: alloy::sol_types::private::Address,
            feeFactor: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setSwapFeeFactorCall, N> {
            self.call_builder(
                &setSwapFeeFactorCall {
                    token0,
                    token1,
                    feeFactor,
                },
            )
        }
        ///Creates a new call builder for the [`setTokenBase`] function.
        pub fn setTokenBase(
            &self,
            token: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setTokenBaseCall, N> {
            self.call_builder(&setTokenBaseCall { token })
        }
        ///Creates a new call builder for the [`setTradableDebtMultipierFactor`] function.
        pub fn setTradableDebtMultipierFactor(
            &self,
            multipierFactor: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            setTradableDebtMultipierFactorCall,
            N,
        > {
            self.call_builder(
                &setTradableDebtMultipierFactorCall {
                    multipierFactor,
                },
            )
        }
        ///Creates a new call builder for the [`setTreasury`] function.
        pub fn setTreasury(
            &self,
            treasury: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setTreasuryCall, N> {
            self.call_builder(&setTreasuryCall { treasury })
        }
        ///Creates a new call builder for the [`setTreasuryFeeFactor`] function.
        pub fn setTreasuryFeeFactor(
            &self,
            token0: alloy::sol_types::private::Address,
            token1: alloy::sol_types::private::Address,
            feeFactor: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setTreasuryFeeFactorCall, N> {
            self.call_builder(
                &setTreasuryFeeFactorCall {
                    token0,
                    token1,
                    feeFactor,
                },
            )
        }
        ///Creates a new call builder for the [`setTwapPeriod`] function.
        pub fn setTwapPeriod(
            &self,
            period: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setTwapPeriodCall, N> {
            self.call_builder(&setTwapPeriodCall { period })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ConfigInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}

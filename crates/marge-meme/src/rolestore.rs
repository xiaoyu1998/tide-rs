/**

Generated by the following Solidity interface...
```solidity
interface RoleStore {
    error ThereMustBeAtLeastOneRoleAdmin();
    error ThereMustBeAtLeastOneTimelockMultiSig();
    error Unauthorized(address msgSender, string role);

    constructor();

    function getRoleCount() external view returns (uint256);
    function getRoleMemberCount(bytes32 roleKey) external view returns (uint256);
    function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory);
    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory);
    function grantRole(address account, bytes32 roleKey) external;
    function hasRole(address account, bytes32 roleKey) external view returns (bool);
    function revokeRole(address account, bytes32 roleKey) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getRoleCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleMemberCount",
    "inputs": [
      {
        "name": "roleKey",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleMembers",
    "inputs": [
      {
        "name": "roleKey",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "start",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "end",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoles",
    "inputs": [
      {
        "name": "start",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "end",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "roleKey",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "roleKey",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "roleKey",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "error",
    "name": "ThereMustBeAtLeastOneRoleAdmin",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ThereMustBeAtLeastOneTimelockMultiSig",
    "inputs": []
  },
  {
    "type": "error",
    "name": "Unauthorized",
    "inputs": [
      {
        "name": "msgSender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "role",
        "type": "string",
        "internalType": "string"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod RoleStore {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5061006333604051602001610042906020808252600a90820152692927a622afa0a226a4a760b11b604082015260600190565b6040516020818303038152906040528051906020012061006860201b60201c565b61012a565b6100725f826100ba565b505f81815260026020526040902061008a90836100ce565b506001600160a01b039091165f90815260036020908152604080832093835292905220805460ff19166001179055565b5f6100c583836100de565b90505b92915050565b5f6100c5836001600160a01b0384165b5f81815260018301602052604081205461012357508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556100c8565b505f6100c8565b6108ed806101375f395ff3fe608060405234801561000f575f5ffd5b506004361061007a575f3560e01c806383d333191161005857806383d33319146100dc578063ab2742dc146100f2578063ac4ab3fb14610105578063ca15c8731461014d575f5ffd5b8063208dd1ff1461007e5780632a861f5714610093578063821c1898146100bc575b5f5ffd5b61009161008c3660046106e4565b610160565b005b6100a66100a1366004610719565b6101e9565b6040516100b39190610742565b60405180910390f35b6100cf6100ca36600461078d565b61020c565b6040516100b391906107ad565b6100e4610222565b6040519081526020016100b3565b6100916101003660046106e4565b610231565b61013d6101133660046106e4565b6001600160a01b03919091165f908152600360209081526040808320938352929052205460ff1690565b60405190151581526020016100b3565b6100e461015b3660046107e4565b61026d565b6101b333604051602001610173906107fb565b604051602081830303815290604052805190602001206001600160a01b03919091165f908152600360209081526040808320938352929052205460ff1690565b6101db573360405163a35b150b60e01b81526004016101d29190610824565b60405180910390fd5b6101e58282610283565b5050565b5f838152600260205260409020606090610204908484610389565b949350505050565b60606102195f848461044b565b90505b92915050565b5f61022c5f6104f6565b905090565b61024433604051602001610173906107fb565b610263573360405163a35b150b60e01b81526004016101d29190610824565b6101e582826104ff565b5f81815260026020526040812061021c906104f6565b5f81815260026020526040902061029a9083610551565b506001600160a01b0382165f9081526003602090815260408083208484528252808320805460ff19169055600290915290206102d5906104f6565b5f036101e5576040516020016102ea906107fb565b60405160208183030381529060405280519060200120810361031f57604051635bc1e44560e11b815260040160405180910390fd5b6040516020016103549060208082526011908201527054494d454c4f434b5f4d554c544953494760781b604082015260600190565b6040516020818303038152906040528051906020012081036101e557604051630282b5b760e41b815260040160405180910390fd5b60605f610395856104f6565b9050808311156103a3578092505b5f6103ae858561085c565b67ffffffffffffffff8111156103c6576103c661087b565b6040519080825280602002602001820160405280156103ef578160200160208202803683370190505b509050845b84811015610441576104068782610565565b82610411888461085c565b815181106104215761042161088f565b6001600160a01b03909216602092830291909101909101526001016103f4565b5095945050505050565b60605f610457856104f6565b905080831115610465578092505b5f610470858561085c565b67ffffffffffffffff8111156104885761048861087b565b6040519080825280602002602001820160405280156104b1578160200160208202803683370190505b509050845b84811015610441576104c88782610565565b826104d3888461085c565b815181106104e3576104e361088f565b60209081029190910101526001016104b6565b5f61021c825490565b6105095f82610570565b505f818152600260205260409020610521908361057b565b506001600160a01b039091165f90815260036020908152604080832093835292905220805460ff19166001179055565b5f610219836001600160a01b03841661058f565b5f6102198383610672565b5f6102198383610698565b5f610219836001600160a01b038416610698565b5f8181526001830160205260408120548015610669575f6105b160018361085c565b85549091505f906105c49060019061085c565b9050808214610623575f865f0182815481106105e2576105e261088f565b905f5260205f200154905080875f0184815481106106025761060261088f565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080610634576106346108a3565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f90556001935050505061021c565b5f91505061021c565b5f825f0182815481106106875761068761088f565b905f5260205f200154905092915050565b5f8181526001830160205260408120546106dd57508154600181810184555f84815260208082209093018490558454848252828601909352604090209190915561021c565b505f61021c565b5f5f604083850312156106f5575f5ffd5b82356001600160a01b038116811461070b575f5ffd5b946020939093013593505050565b5f5f5f6060848603121561072b575f5ffd5b505081359360208301359350604090920135919050565b602080825282518282018190525f918401906040840190835b818110156107825783516001600160a01b031683526020938401939092019160010161075b565b509095945050505050565b5f5f6040838503121561079e575f5ffd5b50508035926020909101359150565b602080825282518282018190525f918401906040840190835b818110156107825783518352602093840193909201916001016107c6565b5f602082840312156107f4575f5ffd5b5035919050565b602081525f61021c60208301600a8152692927a622afa0a226a4a760b11b602082015260400190565b6001600160a01b0382168152604060208201819052600a90820152692927a622afa0a226a4a760b11b60608201525f60808201610219565b8181038181111561021c57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffdfea2646970667358221220ffbfcb315c7d6d28ee95b68e3d6aaa2078302007c7314806ca2dd9a1ec8b608c64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[Pa\0c3`@Q` \x01a\0B\x90` \x80\x82R`\n\x90\x82\x01Ri)'\xA6\"\xAF\xA0\xA2&\xA4\xA7`\xB1\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 a\0h` \x1B` \x1CV[a\x01*V[a\0r_\x82a\0\xBAV[P_\x81\x81R`\x02` R`@\x90 a\0\x8A\x90\x83a\0\xCEV[P`\x01`\x01`\xA0\x1B\x03\x90\x91\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R \x80T`\xFF\x19\x16`\x01\x17\x90UV[_a\0\xC5\x83\x83a\0\xDEV[\x90P[\x92\x91PPV[_a\0\xC5\x83`\x01`\x01`\xA0\x1B\x03\x84\x16[_\x81\x81R`\x01\x83\x01` R`@\x81 Ta\x01#WP\x81T`\x01\x81\x81\x01\x84U_\x84\x81R` \x80\x82 \x90\x93\x01\x84\x90U\x84T\x84\x82R\x82\x86\x01\x90\x93R`@\x90 \x91\x90\x91Ua\0\xC8V[P_a\0\xC8V[a\x08\xED\x80a\x017_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0zW_5`\xE0\x1C\x80c\x83\xD33\x19\x11a\0XW\x80c\x83\xD33\x19\x14a\0\xDCW\x80c\xAB'B\xDC\x14a\0\xF2W\x80c\xACJ\xB3\xFB\x14a\x01\x05W\x80c\xCA\x15\xC8s\x14a\x01MW__\xFD[\x80c \x8D\xD1\xFF\x14a\0~W\x80c*\x86\x1FW\x14a\0\x93W\x80c\x82\x1C\x18\x98\x14a\0\xBCW[__\xFD[a\0\x91a\0\x8C6`\x04a\x06\xE4V[a\x01`V[\0[a\0\xA6a\0\xA16`\x04a\x07\x19V[a\x01\xE9V[`@Qa\0\xB3\x91\x90a\x07BV[`@Q\x80\x91\x03\x90\xF3[a\0\xCFa\0\xCA6`\x04a\x07\x8DV[a\x02\x0CV[`@Qa\0\xB3\x91\x90a\x07\xADV[a\0\xE4a\x02\"V[`@Q\x90\x81R` \x01a\0\xB3V[a\0\x91a\x01\x006`\x04a\x06\xE4V[a\x021V[a\x01=a\x01\x136`\x04a\x06\xE4V[`\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R T`\xFF\x16\x90V[`@Q\x90\x15\x15\x81R` \x01a\0\xB3V[a\0\xE4a\x01[6`\x04a\x07\xE4V[a\x02mV[a\x01\xB33`@Q` \x01a\x01s\x90a\x07\xFBV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R T`\xFF\x16\x90V[a\x01\xDBW3`@Qc\xA3[\x15\x0B`\xE0\x1B\x81R`\x04\x01a\x01\xD2\x91\x90a\x08$V[`@Q\x80\x91\x03\x90\xFD[a\x01\xE5\x82\x82a\x02\x83V[PPV[_\x83\x81R`\x02` R`@\x90 ``\x90a\x02\x04\x90\x84\x84a\x03\x89V[\x94\x93PPPPV[``a\x02\x19_\x84\x84a\x04KV[\x90P[\x92\x91PPV[_a\x02,_a\x04\xF6V[\x90P\x90V[a\x02D3`@Q` \x01a\x01s\x90a\x07\xFBV[a\x02cW3`@Qc\xA3[\x15\x0B`\xE0\x1B\x81R`\x04\x01a\x01\xD2\x91\x90a\x08$V[a\x01\xE5\x82\x82a\x04\xFFV[_\x81\x81R`\x02` R`@\x81 a\x02\x1C\x90a\x04\xF6V[_\x81\x81R`\x02` R`@\x90 a\x02\x9A\x90\x83a\x05QV[P`\x01`\x01`\xA0\x1B\x03\x82\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x84\x84R\x82R\x80\x83 \x80T`\xFF\x19\x16\x90U`\x02\x90\x91R\x90 a\x02\xD5\x90a\x04\xF6V[_\x03a\x01\xE5W`@Q` \x01a\x02\xEA\x90a\x07\xFBV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81\x03a\x03\x1FW`@Qc[\xC1\xE4E`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q` \x01a\x03T\x90` \x80\x82R`\x11\x90\x82\x01RpTIMELOCK_MULTISIG`x\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81\x03a\x01\xE5W`@Qc\x02\x82\xB5\xB7`\xE4\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[``_a\x03\x95\x85a\x04\xF6V[\x90P\x80\x83\x11\x15a\x03\xA3W\x80\x92P[_a\x03\xAE\x85\x85a\x08\\V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xC6Wa\x03\xC6a\x08{V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x03\xEFW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P\x84[\x84\x81\x10\x15a\x04AWa\x04\x06\x87\x82a\x05eV[\x82a\x04\x11\x88\x84a\x08\\V[\x81Q\x81\x10a\x04!Wa\x04!a\x08\x8FV[`\x01`\x01`\xA0\x1B\x03\x90\x92\x16` \x92\x83\x02\x91\x90\x91\x01\x90\x91\x01R`\x01\x01a\x03\xF4V[P\x95\x94PPPPPV[``_a\x04W\x85a\x04\xF6V[\x90P\x80\x83\x11\x15a\x04eW\x80\x92P[_a\x04p\x85\x85a\x08\\V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\x88Wa\x04\x88a\x08{V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x04\xB1W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P\x84[\x84\x81\x10\x15a\x04AWa\x04\xC8\x87\x82a\x05eV[\x82a\x04\xD3\x88\x84a\x08\\V[\x81Q\x81\x10a\x04\xE3Wa\x04\xE3a\x08\x8FV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x04\xB6V[_a\x02\x1C\x82T\x90V[a\x05\t_\x82a\x05pV[P_\x81\x81R`\x02` R`@\x90 a\x05!\x90\x83a\x05{V[P`\x01`\x01`\xA0\x1B\x03\x90\x91\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R \x80T`\xFF\x19\x16`\x01\x17\x90UV[_a\x02\x19\x83`\x01`\x01`\xA0\x1B\x03\x84\x16a\x05\x8FV[_a\x02\x19\x83\x83a\x06rV[_a\x02\x19\x83\x83a\x06\x98V[_a\x02\x19\x83`\x01`\x01`\xA0\x1B\x03\x84\x16a\x06\x98V[_\x81\x81R`\x01\x83\x01` R`@\x81 T\x80\x15a\x06iW_a\x05\xB1`\x01\x83a\x08\\V[\x85T\x90\x91P_\x90a\x05\xC4\x90`\x01\x90a\x08\\V[\x90P\x80\x82\x14a\x06#W_\x86_\x01\x82\x81T\x81\x10a\x05\xE2Wa\x05\xE2a\x08\x8FV[\x90_R` _ \x01T\x90P\x80\x87_\x01\x84\x81T\x81\x10a\x06\x02Wa\x06\x02a\x08\x8FV[_\x91\x82R` \x80\x83 \x90\x91\x01\x92\x90\x92U\x91\x82R`\x01\x88\x01\x90R`@\x90 \x83\x90U[\x85T\x86\x90\x80a\x064Wa\x064a\x08\xA3V[`\x01\x90\x03\x81\x81\x90_R` _ \x01_\x90U\x90U\x85`\x01\x01_\x86\x81R` \x01\x90\x81R` \x01_ _\x90U`\x01\x93PPPPa\x02\x1CV[_\x91PPa\x02\x1CV[_\x82_\x01\x82\x81T\x81\x10a\x06\x87Wa\x06\x87a\x08\x8FV[\x90_R` _ \x01T\x90P\x92\x91PPV[_\x81\x81R`\x01\x83\x01` R`@\x81 Ta\x06\xDDWP\x81T`\x01\x81\x81\x01\x84U_\x84\x81R` \x80\x82 \x90\x93\x01\x84\x90U\x84T\x84\x82R\x82\x86\x01\x90\x93R`@\x90 \x91\x90\x91Ua\x02\x1CV[P_a\x02\x1CV[__`@\x83\x85\x03\x12\x15a\x06\xF5W__\xFD[\x825`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x07\x0BW__\xFD[\x94` \x93\x90\x93\x015\x93PPPV[___``\x84\x86\x03\x12\x15a\x07+W__\xFD[PP\x815\x93` \x83\x015\x93P`@\x90\x92\x015\x91\x90PV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15a\x07\x82W\x83Q`\x01`\x01`\xA0\x1B\x03\x16\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x07[V[P\x90\x95\x94PPPPPV[__`@\x83\x85\x03\x12\x15a\x07\x9EW__\xFD[PP\x805\x92` \x90\x91\x015\x91PV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15a\x07\x82W\x83Q\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x07\xC6V[_` \x82\x84\x03\x12\x15a\x07\xF4W__\xFD[P5\x91\x90PV[` \x81R_a\x02\x1C` \x83\x01`\n\x81Ri)'\xA6\"\xAF\xA0\xA2&\xA4\xA7`\xB1\x1B` \x82\x01R`@\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x82\x16\x81R`@` \x82\x01\x81\x90R`\n\x90\x82\x01Ri)'\xA6\"\xAF\xA0\xA2&\xA4\xA7`\xB1\x1B``\x82\x01R_`\x80\x82\x01a\x02\x19V[\x81\x81\x03\x81\x81\x11\x15a\x02\x1CWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xFF\xBF\xCB1\\}m(\xEE\x95\xB6\x8E=j\xAA x0 \x07\xC71H\x06\xCA-\xD9\xA1\xEC\x8B`\x8CdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061007a575f3560e01c806383d333191161005857806383d33319146100dc578063ab2742dc146100f2578063ac4ab3fb14610105578063ca15c8731461014d575f5ffd5b8063208dd1ff1461007e5780632a861f5714610093578063821c1898146100bc575b5f5ffd5b61009161008c3660046106e4565b610160565b005b6100a66100a1366004610719565b6101e9565b6040516100b39190610742565b60405180910390f35b6100cf6100ca36600461078d565b61020c565b6040516100b391906107ad565b6100e4610222565b6040519081526020016100b3565b6100916101003660046106e4565b610231565b61013d6101133660046106e4565b6001600160a01b03919091165f908152600360209081526040808320938352929052205460ff1690565b60405190151581526020016100b3565b6100e461015b3660046107e4565b61026d565b6101b333604051602001610173906107fb565b604051602081830303815290604052805190602001206001600160a01b03919091165f908152600360209081526040808320938352929052205460ff1690565b6101db573360405163a35b150b60e01b81526004016101d29190610824565b60405180910390fd5b6101e58282610283565b5050565b5f838152600260205260409020606090610204908484610389565b949350505050565b60606102195f848461044b565b90505b92915050565b5f61022c5f6104f6565b905090565b61024433604051602001610173906107fb565b610263573360405163a35b150b60e01b81526004016101d29190610824565b6101e582826104ff565b5f81815260026020526040812061021c906104f6565b5f81815260026020526040902061029a9083610551565b506001600160a01b0382165f9081526003602090815260408083208484528252808320805460ff19169055600290915290206102d5906104f6565b5f036101e5576040516020016102ea906107fb565b60405160208183030381529060405280519060200120810361031f57604051635bc1e44560e11b815260040160405180910390fd5b6040516020016103549060208082526011908201527054494d454c4f434b5f4d554c544953494760781b604082015260600190565b6040516020818303038152906040528051906020012081036101e557604051630282b5b760e41b815260040160405180910390fd5b60605f610395856104f6565b9050808311156103a3578092505b5f6103ae858561085c565b67ffffffffffffffff8111156103c6576103c661087b565b6040519080825280602002602001820160405280156103ef578160200160208202803683370190505b509050845b84811015610441576104068782610565565b82610411888461085c565b815181106104215761042161088f565b6001600160a01b03909216602092830291909101909101526001016103f4565b5095945050505050565b60605f610457856104f6565b905080831115610465578092505b5f610470858561085c565b67ffffffffffffffff8111156104885761048861087b565b6040519080825280602002602001820160405280156104b1578160200160208202803683370190505b509050845b84811015610441576104c88782610565565b826104d3888461085c565b815181106104e3576104e361088f565b60209081029190910101526001016104b6565b5f61021c825490565b6105095f82610570565b505f818152600260205260409020610521908361057b565b506001600160a01b039091165f90815260036020908152604080832093835292905220805460ff19166001179055565b5f610219836001600160a01b03841661058f565b5f6102198383610672565b5f6102198383610698565b5f610219836001600160a01b038416610698565b5f8181526001830160205260408120548015610669575f6105b160018361085c565b85549091505f906105c49060019061085c565b9050808214610623575f865f0182815481106105e2576105e261088f565b905f5260205f200154905080875f0184815481106106025761060261088f565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080610634576106346108a3565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f90556001935050505061021c565b5f91505061021c565b5f825f0182815481106106875761068761088f565b905f5260205f200154905092915050565b5f8181526001830160205260408120546106dd57508154600181810184555f84815260208082209093018490558454848252828601909352604090209190915561021c565b505f61021c565b5f5f604083850312156106f5575f5ffd5b82356001600160a01b038116811461070b575f5ffd5b946020939093013593505050565b5f5f5f6060848603121561072b575f5ffd5b505081359360208301359350604090920135919050565b602080825282518282018190525f918401906040840190835b818110156107825783516001600160a01b031683526020938401939092019160010161075b565b509095945050505050565b5f5f6040838503121561079e575f5ffd5b50508035926020909101359150565b602080825282518282018190525f918401906040840190835b818110156107825783518352602093840193909201916001016107c6565b5f602082840312156107f4575f5ffd5b5035919050565b602081525f61021c60208301600a8152692927a622afa0a226a4a760b11b602082015260400190565b6001600160a01b0382168152604060208201819052600a90820152692927a622afa0a226a4a760b11b60608201525f60808201610219565b8181038181111561021c57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffdfea2646970667358221220ffbfcb315c7d6d28ee95b68e3d6aaa2078302007c7314806ca2dd9a1ec8b608c64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0zW_5`\xE0\x1C\x80c\x83\xD33\x19\x11a\0XW\x80c\x83\xD33\x19\x14a\0\xDCW\x80c\xAB'B\xDC\x14a\0\xF2W\x80c\xACJ\xB3\xFB\x14a\x01\x05W\x80c\xCA\x15\xC8s\x14a\x01MW__\xFD[\x80c \x8D\xD1\xFF\x14a\0~W\x80c*\x86\x1FW\x14a\0\x93W\x80c\x82\x1C\x18\x98\x14a\0\xBCW[__\xFD[a\0\x91a\0\x8C6`\x04a\x06\xE4V[a\x01`V[\0[a\0\xA6a\0\xA16`\x04a\x07\x19V[a\x01\xE9V[`@Qa\0\xB3\x91\x90a\x07BV[`@Q\x80\x91\x03\x90\xF3[a\0\xCFa\0\xCA6`\x04a\x07\x8DV[a\x02\x0CV[`@Qa\0\xB3\x91\x90a\x07\xADV[a\0\xE4a\x02\"V[`@Q\x90\x81R` \x01a\0\xB3V[a\0\x91a\x01\x006`\x04a\x06\xE4V[a\x021V[a\x01=a\x01\x136`\x04a\x06\xE4V[`\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R T`\xFF\x16\x90V[`@Q\x90\x15\x15\x81R` \x01a\0\xB3V[a\0\xE4a\x01[6`\x04a\x07\xE4V[a\x02mV[a\x01\xB33`@Q` \x01a\x01s\x90a\x07\xFBV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `\x01`\x01`\xA0\x1B\x03\x91\x90\x91\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R T`\xFF\x16\x90V[a\x01\xDBW3`@Qc\xA3[\x15\x0B`\xE0\x1B\x81R`\x04\x01a\x01\xD2\x91\x90a\x08$V[`@Q\x80\x91\x03\x90\xFD[a\x01\xE5\x82\x82a\x02\x83V[PPV[_\x83\x81R`\x02` R`@\x90 ``\x90a\x02\x04\x90\x84\x84a\x03\x89V[\x94\x93PPPPV[``a\x02\x19_\x84\x84a\x04KV[\x90P[\x92\x91PPV[_a\x02,_a\x04\xF6V[\x90P\x90V[a\x02D3`@Q` \x01a\x01s\x90a\x07\xFBV[a\x02cW3`@Qc\xA3[\x15\x0B`\xE0\x1B\x81R`\x04\x01a\x01\xD2\x91\x90a\x08$V[a\x01\xE5\x82\x82a\x04\xFFV[_\x81\x81R`\x02` R`@\x81 a\x02\x1C\x90a\x04\xF6V[_\x81\x81R`\x02` R`@\x90 a\x02\x9A\x90\x83a\x05QV[P`\x01`\x01`\xA0\x1B\x03\x82\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x84\x84R\x82R\x80\x83 \x80T`\xFF\x19\x16\x90U`\x02\x90\x91R\x90 a\x02\xD5\x90a\x04\xF6V[_\x03a\x01\xE5W`@Q` \x01a\x02\xEA\x90a\x07\xFBV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81\x03a\x03\x1FW`@Qc[\xC1\xE4E`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q` \x01a\x03T\x90` \x80\x82R`\x11\x90\x82\x01RpTIMELOCK_MULTISIG`x\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81\x03a\x01\xE5W`@Qc\x02\x82\xB5\xB7`\xE4\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[``_a\x03\x95\x85a\x04\xF6V[\x90P\x80\x83\x11\x15a\x03\xA3W\x80\x92P[_a\x03\xAE\x85\x85a\x08\\V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xC6Wa\x03\xC6a\x08{V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x03\xEFW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P\x84[\x84\x81\x10\x15a\x04AWa\x04\x06\x87\x82a\x05eV[\x82a\x04\x11\x88\x84a\x08\\V[\x81Q\x81\x10a\x04!Wa\x04!a\x08\x8FV[`\x01`\x01`\xA0\x1B\x03\x90\x92\x16` \x92\x83\x02\x91\x90\x91\x01\x90\x91\x01R`\x01\x01a\x03\xF4V[P\x95\x94PPPPPV[``_a\x04W\x85a\x04\xF6V[\x90P\x80\x83\x11\x15a\x04eW\x80\x92P[_a\x04p\x85\x85a\x08\\V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\x88Wa\x04\x88a\x08{V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x04\xB1W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P\x84[\x84\x81\x10\x15a\x04AWa\x04\xC8\x87\x82a\x05eV[\x82a\x04\xD3\x88\x84a\x08\\V[\x81Q\x81\x10a\x04\xE3Wa\x04\xE3a\x08\x8FV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x04\xB6V[_a\x02\x1C\x82T\x90V[a\x05\t_\x82a\x05pV[P_\x81\x81R`\x02` R`@\x90 a\x05!\x90\x83a\x05{V[P`\x01`\x01`\xA0\x1B\x03\x90\x91\x16_\x90\x81R`\x03` \x90\x81R`@\x80\x83 \x93\x83R\x92\x90R \x80T`\xFF\x19\x16`\x01\x17\x90UV[_a\x02\x19\x83`\x01`\x01`\xA0\x1B\x03\x84\x16a\x05\x8FV[_a\x02\x19\x83\x83a\x06rV[_a\x02\x19\x83\x83a\x06\x98V[_a\x02\x19\x83`\x01`\x01`\xA0\x1B\x03\x84\x16a\x06\x98V[_\x81\x81R`\x01\x83\x01` R`@\x81 T\x80\x15a\x06iW_a\x05\xB1`\x01\x83a\x08\\V[\x85T\x90\x91P_\x90a\x05\xC4\x90`\x01\x90a\x08\\V[\x90P\x80\x82\x14a\x06#W_\x86_\x01\x82\x81T\x81\x10a\x05\xE2Wa\x05\xE2a\x08\x8FV[\x90_R` _ \x01T\x90P\x80\x87_\x01\x84\x81T\x81\x10a\x06\x02Wa\x06\x02a\x08\x8FV[_\x91\x82R` \x80\x83 \x90\x91\x01\x92\x90\x92U\x91\x82R`\x01\x88\x01\x90R`@\x90 \x83\x90U[\x85T\x86\x90\x80a\x064Wa\x064a\x08\xA3V[`\x01\x90\x03\x81\x81\x90_R` _ \x01_\x90U\x90U\x85`\x01\x01_\x86\x81R` \x01\x90\x81R` \x01_ _\x90U`\x01\x93PPPPa\x02\x1CV[_\x91PPa\x02\x1CV[_\x82_\x01\x82\x81T\x81\x10a\x06\x87Wa\x06\x87a\x08\x8FV[\x90_R` _ \x01T\x90P\x92\x91PPV[_\x81\x81R`\x01\x83\x01` R`@\x81 Ta\x06\xDDWP\x81T`\x01\x81\x81\x01\x84U_\x84\x81R` \x80\x82 \x90\x93\x01\x84\x90U\x84T\x84\x82R\x82\x86\x01\x90\x93R`@\x90 \x91\x90\x91Ua\x02\x1CV[P_a\x02\x1CV[__`@\x83\x85\x03\x12\x15a\x06\xF5W__\xFD[\x825`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x07\x0BW__\xFD[\x94` \x93\x90\x93\x015\x93PPPV[___``\x84\x86\x03\x12\x15a\x07+W__\xFD[PP\x815\x93` \x83\x015\x93P`@\x90\x92\x015\x91\x90PV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15a\x07\x82W\x83Q`\x01`\x01`\xA0\x1B\x03\x16\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x07[V[P\x90\x95\x94PPPPPV[__`@\x83\x85\x03\x12\x15a\x07\x9EW__\xFD[PP\x805\x92` \x90\x91\x015\x91PV[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15a\x07\x82W\x83Q\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x07\xC6V[_` \x82\x84\x03\x12\x15a\x07\xF4W__\xFD[P5\x91\x90PV[` \x81R_a\x02\x1C` \x83\x01`\n\x81Ri)'\xA6\"\xAF\xA0\xA2&\xA4\xA7`\xB1\x1B` \x82\x01R`@\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x82\x16\x81R`@` \x82\x01\x81\x90R`\n\x90\x82\x01Ri)'\xA6\"\xAF\xA0\xA2&\xA4\xA7`\xB1\x1B``\x82\x01R_`\x80\x82\x01a\x02\x19V[\x81\x81\x03\x81\x81\x11\x15a\x02\x1CWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xFF\xBF\xCB1\\}m(\xEE\x95\xB6\x8E=j\xAA x0 \x07\xC71H\x06\xCA-\xD9\xA1\xEC\x8B`\x8CdsolcC\0\x08\x1C\x003",
    );
    /**Custom error with signature `ThereMustBeAtLeastOneRoleAdmin()` and selector `0xb783c88a`.
```solidity
error ThereMustBeAtLeastOneRoleAdmin();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ThereMustBeAtLeastOneRoleAdmin {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ThereMustBeAtLeastOneRoleAdmin>
        for UnderlyingRustTuple<'_> {
            fn from(value: ThereMustBeAtLeastOneRoleAdmin) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ThereMustBeAtLeastOneRoleAdmin {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ThereMustBeAtLeastOneRoleAdmin {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ThereMustBeAtLeastOneRoleAdmin()";
            const SELECTOR: [u8; 4] = [183u8, 131u8, 200u8, 138u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ThereMustBeAtLeastOneTimelockMultiSig()` and selector `0x282b5b70`.
```solidity
error ThereMustBeAtLeastOneTimelockMultiSig();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ThereMustBeAtLeastOneTimelockMultiSig {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ThereMustBeAtLeastOneTimelockMultiSig>
        for UnderlyingRustTuple<'_> {
            fn from(value: ThereMustBeAtLeastOneTimelockMultiSig) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ThereMustBeAtLeastOneTimelockMultiSig {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ThereMustBeAtLeastOneTimelockMultiSig {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ThereMustBeAtLeastOneTimelockMultiSig()";
            const SELECTOR: [u8; 4] = [40u8, 43u8, 91u8, 112u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `Unauthorized(address,string)` and selector `0xa35b150b`.
```solidity
error Unauthorized(address msgSender, string role);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Unauthorized {
        pub msgSender: alloy::sol_types::private::Address,
        pub role: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::String,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::String,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Unauthorized> for UnderlyingRustTuple<'_> {
            fn from(value: Unauthorized) -> Self {
                (value.msgSender, value.role)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Unauthorized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    msgSender: tuple.0,
                    role: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for Unauthorized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "Unauthorized(address,string)";
            const SELECTOR: [u8; 4] = [163u8, 91u8, 21u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.msgSender,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.role,
                    ),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `getRoleCount()` and selector `0x83d33319`.
```solidity
function getRoleCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleCountCall {}
    ///Container type for the return parameters of the [`getRoleCount()`](getRoleCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleCountReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleCountReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleCount()";
            const SELECTOR: [u8; 4] = [131u8, 211u8, 51u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleMemberCount(bytes32)` and selector `0xca15c873`.
```solidity
function getRoleMemberCount(bytes32 roleKey) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleMemberCountCall {
        pub roleKey: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleMemberCount(bytes32)`](getRoleMemberCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleMemberCountReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleMemberCountCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRoleMemberCountCall) -> Self {
                    (value.roleKey,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRoleMemberCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { roleKey: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleMemberCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRoleMemberCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRoleMemberCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleMemberCountCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleMemberCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleMemberCount(bytes32)";
            const SELECTOR: [u8; 4] = [202u8, 21u8, 200u8, 115u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.roleKey),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleMembers(bytes32,uint256,uint256)` and selector `0x2a861f57`.
```solidity
function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleMembersCall {
        pub roleKey: alloy::sol_types::private::FixedBytes<32>,
        pub start: alloy::sol_types::private::primitives::aliases::U256,
        pub end: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getRoleMembers(bytes32,uint256,uint256)`](getRoleMembersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleMembersReturn {
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleMembersCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleMembersCall) -> Self {
                    (value.roleKey, value.start, value.end)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleMembersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        roleKey: tuple.0,
                        start: tuple.1,
                        end: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleMembersReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRoleMembersReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRoleMembersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleMembersCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleMembersReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleMembers(bytes32,uint256,uint256)";
            const SELECTOR: [u8; 4] = [42u8, 134u8, 31u8, 87u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.roleKey),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.start),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.end),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoles(uint256,uint256)` and selector `0x821c1898`.
```solidity
function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRolesCall {
        pub start: alloy::sol_types::private::primitives::aliases::U256,
        pub end: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getRoles(uint256,uint256)`](getRolesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRolesReturn {
        pub _0: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRolesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRolesCall) -> Self {
                    (value.start, value.end)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRolesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        start: tuple.0,
                        end: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRolesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRolesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRolesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRolesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRolesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoles(uint256,uint256)";
            const SELECTOR: [u8; 4] = [130u8, 28u8, 24u8, 152u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.start),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.end),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(address,bytes32)` and selector `0xab2742dc`.
```solidity
function grantRole(address account, bytes32 roleKey) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        pub account: alloy::sol_types::private::Address,
        pub roleKey: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`grantRole(address,bytes32)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.account, value.roleKey)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        roleKey: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(address,bytes32)";
            const SELECTOR: [u8; 4] = [171u8, 39u8, 66u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.roleKey),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(address,bytes32)` and selector `0xac4ab3fb`.
```solidity
function hasRole(address account, bytes32 roleKey) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        pub account: alloy::sol_types::private::Address,
        pub roleKey: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`hasRole(address,bytes32)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.account, value.roleKey)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        roleKey: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(address,bytes32)";
            const SELECTOR: [u8; 4] = [172u8, 74u8, 179u8, 251u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.roleKey),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(address,bytes32)` and selector `0x208dd1ff`.
```solidity
function revokeRole(address account, bytes32 roleKey) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        pub account: alloy::sol_types::private::Address,
        pub roleKey: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`revokeRole(address,bytes32)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.account, value.roleKey)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        roleKey: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(address,bytes32)";
            const SELECTOR: [u8; 4] = [32u8, 141u8, 209u8, 255u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.roleKey),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RoleStore`](self) function calls.
    pub enum RoleStoreCalls {
        getRoleCount(getRoleCountCall),
        getRoleMemberCount(getRoleMemberCountCall),
        getRoleMembers(getRoleMembersCall),
        getRoles(getRolesCall),
        grantRole(grantRoleCall),
        hasRole(hasRoleCall),
        revokeRole(revokeRoleCall),
    }
    #[automatically_derived]
    impl RoleStoreCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [32u8, 141u8, 209u8, 255u8],
            [42u8, 134u8, 31u8, 87u8],
            [130u8, 28u8, 24u8, 152u8],
            [131u8, 211u8, 51u8, 25u8],
            [171u8, 39u8, 66u8, 220u8],
            [172u8, 74u8, 179u8, 251u8],
            [202u8, 21u8, 200u8, 115u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RoleStoreCalls {
        const NAME: &'static str = "RoleStoreCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getRoleCount(_) => {
                    <getRoleCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleMemberCount(_) => {
                    <getRoleMemberCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleMembers(_) => {
                    <getRoleMembersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoles(_) => <getRolesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RoleStoreCalls>] = &[
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleStoreCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleStoreCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn getRoleMembers(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleStoreCalls> {
                        <getRoleMembersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleStoreCalls::getRoleMembers)
                    }
                    getRoleMembers
                },
                {
                    fn getRoles(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleStoreCalls> {
                        <getRolesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleStoreCalls::getRoles)
                    }
                    getRoles
                },
                {
                    fn getRoleCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleStoreCalls> {
                        <getRoleCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleStoreCalls::getRoleCount)
                    }
                    getRoleCount
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleStoreCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleStoreCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleStoreCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleStoreCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn getRoleMemberCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleStoreCalls> {
                        <getRoleMemberCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleStoreCalls::getRoleMemberCount)
                    }
                    getRoleMemberCount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getRoleCount(inner) => {
                    <getRoleCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleMemberCount(inner) => {
                    <getRoleMemberCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleMembers(inner) => {
                    <getRoleMembersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoles(inner) => {
                    <getRolesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getRoleCount(inner) => {
                    <getRoleCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleMemberCount(inner) => {
                    <getRoleMemberCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleMembers(inner) => {
                    <getRoleMembersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoles(inner) => {
                    <getRolesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RoleStore`](self) custom errors.
    pub enum RoleStoreErrors {
        ThereMustBeAtLeastOneRoleAdmin(ThereMustBeAtLeastOneRoleAdmin),
        ThereMustBeAtLeastOneTimelockMultiSig(ThereMustBeAtLeastOneTimelockMultiSig),
        Unauthorized(Unauthorized),
    }
    #[automatically_derived]
    impl RoleStoreErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [40u8, 43u8, 91u8, 112u8],
            [163u8, 91u8, 21u8, 11u8],
            [183u8, 131u8, 200u8, 138u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RoleStoreErrors {
        const NAME: &'static str = "RoleStoreErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ThereMustBeAtLeastOneRoleAdmin(_) => {
                    <ThereMustBeAtLeastOneRoleAdmin as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ThereMustBeAtLeastOneTimelockMultiSig(_) => {
                    <ThereMustBeAtLeastOneTimelockMultiSig as alloy_sol_types::SolError>::SELECTOR
                }
                Self::Unauthorized(_) => {
                    <Unauthorized as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RoleStoreErrors>] = &[
                {
                    fn ThereMustBeAtLeastOneTimelockMultiSig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleStoreErrors> {
                        <ThereMustBeAtLeastOneTimelockMultiSig as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleStoreErrors::ThereMustBeAtLeastOneTimelockMultiSig)
                    }
                    ThereMustBeAtLeastOneTimelockMultiSig
                },
                {
                    fn Unauthorized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleStoreErrors> {
                        <Unauthorized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleStoreErrors::Unauthorized)
                    }
                    Unauthorized
                },
                {
                    fn ThereMustBeAtLeastOneRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleStoreErrors> {
                        <ThereMustBeAtLeastOneRoleAdmin as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleStoreErrors::ThereMustBeAtLeastOneRoleAdmin)
                    }
                    ThereMustBeAtLeastOneRoleAdmin
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ThereMustBeAtLeastOneRoleAdmin(inner) => {
                    <ThereMustBeAtLeastOneRoleAdmin as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ThereMustBeAtLeastOneTimelockMultiSig(inner) => {
                    <ThereMustBeAtLeastOneTimelockMultiSig as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::Unauthorized(inner) => {
                    <Unauthorized as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ThereMustBeAtLeastOneRoleAdmin(inner) => {
                    <ThereMustBeAtLeastOneRoleAdmin as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ThereMustBeAtLeastOneTimelockMultiSig(inner) => {
                    <ThereMustBeAtLeastOneTimelockMultiSig as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::Unauthorized(inner) => {
                    <Unauthorized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RoleStore`](self) contract instance.

See the [wrapper's documentation](`RoleStoreInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RoleStoreInstance<T, P, N> {
        RoleStoreInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RoleStoreInstance<T, P, N>>,
    > {
        RoleStoreInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        RoleStoreInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`RoleStore`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RoleStore`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RoleStoreInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for RoleStoreInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RoleStoreInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RoleStoreInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`RoleStore`](self) contract instance.

See the [wrapper's documentation](`RoleStoreInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<RoleStoreInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> RoleStoreInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RoleStoreInstance<T, P, N> {
            RoleStoreInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RoleStoreInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getRoleCount`] function.
        pub fn getRoleCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleCountCall, N> {
            self.call_builder(&getRoleCountCall {})
        }
        ///Creates a new call builder for the [`getRoleMemberCount`] function.
        pub fn getRoleMemberCount(
            &self,
            roleKey: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleMemberCountCall, N> {
            self.call_builder(&getRoleMemberCountCall { roleKey })
        }
        ///Creates a new call builder for the [`getRoleMembers`] function.
        pub fn getRoleMembers(
            &self,
            roleKey: alloy::sol_types::private::FixedBytes<32>,
            start: alloy::sol_types::private::primitives::aliases::U256,
            end: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleMembersCall, N> {
            self.call_builder(
                &getRoleMembersCall {
                    roleKey,
                    start,
                    end,
                },
            )
        }
        ///Creates a new call builder for the [`getRoles`] function.
        pub fn getRoles(
            &self,
            start: alloy::sol_types::private::primitives::aliases::U256,
            end: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRolesCall, N> {
            self.call_builder(&getRolesCall { start, end })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            account: alloy::sol_types::private::Address,
            roleKey: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { account, roleKey })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            account: alloy::sol_types::private::Address,
            roleKey: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { account, roleKey })
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            account: alloy::sol_types::private::Address,
            roleKey: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { account, roleKey })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RoleStoreInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}

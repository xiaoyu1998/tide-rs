/**

Generated by the following Solidity interface...
```solidity
interface Role {
    function CONFIG_KEEPER() external view returns (bytes32);
    function CONTROLLER() external view returns (bytes32);
    function FEE_DISTRIBUTION_KEEPER() external view returns (bytes32);
    function FEE_KEEPER() external view returns (bytes32);
    function GOV_TOKEN_CONTROLLER() external view returns (bytes32);
    function LIMITED_CONFIG_KEEPER() external view returns (bytes32);
    function LIQUIDATION_KEEPER() external view returns (bytes32);
    function POOL_KEEPER() external view returns (bytes32);
    function PRICING_KEEPER() external view returns (bytes32);
    function ROLE_ADMIN() external view returns (bytes32);
    function ROUTER_PLUGIN() external view returns (bytes32);
    function TIMELOCK_ADMIN() external view returns (bytes32);
    function TIMELOCK_MULTISIG() external view returns (bytes32);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "CONFIG_KEEPER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CONTROLLER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "FEE_DISTRIBUTION_KEEPER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "FEE_KEEPER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "GOV_TOKEN_CONTROLLER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "LIMITED_CONFIG_KEEPER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "LIQUIDATION_KEEPER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POOL_KEEPER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "PRICING_KEEPER",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ROLE_ADMIN",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ROUTER_PLUGIN",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TIMELOCK_ADMIN",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TIMELOCK_MULTISIG",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod Role {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x61043f610034600b8282823980515f1a607314602857634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100d6575f3560e01c8063cf7fb1d011610093578063e2ff47b31161006e578063e2ff47b314610134578063e629d48c1461013c578063ee0fc12114610144578063f13c5a4b1461014c575f5ffd5b8063cf7fb1d01461011c578063d391014b14610124578063e0fde20c1461012c575f5ffd5b80634479d97b146100da57806375d3adbb146100f4578063774fb4b8146100fc5780639b8b49f8146101045780639ecff6171461010c578063c66aade114610114575b5f5ffd5b6100e2610154565b60405190815260200160405180910390f35b6100e26101a2565b6100e26101e3565b6100e261021c565b6100e261024d565b6100e261027f565b6100e26102b0565b6100e26102de565b6100e261030c565b6100e2610344565b6100e2610376565b6100e26103a5565b6100e26103d3565b6040516020016101899060208082526011908201527054494d454c4f434b5f4d554c544953494760781b604082015260600190565b6040516020818303038152906040528051906020012081565b6040516020016101899060208082526017908201527f4645455f444953545249425554494f4e5f4b4545504552000000000000000000604082015260600190565b604051602001610189906020808252601590820152742624a6a4aa22a22fa1a7a72324a3afa5a2a2a822a960591b604082015260600190565b604051602001610189906020808252600d908201526c2927aaaa22a92fa8262aa3a4a760991b604082015260600190565b604051602001610189906020808252600e908201526d282924a1a4a723afa5a2a2a822a960911b604082015260600190565b604051602001610189906020808252600d908201526c21a7a72324a3afa5a2a2a822a960991b604082015260600190565b604051602001610189906020808252600a90820152692322a2afa5a2a2a822a960b11b604082015260600190565b604051602001610189906020808252600a90820152692927a622afa0a226a4a760b11b604082015260600190565b6040516020016101899060208082526014908201527323a7ab2faa27a5a2a72fa1a7a72a2927a62622a960611b604082015260600190565b604051602001610189906020808252600e908201526d2a24a6a2a627a1a5afa0a226a4a760911b604082015260600190565b604051602001610189906020808252600b908201526a2827a7a62fa5a2a2a822a960a91b604082015260600190565b604051602001610189906020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b604051602001610189906020808252601290820152712624a8aaa4a220aa24a7a72fa5a2a2a822a960711b60408201526060019056fea2646970667358221220459594f4e2546ddd36097699ae27e40fc667a2eeacc26132a2db9feec288838664736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x04?a\x004`\x0B\x82\x82\x829\x80Q_\x1A`s\x14`(WcNH{q`\xE0\x1B_R_`\x04R`$_\xFD[0_R`s\x81S\x82\x81\xF3\xFEs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0\xD6W_5`\xE0\x1C\x80c\xCF\x7F\xB1\xD0\x11a\0\x93W\x80c\xE2\xFFG\xB3\x11a\0nW\x80c\xE2\xFFG\xB3\x14a\x014W\x80c\xE6)\xD4\x8C\x14a\x01<W\x80c\xEE\x0F\xC1!\x14a\x01DW\x80c\xF1<ZK\x14a\x01LW__\xFD[\x80c\xCF\x7F\xB1\xD0\x14a\x01\x1CW\x80c\xD3\x91\x01K\x14a\x01$W\x80c\xE0\xFD\xE2\x0C\x14a\x01,W__\xFD[\x80cDy\xD9{\x14a\0\xDAW\x80cu\xD3\xAD\xBB\x14a\0\xF4W\x80cwO\xB4\xB8\x14a\0\xFCW\x80c\x9B\x8BI\xF8\x14a\x01\x04W\x80c\x9E\xCF\xF6\x17\x14a\x01\x0CW\x80c\xC6j\xAD\xE1\x14a\x01\x14W[__\xFD[a\0\xE2a\x01TV[`@Q\x90\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0\xE2a\x01\xA2V[a\0\xE2a\x01\xE3V[a\0\xE2a\x02\x1CV[a\0\xE2a\x02MV[a\0\xE2a\x02\x7FV[a\0\xE2a\x02\xB0V[a\0\xE2a\x02\xDEV[a\0\xE2a\x03\x0CV[a\0\xE2a\x03DV[a\0\xE2a\x03vV[a\0\xE2a\x03\xA5V[a\0\xE2a\x03\xD3V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x11\x90\x82\x01RpTIMELOCK_MULTISIG`x\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x17\x90\x82\x01R\x7FFEE_DISTRIBUTION_KEEPER\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x15\x90\x82\x01Rt&$\xA6\xA4\xAA\"\xA2/\xA1\xA7\xA7#$\xA3\xAF\xA5\xA2\xA2\xA8\"\xA9`Y\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\r\x90\x82\x01Rl)'\xAA\xAA\"\xA9/\xA8&*\xA3\xA4\xA7`\x99\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x0E\x90\x82\x01Rm()$\xA1\xA4\xA7#\xAF\xA5\xA2\xA2\xA8\"\xA9`\x91\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\r\x90\x82\x01Rl!\xA7\xA7#$\xA3\xAF\xA5\xA2\xA2\xA8\"\xA9`\x99\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\n\x90\x82\x01Ri#\"\xA2\xAF\xA5\xA2\xA2\xA8\"\xA9`\xB1\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\n\x90\x82\x01Ri)'\xA6\"\xAF\xA0\xA2&\xA4\xA7`\xB1\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x14\x90\x82\x01Rs#\xA7\xAB/\xAA'\xA5\xA2\xA7/\xA1\xA7\xA7*)'\xA6&\"\xA9`a\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x0E\x90\x82\x01Rm*$\xA6\xA2\xA6'\xA1\xA5\xAF\xA0\xA2&\xA4\xA7`\x91\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x0B\x90\x82\x01Rj('\xA7\xA6/\xA5\xA2\xA2\xA8\"\xA9`\xA9\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\n\x90\x82\x01Ri!\xA7\xA7*)'\xA6&\"\xA9`\xB1\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x12\x90\x82\x01Rq&$\xA8\xAA\xA4\xA2 \xAA$\xA7\xA7/\xA5\xA2\xA2\xA8\"\xA9`q\x1B`@\x82\x01R``\x01\x90V\xFE\xA2dipfsX\"\x12 E\x95\x94\xF4\xE2Tm\xDD6\tv\x99\xAE'\xE4\x0F\xC6g\xA2\xEE\xAC\xC2a2\xA2\xDB\x9F\xEE\xC2\x88\x83\x86dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x73000000000000000000000000000000000000000030146080604052600436106100d6575f3560e01c8063cf7fb1d011610093578063e2ff47b31161006e578063e2ff47b314610134578063e629d48c1461013c578063ee0fc12114610144578063f13c5a4b1461014c575f5ffd5b8063cf7fb1d01461011c578063d391014b14610124578063e0fde20c1461012c575f5ffd5b80634479d97b146100da57806375d3adbb146100f4578063774fb4b8146100fc5780639b8b49f8146101045780639ecff6171461010c578063c66aade114610114575b5f5ffd5b6100e2610154565b60405190815260200160405180910390f35b6100e26101a2565b6100e26101e3565b6100e261021c565b6100e261024d565b6100e261027f565b6100e26102b0565b6100e26102de565b6100e261030c565b6100e2610344565b6100e2610376565b6100e26103a5565b6100e26103d3565b6040516020016101899060208082526011908201527054494d454c4f434b5f4d554c544953494760781b604082015260600190565b6040516020818303038152906040528051906020012081565b6040516020016101899060208082526017908201527f4645455f444953545249425554494f4e5f4b4545504552000000000000000000604082015260600190565b604051602001610189906020808252601590820152742624a6a4aa22a22fa1a7a72324a3afa5a2a2a822a960591b604082015260600190565b604051602001610189906020808252600d908201526c2927aaaa22a92fa8262aa3a4a760991b604082015260600190565b604051602001610189906020808252600e908201526d282924a1a4a723afa5a2a2a822a960911b604082015260600190565b604051602001610189906020808252600d908201526c21a7a72324a3afa5a2a2a822a960991b604082015260600190565b604051602001610189906020808252600a90820152692322a2afa5a2a2a822a960b11b604082015260600190565b604051602001610189906020808252600a90820152692927a622afa0a226a4a760b11b604082015260600190565b6040516020016101899060208082526014908201527323a7ab2faa27a5a2a72fa1a7a72a2927a62622a960611b604082015260600190565b604051602001610189906020808252600e908201526d2a24a6a2a627a1a5afa0a226a4a760911b604082015260600190565b604051602001610189906020808252600b908201526a2827a7a62fa5a2a2a822a960a91b604082015260600190565b604051602001610189906020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b604051602001610189906020808252601290820152712624a8aaa4a220aa24a7a72fa5a2a2a822a960711b60408201526060019056fea2646970667358221220459594f4e2546ddd36097699ae27e40fc667a2eeacc26132a2db9feec288838664736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0\xD6W_5`\xE0\x1C\x80c\xCF\x7F\xB1\xD0\x11a\0\x93W\x80c\xE2\xFFG\xB3\x11a\0nW\x80c\xE2\xFFG\xB3\x14a\x014W\x80c\xE6)\xD4\x8C\x14a\x01<W\x80c\xEE\x0F\xC1!\x14a\x01DW\x80c\xF1<ZK\x14a\x01LW__\xFD[\x80c\xCF\x7F\xB1\xD0\x14a\x01\x1CW\x80c\xD3\x91\x01K\x14a\x01$W\x80c\xE0\xFD\xE2\x0C\x14a\x01,W__\xFD[\x80cDy\xD9{\x14a\0\xDAW\x80cu\xD3\xAD\xBB\x14a\0\xF4W\x80cwO\xB4\xB8\x14a\0\xFCW\x80c\x9B\x8BI\xF8\x14a\x01\x04W\x80c\x9E\xCF\xF6\x17\x14a\x01\x0CW\x80c\xC6j\xAD\xE1\x14a\x01\x14W[__\xFD[a\0\xE2a\x01TV[`@Q\x90\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0\xE2a\x01\xA2V[a\0\xE2a\x01\xE3V[a\0\xE2a\x02\x1CV[a\0\xE2a\x02MV[a\0\xE2a\x02\x7FV[a\0\xE2a\x02\xB0V[a\0\xE2a\x02\xDEV[a\0\xE2a\x03\x0CV[a\0\xE2a\x03DV[a\0\xE2a\x03vV[a\0\xE2a\x03\xA5V[a\0\xE2a\x03\xD3V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x11\x90\x82\x01RpTIMELOCK_MULTISIG`x\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x17\x90\x82\x01R\x7FFEE_DISTRIBUTION_KEEPER\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x15\x90\x82\x01Rt&$\xA6\xA4\xAA\"\xA2/\xA1\xA7\xA7#$\xA3\xAF\xA5\xA2\xA2\xA8\"\xA9`Y\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\r\x90\x82\x01Rl)'\xAA\xAA\"\xA9/\xA8&*\xA3\xA4\xA7`\x99\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x0E\x90\x82\x01Rm()$\xA1\xA4\xA7#\xAF\xA5\xA2\xA2\xA8\"\xA9`\x91\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\r\x90\x82\x01Rl!\xA7\xA7#$\xA3\xAF\xA5\xA2\xA2\xA8\"\xA9`\x99\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\n\x90\x82\x01Ri#\"\xA2\xAF\xA5\xA2\xA2\xA8\"\xA9`\xB1\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\n\x90\x82\x01Ri)'\xA6\"\xAF\xA0\xA2&\xA4\xA7`\xB1\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x14\x90\x82\x01Rs#\xA7\xAB/\xAA'\xA5\xA2\xA7/\xA1\xA7\xA7*)'\xA6&\"\xA9`a\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x0E\x90\x82\x01Rm*$\xA6\xA2\xA6'\xA1\xA5\xAF\xA0\xA2&\xA4\xA7`\x91\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x0B\x90\x82\x01Rj('\xA7\xA6/\xA5\xA2\xA2\xA8\"\xA9`\xA9\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\n\x90\x82\x01Ri!\xA7\xA7*)'\xA6&\"\xA9`\xB1\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x01\x89\x90` \x80\x82R`\x12\x90\x82\x01Rq&$\xA8\xAA\xA4\xA2 \xAA$\xA7\xA7/\xA5\xA2\xA2\xA8\"\xA9`q\x1B`@\x82\x01R``\x01\x90V\xFE\xA2dipfsX\"\x12 E\x95\x94\xF4\xE2Tm\xDD6\tv\x99\xAE'\xE4\x0F\xC6g\xA2\xEE\xAC\xC2a2\xA2\xDB\x9F\xEE\xC2\x88\x83\x86dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `CONFIG_KEEPER()` and selector `0xc66aade1`.
```solidity
function CONFIG_KEEPER() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CONFIG_KEEPERCall {}
    ///Container type for the return parameters of the [`CONFIG_KEEPER()`](CONFIG_KEEPERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CONFIG_KEEPERReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CONFIG_KEEPERCall> for UnderlyingRustTuple<'_> {
                fn from(value: CONFIG_KEEPERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CONFIG_KEEPERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CONFIG_KEEPERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CONFIG_KEEPERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CONFIG_KEEPERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CONFIG_KEEPERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CONFIG_KEEPERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CONFIG_KEEPER()";
            const SELECTOR: [u8; 4] = [198u8, 106u8, 173u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `CONTROLLER()` and selector `0xee0fc121`.
```solidity
function CONTROLLER() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CONTROLLERCall {}
    ///Container type for the return parameters of the [`CONTROLLER()`](CONTROLLERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CONTROLLERReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CONTROLLERCall> for UnderlyingRustTuple<'_> {
                fn from(value: CONTROLLERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CONTROLLERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CONTROLLERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CONTROLLERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CONTROLLERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CONTROLLERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CONTROLLERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CONTROLLER()";
            const SELECTOR: [u8; 4] = [238u8, 15u8, 193u8, 33u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `FEE_DISTRIBUTION_KEEPER()` and selector `0x75d3adbb`.
```solidity
function FEE_DISTRIBUTION_KEEPER() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FEE_DISTRIBUTION_KEEPERCall {}
    ///Container type for the return parameters of the [`FEE_DISTRIBUTION_KEEPER()`](FEE_DISTRIBUTION_KEEPERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FEE_DISTRIBUTION_KEEPERReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_DISTRIBUTION_KEEPERCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: FEE_DISTRIBUTION_KEEPERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for FEE_DISTRIBUTION_KEEPERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_DISTRIBUTION_KEEPERReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: FEE_DISTRIBUTION_KEEPERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for FEE_DISTRIBUTION_KEEPERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for FEE_DISTRIBUTION_KEEPERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = FEE_DISTRIBUTION_KEEPERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FEE_DISTRIBUTION_KEEPER()";
            const SELECTOR: [u8; 4] = [117u8, 211u8, 173u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `FEE_KEEPER()` and selector `0xcf7fb1d0`.
```solidity
function FEE_KEEPER() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FEE_KEEPERCall {}
    ///Container type for the return parameters of the [`FEE_KEEPER()`](FEE_KEEPERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FEE_KEEPERReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_KEEPERCall> for UnderlyingRustTuple<'_> {
                fn from(value: FEE_KEEPERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for FEE_KEEPERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<FEE_KEEPERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: FEE_KEEPERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for FEE_KEEPERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for FEE_KEEPERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = FEE_KEEPERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FEE_KEEPER()";
            const SELECTOR: [u8; 4] = [207u8, 127u8, 177u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `GOV_TOKEN_CONTROLLER()` and selector `0xe0fde20c`.
```solidity
function GOV_TOKEN_CONTROLLER() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct GOV_TOKEN_CONTROLLERCall {}
    ///Container type for the return parameters of the [`GOV_TOKEN_CONTROLLER()`](GOV_TOKEN_CONTROLLERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct GOV_TOKEN_CONTROLLERReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<GOV_TOKEN_CONTROLLERCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: GOV_TOKEN_CONTROLLERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for GOV_TOKEN_CONTROLLERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<GOV_TOKEN_CONTROLLERReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: GOV_TOKEN_CONTROLLERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for GOV_TOKEN_CONTROLLERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for GOV_TOKEN_CONTROLLERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = GOV_TOKEN_CONTROLLERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "GOV_TOKEN_CONTROLLER()";
            const SELECTOR: [u8; 4] = [224u8, 253u8, 226u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `LIMITED_CONFIG_KEEPER()` and selector `0x774fb4b8`.
```solidity
function LIMITED_CONFIG_KEEPER() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct LIMITED_CONFIG_KEEPERCall {}
    ///Container type for the return parameters of the [`LIMITED_CONFIG_KEEPER()`](LIMITED_CONFIG_KEEPERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct LIMITED_CONFIG_KEEPERReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<LIMITED_CONFIG_KEEPERCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: LIMITED_CONFIG_KEEPERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for LIMITED_CONFIG_KEEPERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<LIMITED_CONFIG_KEEPERReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: LIMITED_CONFIG_KEEPERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for LIMITED_CONFIG_KEEPERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for LIMITED_CONFIG_KEEPERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = LIMITED_CONFIG_KEEPERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "LIMITED_CONFIG_KEEPER()";
            const SELECTOR: [u8; 4] = [119u8, 79u8, 180u8, 184u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `LIQUIDATION_KEEPER()` and selector `0xf13c5a4b`.
```solidity
function LIQUIDATION_KEEPER() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct LIQUIDATION_KEEPERCall {}
    ///Container type for the return parameters of the [`LIQUIDATION_KEEPER()`](LIQUIDATION_KEEPERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct LIQUIDATION_KEEPERReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<LIQUIDATION_KEEPERCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: LIQUIDATION_KEEPERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for LIQUIDATION_KEEPERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<LIQUIDATION_KEEPERReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: LIQUIDATION_KEEPERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for LIQUIDATION_KEEPERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for LIQUIDATION_KEEPERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = LIQUIDATION_KEEPERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "LIQUIDATION_KEEPER()";
            const SELECTOR: [u8; 4] = [241u8, 60u8, 90u8, 75u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POOL_KEEPER()` and selector `0xe629d48c`.
```solidity
function POOL_KEEPER() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POOL_KEEPERCall {}
    ///Container type for the return parameters of the [`POOL_KEEPER()`](POOL_KEEPERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POOL_KEEPERReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POOL_KEEPERCall> for UnderlyingRustTuple<'_> {
                fn from(value: POOL_KEEPERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POOL_KEEPERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POOL_KEEPERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: POOL_KEEPERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POOL_KEEPERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POOL_KEEPERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POOL_KEEPERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POOL_KEEPER()";
            const SELECTOR: [u8; 4] = [230u8, 41u8, 212u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `PRICING_KEEPER()` and selector `0x9ecff617`.
```solidity
function PRICING_KEEPER() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRICING_KEEPERCall {}
    ///Container type for the return parameters of the [`PRICING_KEEPER()`](PRICING_KEEPERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRICING_KEEPERReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRICING_KEEPERCall> for UnderlyingRustTuple<'_> {
                fn from(value: PRICING_KEEPERCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for PRICING_KEEPERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRICING_KEEPERReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRICING_KEEPERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRICING_KEEPERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for PRICING_KEEPERCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = PRICING_KEEPERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PRICING_KEEPER()";
            const SELECTOR: [u8; 4] = [158u8, 207u8, 246u8, 23u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ROLE_ADMIN()` and selector `0xd391014b`.
```solidity
function ROLE_ADMIN() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLE_ADMINCall {}
    ///Container type for the return parameters of the [`ROLE_ADMIN()`](ROLE_ADMINCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROLE_ADMINReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLE_ADMINCall> for UnderlyingRustTuple<'_> {
                fn from(value: ROLE_ADMINCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLE_ADMINCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROLE_ADMINReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ROLE_ADMINReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROLE_ADMINReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ROLE_ADMINCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ROLE_ADMINReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ROLE_ADMIN()";
            const SELECTOR: [u8; 4] = [211u8, 145u8, 1u8, 75u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ROUTER_PLUGIN()` and selector `0x9b8b49f8`.
```solidity
function ROUTER_PLUGIN() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROUTER_PLUGINCall {}
    ///Container type for the return parameters of the [`ROUTER_PLUGIN()`](ROUTER_PLUGINCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROUTER_PLUGINReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROUTER_PLUGINCall> for UnderlyingRustTuple<'_> {
                fn from(value: ROUTER_PLUGINCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROUTER_PLUGINCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROUTER_PLUGINReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ROUTER_PLUGINReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROUTER_PLUGINReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ROUTER_PLUGINCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ROUTER_PLUGINReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ROUTER_PLUGIN()";
            const SELECTOR: [u8; 4] = [155u8, 139u8, 73u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TIMELOCK_ADMIN()` and selector `0xe2ff47b3`.
```solidity
function TIMELOCK_ADMIN() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TIMELOCK_ADMINCall {}
    ///Container type for the return parameters of the [`TIMELOCK_ADMIN()`](TIMELOCK_ADMINCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TIMELOCK_ADMINReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TIMELOCK_ADMINCall> for UnderlyingRustTuple<'_> {
                fn from(value: TIMELOCK_ADMINCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for TIMELOCK_ADMINCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TIMELOCK_ADMINReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TIMELOCK_ADMINReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TIMELOCK_ADMINReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TIMELOCK_ADMINCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TIMELOCK_ADMINReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TIMELOCK_ADMIN()";
            const SELECTOR: [u8; 4] = [226u8, 255u8, 71u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TIMELOCK_MULTISIG()` and selector `0x4479d97b`.
```solidity
function TIMELOCK_MULTISIG() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TIMELOCK_MULTISIGCall {}
    ///Container type for the return parameters of the [`TIMELOCK_MULTISIG()`](TIMELOCK_MULTISIGCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TIMELOCK_MULTISIGReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TIMELOCK_MULTISIGCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TIMELOCK_MULTISIGCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TIMELOCK_MULTISIGCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TIMELOCK_MULTISIGReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TIMELOCK_MULTISIGReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TIMELOCK_MULTISIGReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TIMELOCK_MULTISIGCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TIMELOCK_MULTISIGReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TIMELOCK_MULTISIG()";
            const SELECTOR: [u8; 4] = [68u8, 121u8, 217u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Role`](self) function calls.
    pub enum RoleCalls {
        CONFIG_KEEPER(CONFIG_KEEPERCall),
        CONTROLLER(CONTROLLERCall),
        FEE_DISTRIBUTION_KEEPER(FEE_DISTRIBUTION_KEEPERCall),
        FEE_KEEPER(FEE_KEEPERCall),
        GOV_TOKEN_CONTROLLER(GOV_TOKEN_CONTROLLERCall),
        LIMITED_CONFIG_KEEPER(LIMITED_CONFIG_KEEPERCall),
        LIQUIDATION_KEEPER(LIQUIDATION_KEEPERCall),
        POOL_KEEPER(POOL_KEEPERCall),
        PRICING_KEEPER(PRICING_KEEPERCall),
        ROLE_ADMIN(ROLE_ADMINCall),
        ROUTER_PLUGIN(ROUTER_PLUGINCall),
        TIMELOCK_ADMIN(TIMELOCK_ADMINCall),
        TIMELOCK_MULTISIG(TIMELOCK_MULTISIGCall),
    }
    #[automatically_derived]
    impl RoleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [68u8, 121u8, 217u8, 123u8],
            [117u8, 211u8, 173u8, 187u8],
            [119u8, 79u8, 180u8, 184u8],
            [155u8, 139u8, 73u8, 248u8],
            [158u8, 207u8, 246u8, 23u8],
            [198u8, 106u8, 173u8, 225u8],
            [207u8, 127u8, 177u8, 208u8],
            [211u8, 145u8, 1u8, 75u8],
            [224u8, 253u8, 226u8, 12u8],
            [226u8, 255u8, 71u8, 179u8],
            [230u8, 41u8, 212u8, 140u8],
            [238u8, 15u8, 193u8, 33u8],
            [241u8, 60u8, 90u8, 75u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RoleCalls {
        const NAME: &'static str = "RoleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::CONFIG_KEEPER(_) => {
                    <CONFIG_KEEPERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CONTROLLER(_) => {
                    <CONTROLLERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::FEE_DISTRIBUTION_KEEPER(_) => {
                    <FEE_DISTRIBUTION_KEEPERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::FEE_KEEPER(_) => {
                    <FEE_KEEPERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::GOV_TOKEN_CONTROLLER(_) => {
                    <GOV_TOKEN_CONTROLLERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::LIMITED_CONFIG_KEEPER(_) => {
                    <LIMITED_CONFIG_KEEPERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::LIQUIDATION_KEEPER(_) => {
                    <LIQUIDATION_KEEPERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POOL_KEEPER(_) => {
                    <POOL_KEEPERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::PRICING_KEEPER(_) => {
                    <PRICING_KEEPERCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ROLE_ADMIN(_) => {
                    <ROLE_ADMINCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ROUTER_PLUGIN(_) => {
                    <ROUTER_PLUGINCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TIMELOCK_ADMIN(_) => {
                    <TIMELOCK_ADMINCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TIMELOCK_MULTISIG(_) => {
                    <TIMELOCK_MULTISIGCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RoleCalls>] = &[
                {
                    fn TIMELOCK_MULTISIG(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <TIMELOCK_MULTISIGCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::TIMELOCK_MULTISIG)
                    }
                    TIMELOCK_MULTISIG
                },
                {
                    fn FEE_DISTRIBUTION_KEEPER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <FEE_DISTRIBUTION_KEEPERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::FEE_DISTRIBUTION_KEEPER)
                    }
                    FEE_DISTRIBUTION_KEEPER
                },
                {
                    fn LIMITED_CONFIG_KEEPER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <LIMITED_CONFIG_KEEPERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::LIMITED_CONFIG_KEEPER)
                    }
                    LIMITED_CONFIG_KEEPER
                },
                {
                    fn ROUTER_PLUGIN(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <ROUTER_PLUGINCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::ROUTER_PLUGIN)
                    }
                    ROUTER_PLUGIN
                },
                {
                    fn PRICING_KEEPER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <PRICING_KEEPERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::PRICING_KEEPER)
                    }
                    PRICING_KEEPER
                },
                {
                    fn CONFIG_KEEPER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <CONFIG_KEEPERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::CONFIG_KEEPER)
                    }
                    CONFIG_KEEPER
                },
                {
                    fn FEE_KEEPER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <FEE_KEEPERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::FEE_KEEPER)
                    }
                    FEE_KEEPER
                },
                {
                    fn ROLE_ADMIN(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <ROLE_ADMINCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::ROLE_ADMIN)
                    }
                    ROLE_ADMIN
                },
                {
                    fn GOV_TOKEN_CONTROLLER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <GOV_TOKEN_CONTROLLERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::GOV_TOKEN_CONTROLLER)
                    }
                    GOV_TOKEN_CONTROLLER
                },
                {
                    fn TIMELOCK_ADMIN(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <TIMELOCK_ADMINCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::TIMELOCK_ADMIN)
                    }
                    TIMELOCK_ADMIN
                },
                {
                    fn POOL_KEEPER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <POOL_KEEPERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::POOL_KEEPER)
                    }
                    POOL_KEEPER
                },
                {
                    fn CONTROLLER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <CONTROLLERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::CONTROLLER)
                    }
                    CONTROLLER
                },
                {
                    fn LIQUIDATION_KEEPER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoleCalls> {
                        <LIQUIDATION_KEEPERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoleCalls::LIQUIDATION_KEEPER)
                    }
                    LIQUIDATION_KEEPER
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::CONFIG_KEEPER(inner) => {
                    <CONFIG_KEEPERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CONTROLLER(inner) => {
                    <CONTROLLERCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::FEE_DISTRIBUTION_KEEPER(inner) => {
                    <FEE_DISTRIBUTION_KEEPERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FEE_KEEPER(inner) => {
                    <FEE_KEEPERCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::GOV_TOKEN_CONTROLLER(inner) => {
                    <GOV_TOKEN_CONTROLLERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::LIMITED_CONFIG_KEEPER(inner) => {
                    <LIMITED_CONFIG_KEEPERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::LIQUIDATION_KEEPER(inner) => {
                    <LIQUIDATION_KEEPERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POOL_KEEPER(inner) => {
                    <POOL_KEEPERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::PRICING_KEEPER(inner) => {
                    <PRICING_KEEPERCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ROLE_ADMIN(inner) => {
                    <ROLE_ADMINCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::ROUTER_PLUGIN(inner) => {
                    <ROUTER_PLUGINCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TIMELOCK_ADMIN(inner) => {
                    <TIMELOCK_ADMINCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TIMELOCK_MULTISIG(inner) => {
                    <TIMELOCK_MULTISIGCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::CONFIG_KEEPER(inner) => {
                    <CONFIG_KEEPERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CONTROLLER(inner) => {
                    <CONTROLLERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FEE_DISTRIBUTION_KEEPER(inner) => {
                    <FEE_DISTRIBUTION_KEEPERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FEE_KEEPER(inner) => {
                    <FEE_KEEPERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::GOV_TOKEN_CONTROLLER(inner) => {
                    <GOV_TOKEN_CONTROLLERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::LIMITED_CONFIG_KEEPER(inner) => {
                    <LIMITED_CONFIG_KEEPERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::LIQUIDATION_KEEPER(inner) => {
                    <LIQUIDATION_KEEPERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POOL_KEEPER(inner) => {
                    <POOL_KEEPERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PRICING_KEEPER(inner) => {
                    <PRICING_KEEPERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ROLE_ADMIN(inner) => {
                    <ROLE_ADMINCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ROUTER_PLUGIN(inner) => {
                    <ROUTER_PLUGINCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TIMELOCK_ADMIN(inner) => {
                    <TIMELOCK_ADMINCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TIMELOCK_MULTISIG(inner) => {
                    <TIMELOCK_MULTISIGCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Role`](self) contract instance.

See the [wrapper's documentation](`RoleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(address: alloy_sol_types::private::Address, provider: P) -> RoleInstance<T, P, N> {
        RoleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RoleInstance<T, P, N>>,
    > {
        RoleInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        RoleInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Role`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Role`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RoleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for RoleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RoleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RoleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Role`](self) contract instance.

See the [wrapper's documentation](`RoleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<RoleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> RoleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RoleInstance<T, P, N> {
            RoleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RoleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`CONFIG_KEEPER`] function.
        pub fn CONFIG_KEEPER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CONFIG_KEEPERCall, N> {
            self.call_builder(&CONFIG_KEEPERCall {})
        }
        ///Creates a new call builder for the [`CONTROLLER`] function.
        pub fn CONTROLLER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CONTROLLERCall, N> {
            self.call_builder(&CONTROLLERCall {})
        }
        ///Creates a new call builder for the [`FEE_DISTRIBUTION_KEEPER`] function.
        pub fn FEE_DISTRIBUTION_KEEPER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, FEE_DISTRIBUTION_KEEPERCall, N> {
            self.call_builder(&FEE_DISTRIBUTION_KEEPERCall {})
        }
        ///Creates a new call builder for the [`FEE_KEEPER`] function.
        pub fn FEE_KEEPER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, FEE_KEEPERCall, N> {
            self.call_builder(&FEE_KEEPERCall {})
        }
        ///Creates a new call builder for the [`GOV_TOKEN_CONTROLLER`] function.
        pub fn GOV_TOKEN_CONTROLLER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, GOV_TOKEN_CONTROLLERCall, N> {
            self.call_builder(&GOV_TOKEN_CONTROLLERCall {})
        }
        ///Creates a new call builder for the [`LIMITED_CONFIG_KEEPER`] function.
        pub fn LIMITED_CONFIG_KEEPER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, LIMITED_CONFIG_KEEPERCall, N> {
            self.call_builder(&LIMITED_CONFIG_KEEPERCall {})
        }
        ///Creates a new call builder for the [`LIQUIDATION_KEEPER`] function.
        pub fn LIQUIDATION_KEEPER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, LIQUIDATION_KEEPERCall, N> {
            self.call_builder(&LIQUIDATION_KEEPERCall {})
        }
        ///Creates a new call builder for the [`POOL_KEEPER`] function.
        pub fn POOL_KEEPER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POOL_KEEPERCall, N> {
            self.call_builder(&POOL_KEEPERCall {})
        }
        ///Creates a new call builder for the [`PRICING_KEEPER`] function.
        pub fn PRICING_KEEPER(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, PRICING_KEEPERCall, N> {
            self.call_builder(&PRICING_KEEPERCall {})
        }
        ///Creates a new call builder for the [`ROLE_ADMIN`] function.
        pub fn ROLE_ADMIN(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ROLE_ADMINCall, N> {
            self.call_builder(&ROLE_ADMINCall {})
        }
        ///Creates a new call builder for the [`ROUTER_PLUGIN`] function.
        pub fn ROUTER_PLUGIN(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ROUTER_PLUGINCall, N> {
            self.call_builder(&ROUTER_PLUGINCall {})
        }
        ///Creates a new call builder for the [`TIMELOCK_ADMIN`] function.
        pub fn TIMELOCK_ADMIN(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TIMELOCK_ADMINCall, N> {
            self.call_builder(&TIMELOCK_ADMINCall {})
        }
        ///Creates a new call builder for the [`TIMELOCK_MULTISIG`] function.
        pub fn TIMELOCK_MULTISIG(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TIMELOCK_MULTISIGCall, N> {
            self.call_builder(&TIMELOCK_MULTISIGCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RoleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}

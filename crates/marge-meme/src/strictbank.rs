/**

Generated by the following Solidity interface...
```solidity
interface StrictBank {
    error EmptyReceiver();
    error InvalidNativeTokenSender(address msgSender);
    error SelfTransferNotSupported(address receiver);
    error TokenTransferError(address token, address receiver, uint256 amount);
    error Unauthorized(address msgSender, string role);

    event TokenTransferReverted(string reason, bytes returndata);

    constructor(address _roleStore, address _dataStore);

    receive() external payable;

    function dataStore() external view returns (address);
    function recordTransferIn(address token) external returns (uint256);
    function recordTransferOut(address token) external returns (uint256);
    function roleStore() external view returns (address);
    function syncTokenBalance(address token) external returns (uint256);
    function tokenBalances(address) external view returns (uint256);
    function transferOut(address token, address receiver, uint256 amount) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_roleStore",
        "type": "address",
        "internalType": "contract RoleStore"
      },
      {
        "name": "_dataStore",
        "type": "address",
        "internalType": "contract DataStore"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "dataStore",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract DataStore"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "recordTransferIn",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "recordTransferOut",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "roleStore",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract RoleStore"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "syncTokenBalance",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "tokenBalances",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOut",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "TokenTransferReverted",
    "inputs": [
      {
        "name": "reason",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "returndata",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "EmptyReceiver",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidNativeTokenSender",
    "inputs": [
      {
        "name": "msgSender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "SelfTransferNotSupported",
    "inputs": [
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "TokenTransferError",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "Unauthorized",
    "inputs": [
      {
        "name": "msgSender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "role",
        "type": "string",
        "internalType": "string"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod StrictBank {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c060405234801561000f575f5ffd5b50604051610cc3380380610cc383398101604081905261002e9161005c565b6001600160a01b039182166080521660a052610094565b6001600160a01b0381168114610059575f5ffd5b50565b5f5f6040838503121561006d575f5ffd5b825161007881610045565b602084015190925061008981610045565b809150509250929050565b60805160a051610c016100c25f395f8181607c01526101b001525f818161013a01526104110152610c015ff3fe608060405260043610610071575f3560e01c8063523fba7f1161004c578063523fba7f14610174578063660d0d671461019f5780638c1b5fde146101d2578063eb40133f146101f1575f5ffd5b8063078d3b79146100d8578063352f9aed146100f75780634a4a7b0414610129575f5ffd5b366100d4575f6100a07f0000000000000000000000000000000000000000000000000000000000000000610210565b9050336001600160a01b038216146100d25760405163738d28df60e11b81523360048201526024015b60405180910390fd5b005b5f5ffd5b3480156100e3575f5ffd5b506100d26100f236600461097c565b6102c0565b348015610102575f5ffd5b506101166101113660046109ba565b610320565b6040519081526020015b60405180910390f35b348015610134575f5ffd5b5061015c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610120565b34801561017f575f5ffd5b5061011661018e3660046109ba565b5f6020819052908152604090205481565b3480156101aa575f5ffd5b5061015c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101dd575f5ffd5b506101166101ec3660046109ba565b61033c565b3480156101fc575f5ffd5b5061011661020b3660046109ba565b610358565b5f816001600160a01b03166321f8a7216040516020016102479060208082526003908201526215d39560ea1b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161027b91815260200190565b602060405180830381865afa158015610296573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102ba91906109dc565b92915050565b6103106040516020016102d2906109f7565b604051602081830303815290604052805190602001206040518060400160405280600a81526020016921a7a72a2927a62622a960b11b8152506103f5565b61031b8383836104a7565b505050565b5f6103336040516020016102d2906109f7565b6102ba826104ef565b5f61034f6040516020016102d2906109f7565b6102ba82610597565b5f61036b6040516020016102d2906109f7565b6040516370a0823160e01b81523060048201525f906001600160a01b038416906370a0823190602401602060405180830381865afa1580156103af573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103d39190610a1b565b6001600160a01b0384165f908152602081905260409020819055915050919050565b60405163ac4ab3fb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac4ab3fb90604401602060405180830381865afa15801561045e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104829190610a32565b6104a357338160405163a35b150b60e01b81526004016100c9929190610a7f565b5050565b306001600160a01b038316036104db57604051637387c8a960e11b81526001600160a01b03831660048201526024016100c9565b6104e6838383610637565b61031b836106e3565b6001600160a01b0381165f818152602081905260408082205490516370a0823160e01b8152306004820152919290918391906370a0823190602401602060405180830381865afa158015610545573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105699190610a1b565b6001600160a01b0385165f908152602081905260409020819055905061058f8282610aa2565b949350505050565b6001600160a01b0381165f818152602081905260408082205490516370a0823160e01b8152306004820152919290918391906370a0823190602401602060405180830381865afa1580156105ed573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106119190610a1b565b6001600160a01b0385165f908152602081905260409020819055905061058f8183610aa2565b805f0361064357505050565b61064c82610764565b5f5f61065985858561078e565b91509150811561066a575050505050565b5f610674826108dd565b5090507fc9f14d9a0a9b46470c7c0b6c508f8283abaab7f795f153953c58cd4250824dae81836040516106a8929190610ac1565b60405180910390a160405163012f3b8f60e71b81526001600160a01b03808816600483015286166024820152604481018590526064016100c9565b6040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa158015610725573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107499190610a1b565b6001600160a01b039091165f90815260208190526040902055565b6001600160a01b03811661078b5760405163d551823d60e01b815260040160405180910390fd5b50565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291515f926060929184918291908916906107f0908590610aee565b5f604051808303815f865af19150503d805f8114610829576040519150601f19603f3d011682016040523d82523d5f602084013e61082e565b606091505b509150915081156108cd5780515f0361088c575f886001600160a01b03163b1161088c575f6040518060400160405280601481526020017310d85b1b081d1bc81b9bdb8b58dbdb9d1c9858dd60621b815250945094505050506108d5565b5f81511180156108ad5750808060200190518101906108ab9190610a32565b155b156108bf575f945092506108d5915050565b6001945092506108d5915050565b5f9450925050505b935093915050565b60605f60448351101561090257505060408051602081019091525f8082529092909150565b5f61090e846020015190565b90506307b9e43360e51b6001600160e01b031982160161094d57600484019350838060200190518101906109429190610b18565b946001945092505050565b5f60405180602001604052805f815250909250925050915091565b6001600160a01b038116811461078b575f5ffd5b5f5f5f6060848603121561098e575f5ffd5b833561099981610968565b925060208401356109a981610968565b929592945050506040919091013590565b5f602082840312156109ca575f5ffd5b81356109d581610968565b9392505050565b5f602082840312156109ec575f5ffd5b81516109d581610968565b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b5f60208284031215610a2b575f5ffd5b5051919050565b5f60208284031215610a42575f5ffd5b815180151581146109d5575f5ffd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03831681526040602082018190525f9061058f90830184610a51565b818103818111156102ba57634e487b7160e01b5f52601160045260245ffd5b604081525f610ad36040830185610a51565b8281036020840152610ae58185610a51565b95945050505050565b5f82518060208501845e5f920191825250919050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610b28575f5ffd5b815167ffffffffffffffff811115610b3e575f5ffd5b8201601f81018413610b4e575f5ffd5b805167ffffffffffffffff811115610b6857610b68610b04565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610b9757610b97610b04565b604052818152828201602001861015610bae575f5ffd5b8160208401602083015e5f9181016020019190915294935050505056fea2646970667358221220cd28ae65ac37baa7819d8a64d97bda7d4ca3d6b2b55e8b86757fcd4d2f1b0e5864736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa\x0C\xC38\x03\x80a\x0C\xC3\x839\x81\x01`@\x81\x90Ra\0.\x91a\0\\V[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x80R\x16`\xA0Ra\0\x94V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0YW__\xFD[PV[__`@\x83\x85\x03\x12\x15a\0mW__\xFD[\x82Qa\0x\x81a\0EV[` \x84\x01Q\x90\x92Pa\0\x89\x81a\0EV[\x80\x91PP\x92P\x92\x90PV[`\x80Q`\xA0Qa\x0C\x01a\0\xC2_9_\x81\x81`|\x01Ra\x01\xB0\x01R_\x81\x81a\x01:\x01Ra\x04\x11\x01Ra\x0C\x01_\xF3\xFE`\x80`@R`\x046\x10a\0qW_5`\xE0\x1C\x80cR?\xBA\x7F\x11a\0LW\x80cR?\xBA\x7F\x14a\x01tW\x80cf\r\rg\x14a\x01\x9FW\x80c\x8C\x1B_\xDE\x14a\x01\xD2W\x80c\xEB@\x13?\x14a\x01\xF1W__\xFD[\x80c\x07\x8D;y\x14a\0\xD8W\x80c5/\x9A\xED\x14a\0\xF7W\x80cJJ{\x04\x14a\x01)W__\xFD[6a\0\xD4W_a\0\xA0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x02\x10V[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\0\xD2W`@Qcs\x8D(\xDF`\xE1\x1B\x81R3`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[\0[__\xFD[4\x80\x15a\0\xE3W__\xFD[Pa\0\xD2a\0\xF26`\x04a\t|V[a\x02\xC0V[4\x80\x15a\x01\x02W__\xFD[Pa\x01\x16a\x01\x116`\x04a\t\xBAV[a\x03 V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x014W__\xFD[Pa\x01\\\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01 V[4\x80\x15a\x01\x7FW__\xFD[Pa\x01\x16a\x01\x8E6`\x04a\t\xBAV[_` \x81\x90R\x90\x81R`@\x90 T\x81V[4\x80\x15a\x01\xAAW__\xFD[Pa\x01\\\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[4\x80\x15a\x01\xDDW__\xFD[Pa\x01\x16a\x01\xEC6`\x04a\t\xBAV[a\x03<V[4\x80\x15a\x01\xFCW__\xFD[Pa\x01\x16a\x02\x0B6`\x04a\t\xBAV[a\x03XV[_\x81`\x01`\x01`\xA0\x1B\x03\x16c!\xF8\xA7!`@Q` \x01a\x02G\x90` \x80\x82R`\x03\x90\x82\x01Rb\x15\xD3\x95`\xEA\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02{\x91\x81R` \x01\x90V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\x96W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xBA\x91\x90a\t\xDCV[\x92\x91PPV[a\x03\x10`@Q` \x01a\x02\xD2\x90a\t\xF7V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q\x80`@\x01`@R\x80`\n\x81R` \x01i!\xA7\xA7*)'\xA6&\"\xA9`\xB1\x1B\x81RPa\x03\xF5V[a\x03\x1B\x83\x83\x83a\x04\xA7V[PPPV[_a\x033`@Q` \x01a\x02\xD2\x90a\t\xF7V[a\x02\xBA\x82a\x04\xEFV[_a\x03O`@Q` \x01a\x02\xD2\x90a\t\xF7V[a\x02\xBA\x82a\x05\x97V[_a\x03k`@Q` \x01a\x02\xD2\x90a\t\xF7V[`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R_\x90`\x01`\x01`\xA0\x1B\x03\x84\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xAFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xD3\x91\x90a\n\x1BV[`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R` \x81\x90R`@\x90 \x81\x90U\x91PP\x91\x90PV[`@Qc\xACJ\xB3\xFB`\xE0\x1B\x81R3`\x04\x82\x01R`$\x81\x01\x83\x90R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x90c\xACJ\xB3\xFB\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04^W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x82\x91\x90a\n2V[a\x04\xA3W3\x81`@Qc\xA3[\x15\x0B`\xE0\x1B\x81R`\x04\x01a\0\xC9\x92\x91\x90a\n\x7FV[PPV[0`\x01`\x01`\xA0\x1B\x03\x83\x16\x03a\x04\xDBW`@Qcs\x87\xC8\xA9`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\0\xC9V[a\x04\xE6\x83\x83\x83a\x067V[a\x03\x1B\x83a\x06\xE3V[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x81\x81R` \x81\x90R`@\x80\x82 T\x90Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x91\x92\x90\x91\x83\x91\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05i\x91\x90a\n\x1BV[`\x01`\x01`\xA0\x1B\x03\x85\x16_\x90\x81R` \x81\x90R`@\x90 \x81\x90U\x90Pa\x05\x8F\x82\x82a\n\xA2V[\x94\x93PPPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x81\x81R` \x81\x90R`@\x80\x82 T\x90Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x91\x92\x90\x91\x83\x91\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xEDW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\x11\x91\x90a\n\x1BV[`\x01`\x01`\xA0\x1B\x03\x85\x16_\x90\x81R` \x81\x90R`@\x90 \x81\x90U\x90Pa\x05\x8F\x81\x83a\n\xA2V[\x80_\x03a\x06CWPPPV[a\x06L\x82a\x07dV[__a\x06Y\x85\x85\x85a\x07\x8EV[\x91P\x91P\x81\x15a\x06jWPPPPPV[_a\x06t\x82a\x08\xDDV[P\x90P\x7F\xC9\xF1M\x9A\n\x9BFG\x0C|\x0BlP\x8F\x82\x83\xAB\xAA\xB7\xF7\x95\xF1S\x95<X\xCDBP\x82M\xAE\x81\x83`@Qa\x06\xA8\x92\x91\x90a\n\xC1V[`@Q\x80\x91\x03\x90\xA1`@Qc\x01/;\x8F`\xE7\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x80\x88\x16`\x04\x83\x01R\x86\x16`$\x82\x01R`D\x81\x01\x85\x90R`d\x01a\0\xC9V[`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x82\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07%W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07I\x91\x90a\n\x1BV[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16_\x90\x81R` \x81\x90R`@\x90 UV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x07\x8BW`@Qc\xD5Q\x82=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`$\x83\x01R`D\x80\x83\x01\x85\x90R\x83Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x83R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xA9\x05\x9C\xBB`\xE0\x1B\x17\x90R\x91Q_\x92``\x92\x91\x84\x91\x82\x91\x90\x89\x16\x90a\x07\xF0\x90\x85\x90a\n\xEEV[_`@Q\x80\x83\x03\x81_\x86Z\xF1\x91PP=\x80_\x81\x14a\x08)W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x08.V[``\x91P[P\x91P\x91P\x81\x15a\x08\xCDW\x80Q_\x03a\x08\x8CW_\x88`\x01`\x01`\xA0\x1B\x03\x16;\x11a\x08\x8CW_`@Q\x80`@\x01`@R\x80`\x14\x81R` \x01s\x10\xD8[\x1B\x08\x1D\x1B\xC8\x1B\x9B\xDB\x8BX\xDB\xDB\x9D\x1C\x98X\xDD`b\x1B\x81RP\x94P\x94PPPPa\x08\xD5V[_\x81Q\x11\x80\x15a\x08\xADWP\x80\x80` \x01\x90Q\x81\x01\x90a\x08\xAB\x91\x90a\n2V[\x15[\x15a\x08\xBFW_\x94P\x92Pa\x08\xD5\x91PPV[`\x01\x94P\x92Pa\x08\xD5\x91PPV[_\x94P\x92PPP[\x93P\x93\x91PPV[``_`D\x83Q\x10\x15a\t\x02WPP`@\x80Q` \x81\x01\x90\x91R_\x80\x82R\x90\x92\x90\x91PV[_a\t\x0E\x84` \x01Q\x90V[\x90Pc\x07\xB9\xE43`\xE5\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\tMW`\x04\x84\x01\x93P\x83\x80` \x01\x90Q\x81\x01\x90a\tB\x91\x90a\x0B\x18V[\x94`\x01\x94P\x92PPPV[_`@Q\x80` \x01`@R\x80_\x81RP\x90\x92P\x92PP\x91P\x91V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x07\x8BW__\xFD[___``\x84\x86\x03\x12\x15a\t\x8EW__\xFD[\x835a\t\x99\x81a\thV[\x92P` \x84\x015a\t\xA9\x81a\thV[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[_` \x82\x84\x03\x12\x15a\t\xCAW__\xFD[\x815a\t\xD5\x81a\thV[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\t\xECW__\xFD[\x81Qa\t\xD5\x81a\thV[` \x80\x82R`\n\x90\x82\x01Ri!\xA7\xA7*)'\xA6&\"\xA9`\xB1\x1B`@\x82\x01R``\x01\x90V[_` \x82\x84\x03\x12\x15a\n+W__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\nBW__\xFD[\x81Q\x80\x15\x15\x81\x14a\t\xD5W__\xFD[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x83\x16\x81R`@` \x82\x01\x81\x90R_\x90a\x05\x8F\x90\x83\x01\x84a\nQV[\x81\x81\x03\x81\x81\x11\x15a\x02\xBAWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[`@\x81R_a\n\xD3`@\x83\x01\x85a\nQV[\x82\x81\x03` \x84\x01Ra\n\xE5\x81\x85a\nQV[\x95\x94PPPPPV[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x0B(W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B>W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0BNW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0BhWa\x0Bha\x0B\x04V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0B\x97Wa\x0B\x97a\x0B\x04V[`@R\x81\x81R\x82\x82\x01` \x01\x86\x10\x15a\x0B\xAEW__\xFD[\x81` \x84\x01` \x83\x01^_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV\xFE\xA2dipfsX\"\x12 \xCD(\xAEe\xAC7\xBA\xA7\x81\x9D\x8Ad\xD9{\xDA}L\xA3\xD6\xB2\xB5^\x8B\x86u\x7F\xCDM/\x1B\x0EXdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405260043610610071575f3560e01c8063523fba7f1161004c578063523fba7f14610174578063660d0d671461019f5780638c1b5fde146101d2578063eb40133f146101f1575f5ffd5b8063078d3b79146100d8578063352f9aed146100f75780634a4a7b0414610129575f5ffd5b366100d4575f6100a07f0000000000000000000000000000000000000000000000000000000000000000610210565b9050336001600160a01b038216146100d25760405163738d28df60e11b81523360048201526024015b60405180910390fd5b005b5f5ffd5b3480156100e3575f5ffd5b506100d26100f236600461097c565b6102c0565b348015610102575f5ffd5b506101166101113660046109ba565b610320565b6040519081526020015b60405180910390f35b348015610134575f5ffd5b5061015c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610120565b34801561017f575f5ffd5b5061011661018e3660046109ba565b5f6020819052908152604090205481565b3480156101aa575f5ffd5b5061015c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101dd575f5ffd5b506101166101ec3660046109ba565b61033c565b3480156101fc575f5ffd5b5061011661020b3660046109ba565b610358565b5f816001600160a01b03166321f8a7216040516020016102479060208082526003908201526215d39560ea1b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161027b91815260200190565b602060405180830381865afa158015610296573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102ba91906109dc565b92915050565b6103106040516020016102d2906109f7565b604051602081830303815290604052805190602001206040518060400160405280600a81526020016921a7a72a2927a62622a960b11b8152506103f5565b61031b8383836104a7565b505050565b5f6103336040516020016102d2906109f7565b6102ba826104ef565b5f61034f6040516020016102d2906109f7565b6102ba82610597565b5f61036b6040516020016102d2906109f7565b6040516370a0823160e01b81523060048201525f906001600160a01b038416906370a0823190602401602060405180830381865afa1580156103af573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103d39190610a1b565b6001600160a01b0384165f908152602081905260409020819055915050919050565b60405163ac4ab3fb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac4ab3fb90604401602060405180830381865afa15801561045e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104829190610a32565b6104a357338160405163a35b150b60e01b81526004016100c9929190610a7f565b5050565b306001600160a01b038316036104db57604051637387c8a960e11b81526001600160a01b03831660048201526024016100c9565b6104e6838383610637565b61031b836106e3565b6001600160a01b0381165f818152602081905260408082205490516370a0823160e01b8152306004820152919290918391906370a0823190602401602060405180830381865afa158015610545573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105699190610a1b565b6001600160a01b0385165f908152602081905260409020819055905061058f8282610aa2565b949350505050565b6001600160a01b0381165f818152602081905260408082205490516370a0823160e01b8152306004820152919290918391906370a0823190602401602060405180830381865afa1580156105ed573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106119190610a1b565b6001600160a01b0385165f908152602081905260409020819055905061058f8183610aa2565b805f0361064357505050565b61064c82610764565b5f5f61065985858561078e565b91509150811561066a575050505050565b5f610674826108dd565b5090507fc9f14d9a0a9b46470c7c0b6c508f8283abaab7f795f153953c58cd4250824dae81836040516106a8929190610ac1565b60405180910390a160405163012f3b8f60e71b81526001600160a01b03808816600483015286166024820152604481018590526064016100c9565b6040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa158015610725573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107499190610a1b565b6001600160a01b039091165f90815260208190526040902055565b6001600160a01b03811661078b5760405163d551823d60e01b815260040160405180910390fd5b50565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291515f926060929184918291908916906107f0908590610aee565b5f604051808303815f865af19150503d805f8114610829576040519150601f19603f3d011682016040523d82523d5f602084013e61082e565b606091505b509150915081156108cd5780515f0361088c575f886001600160a01b03163b1161088c575f6040518060400160405280601481526020017310d85b1b081d1bc81b9bdb8b58dbdb9d1c9858dd60621b815250945094505050506108d5565b5f81511180156108ad5750808060200190518101906108ab9190610a32565b155b156108bf575f945092506108d5915050565b6001945092506108d5915050565b5f9450925050505b935093915050565b60605f60448351101561090257505060408051602081019091525f8082529092909150565b5f61090e846020015190565b90506307b9e43360e51b6001600160e01b031982160161094d57600484019350838060200190518101906109429190610b18565b946001945092505050565b5f60405180602001604052805f815250909250925050915091565b6001600160a01b038116811461078b575f5ffd5b5f5f5f6060848603121561098e575f5ffd5b833561099981610968565b925060208401356109a981610968565b929592945050506040919091013590565b5f602082840312156109ca575f5ffd5b81356109d581610968565b9392505050565b5f602082840312156109ec575f5ffd5b81516109d581610968565b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b5f60208284031215610a2b575f5ffd5b5051919050565b5f60208284031215610a42575f5ffd5b815180151581146109d5575f5ffd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03831681526040602082018190525f9061058f90830184610a51565b818103818111156102ba57634e487b7160e01b5f52601160045260245ffd5b604081525f610ad36040830185610a51565b8281036020840152610ae58185610a51565b95945050505050565b5f82518060208501845e5f920191825250919050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610b28575f5ffd5b815167ffffffffffffffff811115610b3e575f5ffd5b8201601f81018413610b4e575f5ffd5b805167ffffffffffffffff811115610b6857610b68610b04565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610b9757610b97610b04565b604052818152828201602001861015610bae575f5ffd5b8160208401602083015e5f9181016020019190915294935050505056fea2646970667358221220cd28ae65ac37baa7819d8a64d97bda7d4ca3d6b2b55e8b86757fcd4d2f1b0e5864736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0qW_5`\xE0\x1C\x80cR?\xBA\x7F\x11a\0LW\x80cR?\xBA\x7F\x14a\x01tW\x80cf\r\rg\x14a\x01\x9FW\x80c\x8C\x1B_\xDE\x14a\x01\xD2W\x80c\xEB@\x13?\x14a\x01\xF1W__\xFD[\x80c\x07\x8D;y\x14a\0\xD8W\x80c5/\x9A\xED\x14a\0\xF7W\x80cJJ{\x04\x14a\x01)W__\xFD[6a\0\xD4W_a\0\xA0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x02\x10V[\x90P3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14a\0\xD2W`@Qcs\x8D(\xDF`\xE1\x1B\x81R3`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[\0[__\xFD[4\x80\x15a\0\xE3W__\xFD[Pa\0\xD2a\0\xF26`\x04a\t|V[a\x02\xC0V[4\x80\x15a\x01\x02W__\xFD[Pa\x01\x16a\x01\x116`\x04a\t\xBAV[a\x03 V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x014W__\xFD[Pa\x01\\\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01 V[4\x80\x15a\x01\x7FW__\xFD[Pa\x01\x16a\x01\x8E6`\x04a\t\xBAV[_` \x81\x90R\x90\x81R`@\x90 T\x81V[4\x80\x15a\x01\xAAW__\xFD[Pa\x01\\\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[4\x80\x15a\x01\xDDW__\xFD[Pa\x01\x16a\x01\xEC6`\x04a\t\xBAV[a\x03<V[4\x80\x15a\x01\xFCW__\xFD[Pa\x01\x16a\x02\x0B6`\x04a\t\xBAV[a\x03XV[_\x81`\x01`\x01`\xA0\x1B\x03\x16c!\xF8\xA7!`@Q` \x01a\x02G\x90` \x80\x82R`\x03\x90\x82\x01Rb\x15\xD3\x95`\xEA\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02{\x91\x81R` \x01\x90V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\x96W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xBA\x91\x90a\t\xDCV[\x92\x91PPV[a\x03\x10`@Q` \x01a\x02\xD2\x90a\t\xF7V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q\x80`@\x01`@R\x80`\n\x81R` \x01i!\xA7\xA7*)'\xA6&\"\xA9`\xB1\x1B\x81RPa\x03\xF5V[a\x03\x1B\x83\x83\x83a\x04\xA7V[PPPV[_a\x033`@Q` \x01a\x02\xD2\x90a\t\xF7V[a\x02\xBA\x82a\x04\xEFV[_a\x03O`@Q` \x01a\x02\xD2\x90a\t\xF7V[a\x02\xBA\x82a\x05\x97V[_a\x03k`@Q` \x01a\x02\xD2\x90a\t\xF7V[`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R_\x90`\x01`\x01`\xA0\x1B\x03\x84\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xAFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xD3\x91\x90a\n\x1BV[`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R` \x81\x90R`@\x90 \x81\x90U\x91PP\x91\x90PV[`@Qc\xACJ\xB3\xFB`\xE0\x1B\x81R3`\x04\x82\x01R`$\x81\x01\x83\x90R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x01`\x01`\xA0\x1B\x03\x16\x90c\xACJ\xB3\xFB\x90`D\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04^W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x82\x91\x90a\n2V[a\x04\xA3W3\x81`@Qc\xA3[\x15\x0B`\xE0\x1B\x81R`\x04\x01a\0\xC9\x92\x91\x90a\n\x7FV[PPV[0`\x01`\x01`\xA0\x1B\x03\x83\x16\x03a\x04\xDBW`@Qcs\x87\xC8\xA9`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x83\x16`\x04\x82\x01R`$\x01a\0\xC9V[a\x04\xE6\x83\x83\x83a\x067V[a\x03\x1B\x83a\x06\xE3V[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x81\x81R` \x81\x90R`@\x80\x82 T\x90Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x91\x92\x90\x91\x83\x91\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05i\x91\x90a\n\x1BV[`\x01`\x01`\xA0\x1B\x03\x85\x16_\x90\x81R` \x81\x90R`@\x90 \x81\x90U\x90Pa\x05\x8F\x82\x82a\n\xA2V[\x94\x93PPPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x81\x81R` \x81\x90R`@\x80\x82 T\x90Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R\x91\x92\x90\x91\x83\x91\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xEDW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\x11\x91\x90a\n\x1BV[`\x01`\x01`\xA0\x1B\x03\x85\x16_\x90\x81R` \x81\x90R`@\x90 \x81\x90U\x90Pa\x05\x8F\x81\x83a\n\xA2V[\x80_\x03a\x06CWPPPV[a\x06L\x82a\x07dV[__a\x06Y\x85\x85\x85a\x07\x8EV[\x91P\x91P\x81\x15a\x06jWPPPPPV[_a\x06t\x82a\x08\xDDV[P\x90P\x7F\xC9\xF1M\x9A\n\x9BFG\x0C|\x0BlP\x8F\x82\x83\xAB\xAA\xB7\xF7\x95\xF1S\x95<X\xCDBP\x82M\xAE\x81\x83`@Qa\x06\xA8\x92\x91\x90a\n\xC1V[`@Q\x80\x91\x03\x90\xA1`@Qc\x01/;\x8F`\xE7\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x80\x88\x16`\x04\x83\x01R\x86\x16`$\x82\x01R`D\x81\x01\x85\x90R`d\x01a\0\xC9V[`@Qcp\xA0\x821`\xE0\x1B\x81R0`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x82\x16\x90cp\xA0\x821\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07%W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07I\x91\x90a\n\x1BV[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16_\x90\x81R` \x81\x90R`@\x90 UV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x07\x8BW`@Qc\xD5Q\x82=`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`$\x83\x01R`D\x80\x83\x01\x85\x90R\x83Q\x80\x84\x03\x90\x91\x01\x81R`d\x90\x92\x01\x83R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xA9\x05\x9C\xBB`\xE0\x1B\x17\x90R\x91Q_\x92``\x92\x91\x84\x91\x82\x91\x90\x89\x16\x90a\x07\xF0\x90\x85\x90a\n\xEEV[_`@Q\x80\x83\x03\x81_\x86Z\xF1\x91PP=\x80_\x81\x14a\x08)W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x08.V[``\x91P[P\x91P\x91P\x81\x15a\x08\xCDW\x80Q_\x03a\x08\x8CW_\x88`\x01`\x01`\xA0\x1B\x03\x16;\x11a\x08\x8CW_`@Q\x80`@\x01`@R\x80`\x14\x81R` \x01s\x10\xD8[\x1B\x08\x1D\x1B\xC8\x1B\x9B\xDB\x8BX\xDB\xDB\x9D\x1C\x98X\xDD`b\x1B\x81RP\x94P\x94PPPPa\x08\xD5V[_\x81Q\x11\x80\x15a\x08\xADWP\x80\x80` \x01\x90Q\x81\x01\x90a\x08\xAB\x91\x90a\n2V[\x15[\x15a\x08\xBFW_\x94P\x92Pa\x08\xD5\x91PPV[`\x01\x94P\x92Pa\x08\xD5\x91PPV[_\x94P\x92PPP[\x93P\x93\x91PPV[``_`D\x83Q\x10\x15a\t\x02WPP`@\x80Q` \x81\x01\x90\x91R_\x80\x82R\x90\x92\x90\x91PV[_a\t\x0E\x84` \x01Q\x90V[\x90Pc\x07\xB9\xE43`\xE5\x1B`\x01`\x01`\xE0\x1B\x03\x19\x82\x16\x01a\tMW`\x04\x84\x01\x93P\x83\x80` \x01\x90Q\x81\x01\x90a\tB\x91\x90a\x0B\x18V[\x94`\x01\x94P\x92PPPV[_`@Q\x80` \x01`@R\x80_\x81RP\x90\x92P\x92PP\x91P\x91V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x07\x8BW__\xFD[___``\x84\x86\x03\x12\x15a\t\x8EW__\xFD[\x835a\t\x99\x81a\thV[\x92P` \x84\x015a\t\xA9\x81a\thV[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[_` \x82\x84\x03\x12\x15a\t\xCAW__\xFD[\x815a\t\xD5\x81a\thV[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\t\xECW__\xFD[\x81Qa\t\xD5\x81a\thV[` \x80\x82R`\n\x90\x82\x01Ri!\xA7\xA7*)'\xA6&\"\xA9`\xB1\x1B`@\x82\x01R``\x01\x90V[_` \x82\x84\x03\x12\x15a\n+W__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\nBW__\xFD[\x81Q\x80\x15\x15\x81\x14a\t\xD5W__\xFD[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x83\x16\x81R`@` \x82\x01\x81\x90R_\x90a\x05\x8F\x90\x83\x01\x84a\nQV[\x81\x81\x03\x81\x81\x11\x15a\x02\xBAWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[`@\x81R_a\n\xD3`@\x83\x01\x85a\nQV[\x82\x81\x03` \x84\x01Ra\n\xE5\x81\x85a\nQV[\x95\x94PPPPPV[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x0B(W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B>W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0BNW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0BhWa\x0Bha\x0B\x04V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0B\x97Wa\x0B\x97a\x0B\x04V[`@R\x81\x81R\x82\x82\x01` \x01\x86\x10\x15a\x0B\xAEW__\xFD[\x81` \x84\x01` \x83\x01^_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV\xFE\xA2dipfsX\"\x12 \xCD(\xAEe\xAC7\xBA\xA7\x81\x9D\x8Ad\xD9{\xDA}L\xA3\xD6\xB2\xB5^\x8B\x86u\x7F\xCDM/\x1B\x0EXdsolcC\0\x08\x1C\x003",
    );
    /**Custom error with signature `EmptyReceiver()` and selector `0xd551823d`.
```solidity
error EmptyReceiver();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyReceiver {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyReceiver> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyReceiver) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyReceiver {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyReceiver {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyReceiver()";
            const SELECTOR: [u8; 4] = [213u8, 81u8, 130u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidNativeTokenSender(address)` and selector `0xe71a51be`.
```solidity
error InvalidNativeTokenSender(address msgSender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidNativeTokenSender {
        pub msgSender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidNativeTokenSender>
        for UnderlyingRustTuple<'_> {
            fn from(value: InvalidNativeTokenSender) -> Self {
                (value.msgSender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InvalidNativeTokenSender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { msgSender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidNativeTokenSender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidNativeTokenSender(address)";
            const SELECTOR: [u8; 4] = [231u8, 26u8, 81u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.msgSender,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `SelfTransferNotSupported(address)` and selector `0xe70f9152`.
```solidity
error SelfTransferNotSupported(address receiver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SelfTransferNotSupported {
        pub receiver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SelfTransferNotSupported>
        for UnderlyingRustTuple<'_> {
            fn from(value: SelfTransferNotSupported) -> Self {
                (value.receiver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SelfTransferNotSupported {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { receiver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SelfTransferNotSupported {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SelfTransferNotSupported(address)";
            const SELECTOR: [u8; 4] = [231u8, 15u8, 145u8, 82u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.receiver,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TokenTransferError(address,address,uint256)` and selector `0x979dc780`.
```solidity
error TokenTransferError(address token, address receiver, uint256 amount);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TokenTransferError {
        pub token: alloy::sol_types::private::Address,
        pub receiver: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TokenTransferError> for UnderlyingRustTuple<'_> {
            fn from(value: TokenTransferError) -> Self {
                (value.token, value.receiver, value.amount)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TokenTransferError {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    token: tuple.0,
                    receiver: tuple.1,
                    amount: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TokenTransferError {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TokenTransferError(address,address,uint256)";
            const SELECTOR: [u8; 4] = [151u8, 157u8, 199u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.receiver,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
        }
    };
    /**Custom error with signature `Unauthorized(address,string)` and selector `0xa35b150b`.
```solidity
error Unauthorized(address msgSender, string role);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Unauthorized {
        pub msgSender: alloy::sol_types::private::Address,
        pub role: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::String,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::String,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Unauthorized> for UnderlyingRustTuple<'_> {
            fn from(value: Unauthorized) -> Self {
                (value.msgSender, value.role)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Unauthorized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    msgSender: tuple.0,
                    role: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for Unauthorized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "Unauthorized(address,string)";
            const SELECTOR: [u8; 4] = [163u8, 91u8, 21u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.msgSender,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.role,
                    ),
                )
            }
        }
    };
    /**Event with signature `TokenTransferReverted(string,bytes)` and selector `0xc9f14d9a0a9b46470c7c0b6c508f8283abaab7f795f153953c58cd4250824dae`.
```solidity
event TokenTransferReverted(string reason, bytes returndata);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TokenTransferReverted {
        #[allow(missing_docs)]
        pub reason: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub returndata: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TokenTransferReverted {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Bytes,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "TokenTransferReverted(string,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                201u8,
                241u8,
                77u8,
                154u8,
                10u8,
                155u8,
                70u8,
                71u8,
                12u8,
                124u8,
                11u8,
                108u8,
                80u8,
                143u8,
                130u8,
                131u8,
                171u8,
                170u8,
                183u8,
                247u8,
                149u8,
                241u8,
                83u8,
                149u8,
                60u8,
                88u8,
                205u8,
                66u8,
                80u8,
                130u8,
                77u8,
                174u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    reason: data.0,
                    returndata: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.reason,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.returndata,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TokenTransferReverted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TokenTransferReverted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TokenTransferReverted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _roleStore, address _dataStore);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub _roleStore: alloy::sol_types::private::Address,
        pub _dataStore: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._roleStore, value._dataStore)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _roleStore: tuple.0,
                        _dataStore: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._roleStore,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._dataStore,
                    ),
                )
            }
        }
    };
    /**Function with signature `dataStore()` and selector `0x660d0d67`.
```solidity
function dataStore() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dataStoreCall {}
    ///Container type for the return parameters of the [`dataStore()`](dataStoreCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dataStoreReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dataStoreCall> for UnderlyingRustTuple<'_> {
                fn from(value: dataStoreCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dataStoreCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dataStoreReturn> for UnderlyingRustTuple<'_> {
                fn from(value: dataStoreReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dataStoreReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for dataStoreCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = dataStoreReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "dataStore()";
            const SELECTOR: [u8; 4] = [102u8, 13u8, 13u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `recordTransferIn(address)` and selector `0x352f9aed`.
```solidity
function recordTransferIn(address token) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recordTransferInCall {
        pub token: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`recordTransferIn(address)`](recordTransferInCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recordTransferInReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recordTransferInCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: recordTransferInCall) -> Self {
                    (value.token,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for recordTransferInCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { token: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recordTransferInReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: recordTransferInReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for recordTransferInReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for recordTransferInCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = recordTransferInReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "recordTransferIn(address)";
            const SELECTOR: [u8; 4] = [53u8, 47u8, 154u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `recordTransferOut(address)` and selector `0x8c1b5fde`.
```solidity
function recordTransferOut(address token) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recordTransferOutCall {
        pub token: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`recordTransferOut(address)`](recordTransferOutCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recordTransferOutReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recordTransferOutCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: recordTransferOutCall) -> Self {
                    (value.token,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for recordTransferOutCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { token: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recordTransferOutReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: recordTransferOutReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for recordTransferOutReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for recordTransferOutCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = recordTransferOutReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "recordTransferOut(address)";
            const SELECTOR: [u8; 4] = [140u8, 27u8, 95u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `roleStore()` and selector `0x4a4a7b04`.
```solidity
function roleStore() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct roleStoreCall {}
    ///Container type for the return parameters of the [`roleStore()`](roleStoreCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct roleStoreReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<roleStoreCall> for UnderlyingRustTuple<'_> {
                fn from(value: roleStoreCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for roleStoreCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<roleStoreReturn> for UnderlyingRustTuple<'_> {
                fn from(value: roleStoreReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for roleStoreReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for roleStoreCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = roleStoreReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "roleStore()";
            const SELECTOR: [u8; 4] = [74u8, 74u8, 123u8, 4u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `syncTokenBalance(address)` and selector `0xeb40133f`.
```solidity
function syncTokenBalance(address token) external returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syncTokenBalanceCall {
        pub token: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`syncTokenBalance(address)`](syncTokenBalanceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syncTokenBalanceReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syncTokenBalanceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: syncTokenBalanceCall) -> Self {
                    (value.token,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for syncTokenBalanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { token: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syncTokenBalanceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: syncTokenBalanceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for syncTokenBalanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for syncTokenBalanceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = syncTokenBalanceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "syncTokenBalance(address)";
            const SELECTOR: [u8; 4] = [235u8, 64u8, 19u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `tokenBalances(address)` and selector `0x523fba7f`.
```solidity
function tokenBalances(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenBalancesCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`tokenBalances(address)`](tokenBalancesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenBalancesReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenBalancesCall> for UnderlyingRustTuple<'_> {
                fn from(value: tokenBalancesCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenBalancesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenBalancesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: tokenBalancesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenBalancesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tokenBalancesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = tokenBalancesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tokenBalances(address)";
            const SELECTOR: [u8; 4] = [82u8, 63u8, 186u8, 127u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOut(address,address,uint256)` and selector `0x078d3b79`.
```solidity
function transferOut(address token, address receiver, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOutCall {
        pub token: alloy::sol_types::private::Address,
        pub receiver: alloy::sol_types::private::Address,
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transferOut(address,address,uint256)`](transferOutCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOutReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOutCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferOutCall) -> Self {
                    (value.token, value.receiver, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferOutCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        receiver: tuple.1,
                        amount: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOutReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferOutReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferOutReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOutCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOutReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOut(address,address,uint256)";
            const SELECTOR: [u8; 4] = [7u8, 141u8, 59u8, 121u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.receiver,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`StrictBank`](self) function calls.
    pub enum StrictBankCalls {
        dataStore(dataStoreCall),
        recordTransferIn(recordTransferInCall),
        recordTransferOut(recordTransferOutCall),
        roleStore(roleStoreCall),
        syncTokenBalance(syncTokenBalanceCall),
        tokenBalances(tokenBalancesCall),
        transferOut(transferOutCall),
    }
    #[automatically_derived]
    impl StrictBankCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 141u8, 59u8, 121u8],
            [53u8, 47u8, 154u8, 237u8],
            [74u8, 74u8, 123u8, 4u8],
            [82u8, 63u8, 186u8, 127u8],
            [102u8, 13u8, 13u8, 103u8],
            [140u8, 27u8, 95u8, 222u8],
            [235u8, 64u8, 19u8, 63u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for StrictBankCalls {
        const NAME: &'static str = "StrictBankCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::dataStore(_) => {
                    <dataStoreCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::recordTransferIn(_) => {
                    <recordTransferInCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::recordTransferOut(_) => {
                    <recordTransferOutCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::roleStore(_) => {
                    <roleStoreCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::syncTokenBalance(_) => {
                    <syncTokenBalanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::tokenBalances(_) => {
                    <tokenBalancesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOut(_) => {
                    <transferOutCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<StrictBankCalls>] = &[
                {
                    fn transferOut(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrictBankCalls> {
                        <transferOutCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrictBankCalls::transferOut)
                    }
                    transferOut
                },
                {
                    fn recordTransferIn(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrictBankCalls> {
                        <recordTransferInCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrictBankCalls::recordTransferIn)
                    }
                    recordTransferIn
                },
                {
                    fn roleStore(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrictBankCalls> {
                        <roleStoreCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrictBankCalls::roleStore)
                    }
                    roleStore
                },
                {
                    fn tokenBalances(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrictBankCalls> {
                        <tokenBalancesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrictBankCalls::tokenBalances)
                    }
                    tokenBalances
                },
                {
                    fn dataStore(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrictBankCalls> {
                        <dataStoreCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrictBankCalls::dataStore)
                    }
                    dataStore
                },
                {
                    fn recordTransferOut(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrictBankCalls> {
                        <recordTransferOutCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrictBankCalls::recordTransferOut)
                    }
                    recordTransferOut
                },
                {
                    fn syncTokenBalance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrictBankCalls> {
                        <syncTokenBalanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrictBankCalls::syncTokenBalance)
                    }
                    syncTokenBalance
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::dataStore(inner) => {
                    <dataStoreCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::recordTransferIn(inner) => {
                    <recordTransferInCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::recordTransferOut(inner) => {
                    <recordTransferOutCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::roleStore(inner) => {
                    <roleStoreCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::syncTokenBalance(inner) => {
                    <syncTokenBalanceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::tokenBalances(inner) => {
                    <tokenBalancesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOut(inner) => {
                    <transferOutCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::dataStore(inner) => {
                    <dataStoreCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::recordTransferIn(inner) => {
                    <recordTransferInCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::recordTransferOut(inner) => {
                    <recordTransferOutCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::roleStore(inner) => {
                    <roleStoreCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::syncTokenBalance(inner) => {
                    <syncTokenBalanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::tokenBalances(inner) => {
                    <tokenBalancesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOut(inner) => {
                    <transferOutCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`StrictBank`](self) custom errors.
    pub enum StrictBankErrors {
        EmptyReceiver(EmptyReceiver),
        InvalidNativeTokenSender(InvalidNativeTokenSender),
        SelfTransferNotSupported(SelfTransferNotSupported),
        TokenTransferError(TokenTransferError),
        Unauthorized(Unauthorized),
    }
    #[automatically_derived]
    impl StrictBankErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [151u8, 157u8, 199u8, 128u8],
            [163u8, 91u8, 21u8, 11u8],
            [213u8, 81u8, 130u8, 61u8],
            [231u8, 15u8, 145u8, 82u8],
            [231u8, 26u8, 81u8, 190u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for StrictBankErrors {
        const NAME: &'static str = "StrictBankErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::EmptyReceiver(_) => {
                    <EmptyReceiver as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidNativeTokenSender(_) => {
                    <InvalidNativeTokenSender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SelfTransferNotSupported(_) => {
                    <SelfTransferNotSupported as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TokenTransferError(_) => {
                    <TokenTransferError as alloy_sol_types::SolError>::SELECTOR
                }
                Self::Unauthorized(_) => {
                    <Unauthorized as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<StrictBankErrors>] = &[
                {
                    fn TokenTransferError(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrictBankErrors> {
                        <TokenTransferError as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrictBankErrors::TokenTransferError)
                    }
                    TokenTransferError
                },
                {
                    fn Unauthorized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrictBankErrors> {
                        <Unauthorized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrictBankErrors::Unauthorized)
                    }
                    Unauthorized
                },
                {
                    fn EmptyReceiver(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrictBankErrors> {
                        <EmptyReceiver as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrictBankErrors::EmptyReceiver)
                    }
                    EmptyReceiver
                },
                {
                    fn SelfTransferNotSupported(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrictBankErrors> {
                        <SelfTransferNotSupported as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrictBankErrors::SelfTransferNotSupported)
                    }
                    SelfTransferNotSupported
                },
                {
                    fn InvalidNativeTokenSender(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StrictBankErrors> {
                        <InvalidNativeTokenSender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StrictBankErrors::InvalidNativeTokenSender)
                    }
                    InvalidNativeTokenSender
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::EmptyReceiver(inner) => {
                    <EmptyReceiver as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidNativeTokenSender(inner) => {
                    <InvalidNativeTokenSender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SelfTransferNotSupported(inner) => {
                    <SelfTransferNotSupported as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TokenTransferError(inner) => {
                    <TokenTransferError as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::Unauthorized(inner) => {
                    <Unauthorized as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::EmptyReceiver(inner) => {
                    <EmptyReceiver as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidNativeTokenSender(inner) => {
                    <InvalidNativeTokenSender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SelfTransferNotSupported(inner) => {
                    <SelfTransferNotSupported as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TokenTransferError(inner) => {
                    <TokenTransferError as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::Unauthorized(inner) => {
                    <Unauthorized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`StrictBank`](self) events.
    pub enum StrictBankEvents {
        TokenTransferReverted(TokenTransferReverted),
    }
    #[automatically_derived]
    impl StrictBankEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                201u8,
                241u8,
                77u8,
                154u8,
                10u8,
                155u8,
                70u8,
                71u8,
                12u8,
                124u8,
                11u8,
                108u8,
                80u8,
                143u8,
                130u8,
                131u8,
                171u8,
                170u8,
                183u8,
                247u8,
                149u8,
                241u8,
                83u8,
                149u8,
                60u8,
                88u8,
                205u8,
                66u8,
                80u8,
                130u8,
                77u8,
                174u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for StrictBankEvents {
        const NAME: &'static str = "StrictBankEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <TokenTransferReverted as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TokenTransferReverted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TokenTransferReverted)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for StrictBankEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::TokenTransferReverted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::TokenTransferReverted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`StrictBank`](self) contract instance.

See the [wrapper's documentation](`StrictBankInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> StrictBankInstance<T, P, N> {
        StrictBankInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _roleStore: alloy::sol_types::private::Address,
        _dataStore: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<StrictBankInstance<T, P, N>>,
    > {
        StrictBankInstance::<T, P, N>::deploy(provider, _roleStore, _dataStore)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _roleStore: alloy::sol_types::private::Address,
        _dataStore: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        StrictBankInstance::<T, P, N>::deploy_builder(provider, _roleStore, _dataStore)
    }
    /**A [`StrictBank`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`StrictBank`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct StrictBankInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for StrictBankInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("StrictBankInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StrictBankInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`StrictBank`](self) contract instance.

See the [wrapper's documentation](`StrictBankInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _roleStore: alloy::sol_types::private::Address,
            _dataStore: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<StrictBankInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _roleStore, _dataStore);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _roleStore: alloy::sol_types::private::Address,
            _dataStore: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _roleStore,
                            _dataStore,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> StrictBankInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> StrictBankInstance<T, P, N> {
            StrictBankInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StrictBankInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`dataStore`] function.
        pub fn dataStore(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, dataStoreCall, N> {
            self.call_builder(&dataStoreCall {})
        }
        ///Creates a new call builder for the [`recordTransferIn`] function.
        pub fn recordTransferIn(
            &self,
            token: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, recordTransferInCall, N> {
            self.call_builder(&recordTransferInCall { token })
        }
        ///Creates a new call builder for the [`recordTransferOut`] function.
        pub fn recordTransferOut(
            &self,
            token: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, recordTransferOutCall, N> {
            self.call_builder(&recordTransferOutCall { token })
        }
        ///Creates a new call builder for the [`roleStore`] function.
        pub fn roleStore(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, roleStoreCall, N> {
            self.call_builder(&roleStoreCall {})
        }
        ///Creates a new call builder for the [`syncTokenBalance`] function.
        pub fn syncTokenBalance(
            &self,
            token: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, syncTokenBalanceCall, N> {
            self.call_builder(&syncTokenBalanceCall { token })
        }
        ///Creates a new call builder for the [`tokenBalances`] function.
        pub fn tokenBalances(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, tokenBalancesCall, N> {
            self.call_builder(&tokenBalancesCall { _0 })
        }
        ///Creates a new call builder for the [`transferOut`] function.
        pub fn transferOut(
            &self,
            token: alloy::sol_types::private::Address,
            receiver: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOutCall, N> {
            self.call_builder(
                &transferOutCall {
                    token,
                    receiver,
                    amount,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StrictBankInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`TokenTransferReverted`] event.
        pub fn TokenTransferReverted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TokenTransferReverted, N> {
            self.event_filter::<TokenTransferReverted>()
        }
    }
}

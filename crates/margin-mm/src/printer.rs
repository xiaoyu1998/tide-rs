/**

Generated by the following Solidity interface...
```solidity
interface Printer {
    function toString(address account) external pure returns (string memory);
    function toString(uint256 value) external pure returns (string memory);
    function toString(bytes memory data) external pure returns (string memory);
    function toString(bytes32 value) external pure returns (string memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "toString",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "toString",
    "inputs": [
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "toString",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "toString",
    "inputs": [
      {
        "name": "value",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod Printer {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6104cf610034600b8282823980515f1a607314602857634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610055575f3560e01c806356ca623e146100595780636900a3ae1461008257806371aad10d14610095578063b11a19e814610082575b5f5ffd5b61006c610067366004610307565b6100a8565b6040516100799190610334565b60405180910390f35b61006c610090366004610369565b6100e7565b61006c6100a3366004610394565b6100ff565b604051606082811b6bffffffffffffffffffffffff19166020830152906100e1906034015b6040516020818303038152906040526100ff565b92915050565b60606100e1826040516020016100cd91815260200190565b60408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151606091905f9061013990600261045b565b610144906002610472565b67ffffffffffffffff81111561015c5761015c610380565b6040519080825280601f01601f191660200182016040528015610186576020820181803683370190505b509050600360fc1b815f815181106101a0576101a0610485565b60200101906001600160f81b03191690815f1a905350600f60fb1b816001815181106101ce576101ce610485565b60200101906001600160f81b03191690815f1a9053505f5b84518110156102ff5782600486838151811061020457610204610485565b016020015182516001600160f81b031990911690911c60f81c90811061022c5761022c610485565b01602001516001600160f81b0319168261024783600261045b565b610252906002610472565b8151811061026257610262610485565b60200101906001600160f81b03191690815f1a9053508285828151811061028b5761028b610485565b602091010151815160f89190911c600f169081106102ab576102ab610485565b01602001516001600160f81b031916826102c683600261045b565b6102d1906003610472565b815181106102e1576102e1610485565b60200101906001600160f81b03191690815f1a9053506001016101e6565b509392505050565b5f60208284031215610317575f5ffd5b81356001600160a01b038116811461032d575f5ffd5b9392505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f60208284031215610379575f5ffd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b5f602082840312156103a4575f5ffd5b813567ffffffffffffffff8111156103ba575f5ffd5b8201601f810184136103ca575f5ffd5b803567ffffffffffffffff8111156103e4576103e4610380565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561041357610413610380565b60405281815282820160200186101561042a575f5ffd5b816020840160208301375f91810160200191909152949350505050565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176100e1576100e1610447565b808201808211156100e1576100e1610447565b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220330c884db98ed80fecd240ee46297c1cae818ca46c76e730cc807b840ac3570364736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x04\xCFa\x004`\x0B\x82\x82\x829\x80Q_\x1A`s\x14`(WcNH{q`\xE0\x1B_R_`\x04R`$_\xFD[0_R`s\x81S\x82\x81\xF3\xFEs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0UW_5`\xE0\x1C\x80cV\xCAb>\x14a\0YW\x80ci\0\xA3\xAE\x14a\0\x82W\x80cq\xAA\xD1\r\x14a\0\x95W\x80c\xB1\x1A\x19\xE8\x14a\0\x82W[__\xFD[a\0la\0g6`\x04a\x03\x07V[a\0\xA8V[`@Qa\0y\x91\x90a\x034V[`@Q\x80\x91\x03\x90\xF3[a\0la\0\x906`\x04a\x03iV[a\0\xE7V[a\0la\0\xA36`\x04a\x03\x94V[a\0\xFFV[`@Q``\x82\x81\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x83\x01R\x90a\0\xE1\x90`4\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@Ra\0\xFFV[\x92\x91PPV[``a\0\xE1\x82`@Q` \x01a\0\xCD\x91\x81R` \x01\x90V[`@\x80Q\x80\x82\x01\x90\x91R`\x10\x81Ro\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B` \x82\x01R\x81Q``\x91\x90_\x90a\x019\x90`\x02a\x04[V[a\x01D\x90`\x02a\x04rV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\\Wa\x01\\a\x03\x80V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x01\x86W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\x03`\xFC\x1B\x81_\x81Q\x81\x10a\x01\xA0Wa\x01\xA0a\x04\x85V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`\x0F`\xFB\x1B\x81`\x01\x81Q\x81\x10a\x01\xCEWa\x01\xCEa\x04\x85V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP_[\x84Q\x81\x10\x15a\x02\xFFW\x82`\x04\x86\x83\x81Q\x81\x10a\x02\x04Wa\x02\x04a\x04\x85V[\x01` \x01Q\x82Q`\x01`\x01`\xF8\x1B\x03\x19\x90\x91\x16\x90\x91\x1C`\xF8\x1C\x90\x81\x10a\x02,Wa\x02,a\x04\x85V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x82a\x02G\x83`\x02a\x04[V[a\x02R\x90`\x02a\x04rV[\x81Q\x81\x10a\x02bWa\x02ba\x04\x85V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP\x82\x85\x82\x81Q\x81\x10a\x02\x8BWa\x02\x8Ba\x04\x85V[` \x91\x01\x01Q\x81Q`\xF8\x91\x90\x91\x1C`\x0F\x16\x90\x81\x10a\x02\xABWa\x02\xABa\x04\x85V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x82a\x02\xC6\x83`\x02a\x04[V[a\x02\xD1\x90`\x03a\x04rV[\x81Q\x81\x10a\x02\xE1Wa\x02\xE1a\x04\x85V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`\x01\x01a\x01\xE6V[P\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x03\x17W__\xFD[\x815`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03-W__\xFD[\x93\x92PPPV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x03yW__\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x03\xA4W__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xBAW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x03\xCAW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xE4Wa\x03\xE4a\x03\x80V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x04\x13Wa\x04\x13a\x03\x80V[`@R\x81\x81R\x82\x82\x01` \x01\x86\x10\x15a\x04*W__\xFD[\x81` \x84\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\0\xE1Wa\0\xE1a\x04GV[\x80\x82\x01\x80\x82\x11\x15a\0\xE1Wa\0\xE1a\x04GV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 3\x0C\x88M\xB9\x8E\xD8\x0F\xEC\xD2@\xEEF)|\x1C\xAE\x81\x8C\xA4lv\xE70\xCC\x80{\x84\n\xC3W\x03dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x7300000000000000000000000000000000000000003014608060405260043610610055575f3560e01c806356ca623e146100595780636900a3ae1461008257806371aad10d14610095578063b11a19e814610082575b5f5ffd5b61006c610067366004610307565b6100a8565b6040516100799190610334565b60405180910390f35b61006c610090366004610369565b6100e7565b61006c6100a3366004610394565b6100ff565b604051606082811b6bffffffffffffffffffffffff19166020830152906100e1906034015b6040516020818303038152906040526100ff565b92915050565b60606100e1826040516020016100cd91815260200190565b60408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151606091905f9061013990600261045b565b610144906002610472565b67ffffffffffffffff81111561015c5761015c610380565b6040519080825280601f01601f191660200182016040528015610186576020820181803683370190505b509050600360fc1b815f815181106101a0576101a0610485565b60200101906001600160f81b03191690815f1a905350600f60fb1b816001815181106101ce576101ce610485565b60200101906001600160f81b03191690815f1a9053505f5b84518110156102ff5782600486838151811061020457610204610485565b016020015182516001600160f81b031990911690911c60f81c90811061022c5761022c610485565b01602001516001600160f81b0319168261024783600261045b565b610252906002610472565b8151811061026257610262610485565b60200101906001600160f81b03191690815f1a9053508285828151811061028b5761028b610485565b602091010151815160f89190911c600f169081106102ab576102ab610485565b01602001516001600160f81b031916826102c683600261045b565b6102d1906003610472565b815181106102e1576102e1610485565b60200101906001600160f81b03191690815f1a9053506001016101e6565b509392505050565b5f60208284031215610317575f5ffd5b81356001600160a01b038116811461032d575f5ffd5b9392505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f60208284031215610379575f5ffd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b5f602082840312156103a4575f5ffd5b813567ffffffffffffffff8111156103ba575f5ffd5b8201601f810184136103ca575f5ffd5b803567ffffffffffffffff8111156103e4576103e4610380565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561041357610413610380565b60405281815282820160200186101561042a575f5ffd5b816020840160208301375f91810160200191909152949350505050565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176100e1576100e1610447565b808201808211156100e1576100e1610447565b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220330c884db98ed80fecd240ee46297c1cae818ca46c76e730cc807b840ac3570364736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0UW_5`\xE0\x1C\x80cV\xCAb>\x14a\0YW\x80ci\0\xA3\xAE\x14a\0\x82W\x80cq\xAA\xD1\r\x14a\0\x95W\x80c\xB1\x1A\x19\xE8\x14a\0\x82W[__\xFD[a\0la\0g6`\x04a\x03\x07V[a\0\xA8V[`@Qa\0y\x91\x90a\x034V[`@Q\x80\x91\x03\x90\xF3[a\0la\0\x906`\x04a\x03iV[a\0\xE7V[a\0la\0\xA36`\x04a\x03\x94V[a\0\xFFV[`@Q``\x82\x81\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x83\x01R\x90a\0\xE1\x90`4\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@Ra\0\xFFV[\x92\x91PPV[``a\0\xE1\x82`@Q` \x01a\0\xCD\x91\x81R` \x01\x90V[`@\x80Q\x80\x82\x01\x90\x91R`\x10\x81Ro\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B` \x82\x01R\x81Q``\x91\x90_\x90a\x019\x90`\x02a\x04[V[a\x01D\x90`\x02a\x04rV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\\Wa\x01\\a\x03\x80V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x01\x86W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\x03`\xFC\x1B\x81_\x81Q\x81\x10a\x01\xA0Wa\x01\xA0a\x04\x85V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`\x0F`\xFB\x1B\x81`\x01\x81Q\x81\x10a\x01\xCEWa\x01\xCEa\x04\x85V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP_[\x84Q\x81\x10\x15a\x02\xFFW\x82`\x04\x86\x83\x81Q\x81\x10a\x02\x04Wa\x02\x04a\x04\x85V[\x01` \x01Q\x82Q`\x01`\x01`\xF8\x1B\x03\x19\x90\x91\x16\x90\x91\x1C`\xF8\x1C\x90\x81\x10a\x02,Wa\x02,a\x04\x85V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x82a\x02G\x83`\x02a\x04[V[a\x02R\x90`\x02a\x04rV[\x81Q\x81\x10a\x02bWa\x02ba\x04\x85V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP\x82\x85\x82\x81Q\x81\x10a\x02\x8BWa\x02\x8Ba\x04\x85V[` \x91\x01\x01Q\x81Q`\xF8\x91\x90\x91\x1C`\x0F\x16\x90\x81\x10a\x02\xABWa\x02\xABa\x04\x85V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x82a\x02\xC6\x83`\x02a\x04[V[a\x02\xD1\x90`\x03a\x04rV[\x81Q\x81\x10a\x02\xE1Wa\x02\xE1a\x04\x85V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`\x01\x01a\x01\xE6V[P\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x03\x17W__\xFD[\x815`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03-W__\xFD[\x93\x92PPPV[` \x81R_\x82Q\x80` \x84\x01R\x80` \x85\x01`@\x85\x01^_`@\x82\x85\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x03yW__\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x03\xA4W__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xBAW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x03\xCAW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\xE4Wa\x03\xE4a\x03\x80V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x04\x13Wa\x04\x13a\x03\x80V[`@R\x81\x81R\x82\x82\x01` \x01\x86\x10\x15a\x04*W__\xFD[\x81` \x84\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\0\xE1Wa\0\xE1a\x04GV[\x80\x82\x01\x80\x82\x11\x15a\0\xE1Wa\0\xE1a\x04GV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 3\x0C\x88M\xB9\x8E\xD8\x0F\xEC\xD2@\xEEF)|\x1C\xAE\x81\x8C\xA4lv\xE70\xCC\x80{\x84\n\xC3W\x03dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `toString(address)` and selector `0x56ca623e`.
```solidity
function toString(address account) external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct toString_0Call {
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`toString(address)`](toString_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct toString_0Return {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<toString_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: toString_0Call) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for toString_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<toString_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: toString_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for toString_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for toString_0Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = toString_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "toString(address)";
            const SELECTOR: [u8; 4] = [86u8, 202u8, 98u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `toString(uint256)` and selector `0x6900a3ae`.
```solidity
function toString(uint256 value) external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct toString_1Call {
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`toString(uint256)`](toString_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct toString_1Return {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<toString_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: toString_1Call) -> Self {
                    (value.value,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for toString_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { value: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<toString_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: toString_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for toString_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for toString_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = toString_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "toString(uint256)";
            const SELECTOR: [u8; 4] = [105u8, 0u8, 163u8, 174u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `toString(bytes)` and selector `0x71aad10d`.
```solidity
function toString(bytes memory data) external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct toString_2Call {
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`toString(bytes)`](toString_2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct toString_2Return {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<toString_2Call> for UnderlyingRustTuple<'_> {
                fn from(value: toString_2Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for toString_2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<toString_2Return> for UnderlyingRustTuple<'_> {
                fn from(value: toString_2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for toString_2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for toString_2Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = toString_2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "toString(bytes)";
            const SELECTOR: [u8; 4] = [113u8, 170u8, 209u8, 13u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `toString(bytes32)` and selector `0xb11a19e8`.
```solidity
function toString(bytes32 value) external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct toString_3Call {
        pub value: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`toString(bytes32)`](toString_3Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct toString_3Return {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<toString_3Call> for UnderlyingRustTuple<'_> {
                fn from(value: toString_3Call) -> Self {
                    (value.value,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for toString_3Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { value: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<toString_3Return> for UnderlyingRustTuple<'_> {
                fn from(value: toString_3Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for toString_3Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for toString_3Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = toString_3Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "toString(bytes32)";
            const SELECTOR: [u8; 4] = [177u8, 26u8, 25u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Printer`](self) function calls.
    pub enum PrinterCalls {
        toString_0(toString_0Call),
        toString_1(toString_1Call),
        toString_2(toString_2Call),
        toString_3(toString_3Call),
    }
    #[automatically_derived]
    impl PrinterCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [86u8, 202u8, 98u8, 62u8],
            [105u8, 0u8, 163u8, 174u8],
            [113u8, 170u8, 209u8, 13u8],
            [177u8, 26u8, 25u8, 232u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for PrinterCalls {
        const NAME: &'static str = "PrinterCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::toString_0(_) => {
                    <toString_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::toString_1(_) => {
                    <toString_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::toString_2(_) => {
                    <toString_2Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::toString_3(_) => {
                    <toString_3Call as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<PrinterCalls>] = &[
                {
                    fn toString_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PrinterCalls> {
                        <toString_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PrinterCalls::toString_0)
                    }
                    toString_0
                },
                {
                    fn toString_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PrinterCalls> {
                        <toString_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PrinterCalls::toString_1)
                    }
                    toString_1
                },
                {
                    fn toString_2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PrinterCalls> {
                        <toString_2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PrinterCalls::toString_2)
                    }
                    toString_2
                },
                {
                    fn toString_3(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PrinterCalls> {
                        <toString_3Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PrinterCalls::toString_3)
                    }
                    toString_3
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::toString_0(inner) => {
                    <toString_0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::toString_1(inner) => {
                    <toString_1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::toString_2(inner) => {
                    <toString_2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::toString_3(inner) => {
                    <toString_3Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::toString_0(inner) => {
                    <toString_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::toString_1(inner) => {
                    <toString_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::toString_2(inner) => {
                    <toString_2Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::toString_3(inner) => {
                    <toString_3Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Printer`](self) contract instance.

See the [wrapper's documentation](`PrinterInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> PrinterInstance<T, P, N> {
        PrinterInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<PrinterInstance<T, P, N>>,
    > {
        PrinterInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        PrinterInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Printer`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Printer`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct PrinterInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for PrinterInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("PrinterInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > PrinterInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Printer`](self) contract instance.

See the [wrapper's documentation](`PrinterInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<PrinterInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> PrinterInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> PrinterInstance<T, P, N> {
            PrinterInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > PrinterInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`toString_0`] function.
        pub fn toString_0(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, toString_0Call, N> {
            self.call_builder(&toString_0Call { account })
        }
        ///Creates a new call builder for the [`toString_1`] function.
        pub fn toString_1(
            &self,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, toString_1Call, N> {
            self.call_builder(&toString_1Call { value })
        }
        ///Creates a new call builder for the [`toString_2`] function.
        pub fn toString_2(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, toString_2Call, N> {
            self.call_builder(&toString_2Call { data })
        }
        ///Creates a new call builder for the [`toString_3`] function.
        pub fn toString_3(
            &self,
            value: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, toString_3Call, N> {
            self.call_builder(&toString_3Call { value })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > PrinterInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}

/**

Generated by the following Solidity interface...
```solidity
interface PositionStoreUtils {
    function ACCOUNT_POSITION() external view returns (bytes32);
    function POS_ACCOUNT() external view returns (bytes32);
    function POS_ACC_LONG_AMOUNT_0() external view returns (bytes32);
    function POS_ACC_LONG_AMOUNT_1() external view returns (bytes32);
    function POS_ACC_SHORT_AMOUNT_0() external view returns (bytes32);
    function POS_ACC_SHORT_AMOUNT_1() external view returns (bytes32);
    function POS_BORROWINDEX_0() external view returns (bytes32);
    function POS_BORROWINDEX_1() external view returns (bytes32);
    function POS_COLLATERAL_0() external view returns (bytes32);
    function POS_COLLATERAL_1() external view returns (bytes32);
    function POS_DEBTSCALED_0() external view returns (bytes32);
    function POS_DEBTSCALED_1() external view returns (bytes32);
    function POS_ENTRY_LONG_PRICE_0() external view returns (bytes32);
    function POS_ENTRY_LONG_PRICE_1() external view returns (bytes32);
    function POS_ENTRY_SHORT_PRICE_0() external view returns (bytes32);
    function POS_ENTRY_SHORT_PRICE_1() external view returns (bytes32);
    function POS_ID() external view returns (bytes32);
    function POS_TOKEN_0() external view returns (bytes32);
    function POS_TOKEN_1() external view returns (bytes32);
    function POS_TYPE_0() external view returns (bytes32);
    function POS_TYPE_1() external view returns (bytes32);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "ACCOUNT_POSITION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_ACCOUNT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_ACC_LONG_AMOUNT_0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_ACC_LONG_AMOUNT_1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_ACC_SHORT_AMOUNT_0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_ACC_SHORT_AMOUNT_1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_BORROWINDEX_0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_BORROWINDEX_1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_COLLATERAL_0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_COLLATERAL_1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_DEBTSCALED_0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_DEBTSCALED_1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_ENTRY_LONG_PRICE_0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_ENTRY_LONG_PRICE_1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_ENTRY_SHORT_PRICE_0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_ENTRY_SHORT_PRICE_1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_ID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_TOKEN_0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_TOKEN_1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_TYPE_0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "POS_TYPE_1",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod PositionStoreUtils {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6106a7610034600b8282823980515f1a607314602857634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061013d575f3560e01c80636bd6b5d3116100bf578063d8978c4911610084578063d8978c49146101cb578063ea379b7f146101d3578063ea5efc2d146101db578063eeea7fac146101e3578063efb59f41146101eb578063f2b48957146101f3575f5ffd5b80636bd6b5d3146101a357806384afba39146101ab578063868caff3146101b3578063c2c1af2b146101bb578063d468e952146101c3575f5ffd5b806358b8cb981161010557806358b8cb981461017b5780635fc8f93214610183578063611e31911461018b578063684b7845146101935780636a0804421461019b575f5ffd5b80630735437e146101415780630ef264a11461015b578063231c82d5146101635780634c7281cc1461016b57806357c526ff14610173575b5f5ffd5b6101496101fb565b60405190815260200160405180910390f35b610149610249565b610149610283565b6101496102b8565b6101496102e6565b61014961031f565b61014961034e565b61014961037d565b6101496103ac565b6101496103da565b610149610414565b610149610455565b610149610489565b6101496104c2565b6101496104f6565b61014961052a565b61014961056b565b61014961059f565b6101496105d9565b610149610613565b61014961063d565b60405160200161023090602080825260119082015270504f535f424f52524f57494e4445585f3160781b604082015260600190565b6040516020818303038152906040528051906020012081565b60405160200161023090602080825260169082015275504f535f4143435f53484f52545f414d4f554e545f3160501b604082015260600190565b604051602001610230906020808252601190820152700504f535f424f52524f57494e4445585f3607c1b604082015260600190565b604051602001610230906020808252600a90820152690504f535f545950455f360b41b604082015260600190565b604051602001610230906020808252601590820152740504f535f4143435f4c4f4e475f414d4f554e545f3605c1b604082015260600190565b604051602001610230906020808252600b908201526a0504f535f544f4b454e5f360ac1b604082015260600190565b604051602001610230906020808252600b908201526a1413d4d7d050d0d3d5539560aa1b604082015260600190565b604051602001610230906020808252600b908201526a504f535f544f4b454e5f3160a81b604082015260600190565b604051602001610230906020808252600a9082015269504f535f545950455f3160b01b604082015260600190565b604051602001610230906020808252601690820152750504f535f454e5452595f4c4f4e475f50524943455f360541b604082015260600190565b6040516020016102309060208082526017908201527f504f535f454e5452595f53484f52545f50524943455f31000000000000000000604082015260600190565b6040516020016102309060208082526010908201526f20a1a1a7aaa72a2fa827a9a4aa24a7a760811b604082015260600190565b60405160200161023090602080825260159082015274504f535f4143435f4c4f4e475f414d4f554e545f3160581b604082015260600190565b6040516020016102309060208082526010908201526f0504f535f444542545343414c45445f360841b604082015260600190565b6040516020016102309060208082526010908201526f0504f535f434f4c4c41544552414c5f360841b604082015260600190565b6040516020016102309060208082526017908201527f504f535f454e5452595f53484f52545f50524943455f30000000000000000000604082015260600190565b6040516020016102309060208082526010908201526f504f535f444542545343414c45445f3160801b604082015260600190565b604051602001610230906020808252601690820152750504f535f4143435f53484f52545f414d4f554e545f360541b604082015260600190565b60405160200161023090602080825260169082015275504f535f454e5452595f4c4f4e475f50524943455f3160501b604082015260600190565b604051602001610230906020808252600690820152651413d4d7d25160d21b604082015260600190565b6040516020016102309060208082526010908201526f504f535f434f4c4c41544552414c5f3160801b60408201526060019056fea26469706673582212206c0a442566906bc6373cf3147e91c3a9a4de81ba3954c2c1f16e191dd952a5f464736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x06\xA7a\x004`\x0B\x82\x82\x829\x80Q_\x1A`s\x14`(WcNH{q`\xE0\x1B_R_`\x04R`$_\xFD[0_R`s\x81S\x82\x81\xF3\xFEs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\x01=W_5`\xE0\x1C\x80ck\xD6\xB5\xD3\x11a\0\xBFW\x80c\xD8\x97\x8CI\x11a\0\x84W\x80c\xD8\x97\x8CI\x14a\x01\xCBW\x80c\xEA7\x9B\x7F\x14a\x01\xD3W\x80c\xEA^\xFC-\x14a\x01\xDBW\x80c\xEE\xEA\x7F\xAC\x14a\x01\xE3W\x80c\xEF\xB5\x9FA\x14a\x01\xEBW\x80c\xF2\xB4\x89W\x14a\x01\xF3W__\xFD[\x80ck\xD6\xB5\xD3\x14a\x01\xA3W\x80c\x84\xAF\xBA9\x14a\x01\xABW\x80c\x86\x8C\xAF\xF3\x14a\x01\xB3W\x80c\xC2\xC1\xAF+\x14a\x01\xBBW\x80c\xD4h\xE9R\x14a\x01\xC3W__\xFD[\x80cX\xB8\xCB\x98\x11a\x01\x05W\x80cX\xB8\xCB\x98\x14a\x01{W\x80c_\xC8\xF92\x14a\x01\x83W\x80ca\x1E1\x91\x14a\x01\x8BW\x80chKxE\x14a\x01\x93W\x80cj\x08\x04B\x14a\x01\x9BW__\xFD[\x80c\x075C~\x14a\x01AW\x80c\x0E\xF2d\xA1\x14a\x01[W\x80c#\x1C\x82\xD5\x14a\x01cW\x80cLr\x81\xCC\x14a\x01kW\x80cW\xC5&\xFF\x14a\x01sW[__\xFD[a\x01Ia\x01\xFBV[`@Q\x90\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\x01Ia\x02IV[a\x01Ia\x02\x83V[a\x01Ia\x02\xB8V[a\x01Ia\x02\xE6V[a\x01Ia\x03\x1FV[a\x01Ia\x03NV[a\x01Ia\x03}V[a\x01Ia\x03\xACV[a\x01Ia\x03\xDAV[a\x01Ia\x04\x14V[a\x01Ia\x04UV[a\x01Ia\x04\x89V[a\x01Ia\x04\xC2V[a\x01Ia\x04\xF6V[a\x01Ia\x05*V[a\x01Ia\x05kV[a\x01Ia\x05\x9FV[a\x01Ia\x05\xD9V[a\x01Ia\x06\x13V[a\x01Ia\x06=V[`@Q` \x01a\x020\x90` \x80\x82R`\x11\x90\x82\x01RpPOS_BORROWINDEX_1`x\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81V[`@Q` \x01a\x020\x90` \x80\x82R`\x16\x90\x82\x01RuPOS_ACC_SHORT_AMOUNT_1`P\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x11\x90\x82\x01Rp\x05\x04\xF55\xF4$\xF5%$\xF5t\x94\xE4DU\x85\xF3`|\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\n\x90\x82\x01Ri\x05\x04\xF55\xF5E\x95\x04U\xF3`\xB4\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x15\x90\x82\x01Rt\x05\x04\xF55\xF4\x1445\xF4\xC4\xF4\xE4u\xF4\x14\xD4\xF5T\xE5E\xF3`\\\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x0B\x90\x82\x01Rj\x05\x04\xF55\xF5D\xF4\xB4T\xE5\xF3`\xAC\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x0B\x90\x82\x01Rj\x14\x13\xD4\xD7\xD0P\xD0\xD3\xD5S\x95`\xAA\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x0B\x90\x82\x01RjPOS_TOKEN_1`\xA8\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\n\x90\x82\x01RiPOS_TYPE_1`\xB0\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x16\x90\x82\x01Ru\x05\x04\xF55\xF4T\xE5E%\x95\xF4\xC4\xF4\xE4u\xF5\x05$\x944U\xF3`T\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x17\x90\x82\x01R\x7FPOS_ENTRY_SHORT_PRICE_1\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x10\x90\x82\x01Ro \xA1\xA1\xA7\xAA\xA7*/\xA8'\xA9\xA4\xAA$\xA7\xA7`\x81\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x15\x90\x82\x01RtPOS_ACC_LONG_AMOUNT_1`X\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x10\x90\x82\x01Ro\x05\x04\xF55\xF4DT%E44\x14\xC4TE\xF3`\x84\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x10\x90\x82\x01Ro\x05\x04\xF55\xF44\xF4\xC4\xC4\x15DU$\x14\xC5\xF3`\x84\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x17\x90\x82\x01R\x7FPOS_ENTRY_SHORT_PRICE_0\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x10\x90\x82\x01RoPOS_DEBTSCALED_1`\x80\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x16\x90\x82\x01Ru\x05\x04\xF55\xF4\x1445\xF54\x84\xF5%E\xF4\x14\xD4\xF5T\xE5E\xF3`T\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x16\x90\x82\x01RuPOS_ENTRY_LONG_PRICE_1`P\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x06\x90\x82\x01Re\x14\x13\xD4\xD7\xD2Q`\xD2\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x10\x90\x82\x01RoPOS_COLLATERAL_1`\x80\x1B`@\x82\x01R``\x01\x90V\xFE\xA2dipfsX\"\x12 l\nD%f\x90k\xC67<\xF3\x14~\x91\xC3\xA9\xA4\xDE\x81\xBA9T\xC2\xC1\xF1n\x19\x1D\xD9R\xA5\xF4dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x730000000000000000000000000000000000000000301460806040526004361061013d575f3560e01c80636bd6b5d3116100bf578063d8978c4911610084578063d8978c49146101cb578063ea379b7f146101d3578063ea5efc2d146101db578063eeea7fac146101e3578063efb59f41146101eb578063f2b48957146101f3575f5ffd5b80636bd6b5d3146101a357806384afba39146101ab578063868caff3146101b3578063c2c1af2b146101bb578063d468e952146101c3575f5ffd5b806358b8cb981161010557806358b8cb981461017b5780635fc8f93214610183578063611e31911461018b578063684b7845146101935780636a0804421461019b575f5ffd5b80630735437e146101415780630ef264a11461015b578063231c82d5146101635780634c7281cc1461016b57806357c526ff14610173575b5f5ffd5b6101496101fb565b60405190815260200160405180910390f35b610149610249565b610149610283565b6101496102b8565b6101496102e6565b61014961031f565b61014961034e565b61014961037d565b6101496103ac565b6101496103da565b610149610414565b610149610455565b610149610489565b6101496104c2565b6101496104f6565b61014961052a565b61014961056b565b61014961059f565b6101496105d9565b610149610613565b61014961063d565b60405160200161023090602080825260119082015270504f535f424f52524f57494e4445585f3160781b604082015260600190565b6040516020818303038152906040528051906020012081565b60405160200161023090602080825260169082015275504f535f4143435f53484f52545f414d4f554e545f3160501b604082015260600190565b604051602001610230906020808252601190820152700504f535f424f52524f57494e4445585f3607c1b604082015260600190565b604051602001610230906020808252600a90820152690504f535f545950455f360b41b604082015260600190565b604051602001610230906020808252601590820152740504f535f4143435f4c4f4e475f414d4f554e545f3605c1b604082015260600190565b604051602001610230906020808252600b908201526a0504f535f544f4b454e5f360ac1b604082015260600190565b604051602001610230906020808252600b908201526a1413d4d7d050d0d3d5539560aa1b604082015260600190565b604051602001610230906020808252600b908201526a504f535f544f4b454e5f3160a81b604082015260600190565b604051602001610230906020808252600a9082015269504f535f545950455f3160b01b604082015260600190565b604051602001610230906020808252601690820152750504f535f454e5452595f4c4f4e475f50524943455f360541b604082015260600190565b6040516020016102309060208082526017908201527f504f535f454e5452595f53484f52545f50524943455f31000000000000000000604082015260600190565b6040516020016102309060208082526010908201526f20a1a1a7aaa72a2fa827a9a4aa24a7a760811b604082015260600190565b60405160200161023090602080825260159082015274504f535f4143435f4c4f4e475f414d4f554e545f3160581b604082015260600190565b6040516020016102309060208082526010908201526f0504f535f444542545343414c45445f360841b604082015260600190565b6040516020016102309060208082526010908201526f0504f535f434f4c4c41544552414c5f360841b604082015260600190565b6040516020016102309060208082526017908201527f504f535f454e5452595f53484f52545f50524943455f30000000000000000000604082015260600190565b6040516020016102309060208082526010908201526f504f535f444542545343414c45445f3160801b604082015260600190565b604051602001610230906020808252601690820152750504f535f4143435f53484f52545f414d4f554e545f360541b604082015260600190565b60405160200161023090602080825260169082015275504f535f454e5452595f4c4f4e475f50524943455f3160501b604082015260600190565b604051602001610230906020808252600690820152651413d4d7d25160d21b604082015260600190565b6040516020016102309060208082526010908201526f504f535f434f4c4c41544552414c5f3160801b60408201526060019056fea26469706673582212206c0a442566906bc6373cf3147e91c3a9a4de81ba3954c2c1f16e191dd952a5f464736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\x01=W_5`\xE0\x1C\x80ck\xD6\xB5\xD3\x11a\0\xBFW\x80c\xD8\x97\x8CI\x11a\0\x84W\x80c\xD8\x97\x8CI\x14a\x01\xCBW\x80c\xEA7\x9B\x7F\x14a\x01\xD3W\x80c\xEA^\xFC-\x14a\x01\xDBW\x80c\xEE\xEA\x7F\xAC\x14a\x01\xE3W\x80c\xEF\xB5\x9FA\x14a\x01\xEBW\x80c\xF2\xB4\x89W\x14a\x01\xF3W__\xFD[\x80ck\xD6\xB5\xD3\x14a\x01\xA3W\x80c\x84\xAF\xBA9\x14a\x01\xABW\x80c\x86\x8C\xAF\xF3\x14a\x01\xB3W\x80c\xC2\xC1\xAF+\x14a\x01\xBBW\x80c\xD4h\xE9R\x14a\x01\xC3W__\xFD[\x80cX\xB8\xCB\x98\x11a\x01\x05W\x80cX\xB8\xCB\x98\x14a\x01{W\x80c_\xC8\xF92\x14a\x01\x83W\x80ca\x1E1\x91\x14a\x01\x8BW\x80chKxE\x14a\x01\x93W\x80cj\x08\x04B\x14a\x01\x9BW__\xFD[\x80c\x075C~\x14a\x01AW\x80c\x0E\xF2d\xA1\x14a\x01[W\x80c#\x1C\x82\xD5\x14a\x01cW\x80cLr\x81\xCC\x14a\x01kW\x80cW\xC5&\xFF\x14a\x01sW[__\xFD[a\x01Ia\x01\xFBV[`@Q\x90\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\x01Ia\x02IV[a\x01Ia\x02\x83V[a\x01Ia\x02\xB8V[a\x01Ia\x02\xE6V[a\x01Ia\x03\x1FV[a\x01Ia\x03NV[a\x01Ia\x03}V[a\x01Ia\x03\xACV[a\x01Ia\x03\xDAV[a\x01Ia\x04\x14V[a\x01Ia\x04UV[a\x01Ia\x04\x89V[a\x01Ia\x04\xC2V[a\x01Ia\x04\xF6V[a\x01Ia\x05*V[a\x01Ia\x05kV[a\x01Ia\x05\x9FV[a\x01Ia\x05\xD9V[a\x01Ia\x06\x13V[a\x01Ia\x06=V[`@Q` \x01a\x020\x90` \x80\x82R`\x11\x90\x82\x01RpPOS_BORROWINDEX_1`x\x1B`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81V[`@Q` \x01a\x020\x90` \x80\x82R`\x16\x90\x82\x01RuPOS_ACC_SHORT_AMOUNT_1`P\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x11\x90\x82\x01Rp\x05\x04\xF55\xF4$\xF5%$\xF5t\x94\xE4DU\x85\xF3`|\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\n\x90\x82\x01Ri\x05\x04\xF55\xF5E\x95\x04U\xF3`\xB4\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x15\x90\x82\x01Rt\x05\x04\xF55\xF4\x1445\xF4\xC4\xF4\xE4u\xF4\x14\xD4\xF5T\xE5E\xF3`\\\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x0B\x90\x82\x01Rj\x05\x04\xF55\xF5D\xF4\xB4T\xE5\xF3`\xAC\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x0B\x90\x82\x01Rj\x14\x13\xD4\xD7\xD0P\xD0\xD3\xD5S\x95`\xAA\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x0B\x90\x82\x01RjPOS_TOKEN_1`\xA8\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\n\x90\x82\x01RiPOS_TYPE_1`\xB0\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x16\x90\x82\x01Ru\x05\x04\xF55\xF4T\xE5E%\x95\xF4\xC4\xF4\xE4u\xF5\x05$\x944U\xF3`T\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x17\x90\x82\x01R\x7FPOS_ENTRY_SHORT_PRICE_1\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x10\x90\x82\x01Ro \xA1\xA1\xA7\xAA\xA7*/\xA8'\xA9\xA4\xAA$\xA7\xA7`\x81\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x15\x90\x82\x01RtPOS_ACC_LONG_AMOUNT_1`X\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x10\x90\x82\x01Ro\x05\x04\xF55\xF4DT%E44\x14\xC4TE\xF3`\x84\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x10\x90\x82\x01Ro\x05\x04\xF55\xF44\xF4\xC4\xC4\x15DU$\x14\xC5\xF3`\x84\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x17\x90\x82\x01R\x7FPOS_ENTRY_SHORT_PRICE_0\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x10\x90\x82\x01RoPOS_DEBTSCALED_1`\x80\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x16\x90\x82\x01Ru\x05\x04\xF55\xF4\x1445\xF54\x84\xF5%E\xF4\x14\xD4\xF5T\xE5E\xF3`T\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x16\x90\x82\x01RuPOS_ENTRY_LONG_PRICE_1`P\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x06\x90\x82\x01Re\x14\x13\xD4\xD7\xD2Q`\xD2\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\x020\x90` \x80\x82R`\x10\x90\x82\x01RoPOS_COLLATERAL_1`\x80\x1B`@\x82\x01R``\x01\x90V\xFE\xA2dipfsX\"\x12 l\nD%f\x90k\xC67<\xF3\x14~\x91\xC3\xA9\xA4\xDE\x81\xBA9T\xC2\xC1\xF1n\x19\x1D\xD9R\xA5\xF4dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `ACCOUNT_POSITION()` and selector `0x84afba39`.
```solidity
function ACCOUNT_POSITION() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ACCOUNT_POSITIONCall {}
    ///Container type for the return parameters of the [`ACCOUNT_POSITION()`](ACCOUNT_POSITIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ACCOUNT_POSITIONReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ACCOUNT_POSITIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ACCOUNT_POSITIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ACCOUNT_POSITIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ACCOUNT_POSITIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ACCOUNT_POSITIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ACCOUNT_POSITIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ACCOUNT_POSITIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ACCOUNT_POSITIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ACCOUNT_POSITION()";
            const SELECTOR: [u8; 4] = [132u8, 175u8, 186u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_ACCOUNT()` and selector `0x5fc8f932`.
```solidity
function POS_ACCOUNT() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ACCOUNTCall {}
    ///Container type for the return parameters of the [`POS_ACCOUNT()`](POS_ACCOUNTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ACCOUNTReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ACCOUNTCall> for UnderlyingRustTuple<'_> {
                fn from(value: POS_ACCOUNTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POS_ACCOUNTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ACCOUNTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: POS_ACCOUNTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POS_ACCOUNTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_ACCOUNTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_ACCOUNTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_ACCOUNT()";
            const SELECTOR: [u8; 4] = [95u8, 200u8, 249u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_ACC_LONG_AMOUNT_0()` and selector `0x57c526ff`.
```solidity
function POS_ACC_LONG_AMOUNT_0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ACC_LONG_AMOUNT_0Call {}
    ///Container type for the return parameters of the [`POS_ACC_LONG_AMOUNT_0()`](POS_ACC_LONG_AMOUNT_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ACC_LONG_AMOUNT_0Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ACC_LONG_AMOUNT_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ACC_LONG_AMOUNT_0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ACC_LONG_AMOUNT_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ACC_LONG_AMOUNT_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ACC_LONG_AMOUNT_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ACC_LONG_AMOUNT_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_ACC_LONG_AMOUNT_0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_ACC_LONG_AMOUNT_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_ACC_LONG_AMOUNT_0()";
            const SELECTOR: [u8; 4] = [87u8, 197u8, 38u8, 255u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_ACC_LONG_AMOUNT_1()` and selector `0x868caff3`.
```solidity
function POS_ACC_LONG_AMOUNT_1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ACC_LONG_AMOUNT_1Call {}
    ///Container type for the return parameters of the [`POS_ACC_LONG_AMOUNT_1()`](POS_ACC_LONG_AMOUNT_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ACC_LONG_AMOUNT_1Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ACC_LONG_AMOUNT_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ACC_LONG_AMOUNT_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ACC_LONG_AMOUNT_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ACC_LONG_AMOUNT_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ACC_LONG_AMOUNT_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ACC_LONG_AMOUNT_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_ACC_LONG_AMOUNT_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_ACC_LONG_AMOUNT_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_ACC_LONG_AMOUNT_1()";
            const SELECTOR: [u8; 4] = [134u8, 140u8, 175u8, 243u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_ACC_SHORT_AMOUNT_0()` and selector `0xea5efc2d`.
```solidity
function POS_ACC_SHORT_AMOUNT_0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ACC_SHORT_AMOUNT_0Call {}
    ///Container type for the return parameters of the [`POS_ACC_SHORT_AMOUNT_0()`](POS_ACC_SHORT_AMOUNT_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ACC_SHORT_AMOUNT_0Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ACC_SHORT_AMOUNT_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ACC_SHORT_AMOUNT_0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ACC_SHORT_AMOUNT_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ACC_SHORT_AMOUNT_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ACC_SHORT_AMOUNT_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ACC_SHORT_AMOUNT_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_ACC_SHORT_AMOUNT_0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_ACC_SHORT_AMOUNT_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_ACC_SHORT_AMOUNT_0()";
            const SELECTOR: [u8; 4] = [234u8, 94u8, 252u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_ACC_SHORT_AMOUNT_1()` and selector `0x0ef264a1`.
```solidity
function POS_ACC_SHORT_AMOUNT_1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ACC_SHORT_AMOUNT_1Call {}
    ///Container type for the return parameters of the [`POS_ACC_SHORT_AMOUNT_1()`](POS_ACC_SHORT_AMOUNT_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ACC_SHORT_AMOUNT_1Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ACC_SHORT_AMOUNT_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ACC_SHORT_AMOUNT_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ACC_SHORT_AMOUNT_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ACC_SHORT_AMOUNT_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ACC_SHORT_AMOUNT_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ACC_SHORT_AMOUNT_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_ACC_SHORT_AMOUNT_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_ACC_SHORT_AMOUNT_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_ACC_SHORT_AMOUNT_1()";
            const SELECTOR: [u8; 4] = [14u8, 242u8, 100u8, 161u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_BORROWINDEX_0()` and selector `0x231c82d5`.
```solidity
function POS_BORROWINDEX_0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_BORROWINDEX_0Call {}
    ///Container type for the return parameters of the [`POS_BORROWINDEX_0()`](POS_BORROWINDEX_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_BORROWINDEX_0Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_BORROWINDEX_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_BORROWINDEX_0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_BORROWINDEX_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_BORROWINDEX_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_BORROWINDEX_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_BORROWINDEX_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_BORROWINDEX_0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_BORROWINDEX_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_BORROWINDEX_0()";
            const SELECTOR: [u8; 4] = [35u8, 28u8, 130u8, 213u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_BORROWINDEX_1()` and selector `0x0735437e`.
```solidity
function POS_BORROWINDEX_1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_BORROWINDEX_1Call {}
    ///Container type for the return parameters of the [`POS_BORROWINDEX_1()`](POS_BORROWINDEX_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_BORROWINDEX_1Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_BORROWINDEX_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_BORROWINDEX_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_BORROWINDEX_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_BORROWINDEX_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_BORROWINDEX_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_BORROWINDEX_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_BORROWINDEX_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_BORROWINDEX_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_BORROWINDEX_1()";
            const SELECTOR: [u8; 4] = [7u8, 53u8, 67u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_COLLATERAL_0()` and selector `0xd468e952`.
```solidity
function POS_COLLATERAL_0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_COLLATERAL_0Call {}
    ///Container type for the return parameters of the [`POS_COLLATERAL_0()`](POS_COLLATERAL_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_COLLATERAL_0Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_COLLATERAL_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_COLLATERAL_0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_COLLATERAL_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_COLLATERAL_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_COLLATERAL_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_COLLATERAL_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_COLLATERAL_0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_COLLATERAL_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_COLLATERAL_0()";
            const SELECTOR: [u8; 4] = [212u8, 104u8, 233u8, 82u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_COLLATERAL_1()` and selector `0xf2b48957`.
```solidity
function POS_COLLATERAL_1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_COLLATERAL_1Call {}
    ///Container type for the return parameters of the [`POS_COLLATERAL_1()`](POS_COLLATERAL_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_COLLATERAL_1Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_COLLATERAL_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_COLLATERAL_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_COLLATERAL_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_COLLATERAL_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_COLLATERAL_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_COLLATERAL_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_COLLATERAL_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_COLLATERAL_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_COLLATERAL_1()";
            const SELECTOR: [u8; 4] = [242u8, 180u8, 137u8, 87u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_DEBTSCALED_0()` and selector `0xc2c1af2b`.
```solidity
function POS_DEBTSCALED_0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_DEBTSCALED_0Call {}
    ///Container type for the return parameters of the [`POS_DEBTSCALED_0()`](POS_DEBTSCALED_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_DEBTSCALED_0Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_DEBTSCALED_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_DEBTSCALED_0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_DEBTSCALED_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_DEBTSCALED_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_DEBTSCALED_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_DEBTSCALED_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_DEBTSCALED_0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_DEBTSCALED_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_DEBTSCALED_0()";
            const SELECTOR: [u8; 4] = [194u8, 193u8, 175u8, 43u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_DEBTSCALED_1()` and selector `0xea379b7f`.
```solidity
function POS_DEBTSCALED_1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_DEBTSCALED_1Call {}
    ///Container type for the return parameters of the [`POS_DEBTSCALED_1()`](POS_DEBTSCALED_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_DEBTSCALED_1Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_DEBTSCALED_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_DEBTSCALED_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_DEBTSCALED_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_DEBTSCALED_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_DEBTSCALED_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_DEBTSCALED_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_DEBTSCALED_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_DEBTSCALED_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_DEBTSCALED_1()";
            const SELECTOR: [u8; 4] = [234u8, 55u8, 155u8, 127u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_ENTRY_LONG_PRICE_0()` and selector `0x6a080442`.
```solidity
function POS_ENTRY_LONG_PRICE_0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ENTRY_LONG_PRICE_0Call {}
    ///Container type for the return parameters of the [`POS_ENTRY_LONG_PRICE_0()`](POS_ENTRY_LONG_PRICE_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ENTRY_LONG_PRICE_0Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ENTRY_LONG_PRICE_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ENTRY_LONG_PRICE_0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ENTRY_LONG_PRICE_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ENTRY_LONG_PRICE_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ENTRY_LONG_PRICE_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ENTRY_LONG_PRICE_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_ENTRY_LONG_PRICE_0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_ENTRY_LONG_PRICE_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_ENTRY_LONG_PRICE_0()";
            const SELECTOR: [u8; 4] = [106u8, 8u8, 4u8, 66u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_ENTRY_LONG_PRICE_1()` and selector `0xeeea7fac`.
```solidity
function POS_ENTRY_LONG_PRICE_1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ENTRY_LONG_PRICE_1Call {}
    ///Container type for the return parameters of the [`POS_ENTRY_LONG_PRICE_1()`](POS_ENTRY_LONG_PRICE_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ENTRY_LONG_PRICE_1Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ENTRY_LONG_PRICE_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ENTRY_LONG_PRICE_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ENTRY_LONG_PRICE_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ENTRY_LONG_PRICE_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ENTRY_LONG_PRICE_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ENTRY_LONG_PRICE_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_ENTRY_LONG_PRICE_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_ENTRY_LONG_PRICE_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_ENTRY_LONG_PRICE_1()";
            const SELECTOR: [u8; 4] = [238u8, 234u8, 127u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_ENTRY_SHORT_PRICE_0()` and selector `0xd8978c49`.
```solidity
function POS_ENTRY_SHORT_PRICE_0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ENTRY_SHORT_PRICE_0Call {}
    ///Container type for the return parameters of the [`POS_ENTRY_SHORT_PRICE_0()`](POS_ENTRY_SHORT_PRICE_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ENTRY_SHORT_PRICE_0Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ENTRY_SHORT_PRICE_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ENTRY_SHORT_PRICE_0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ENTRY_SHORT_PRICE_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ENTRY_SHORT_PRICE_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ENTRY_SHORT_PRICE_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ENTRY_SHORT_PRICE_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_ENTRY_SHORT_PRICE_0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_ENTRY_SHORT_PRICE_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_ENTRY_SHORT_PRICE_0()";
            const SELECTOR: [u8; 4] = [216u8, 151u8, 140u8, 73u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_ENTRY_SHORT_PRICE_1()` and selector `0x6bd6b5d3`.
```solidity
function POS_ENTRY_SHORT_PRICE_1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ENTRY_SHORT_PRICE_1Call {}
    ///Container type for the return parameters of the [`POS_ENTRY_SHORT_PRICE_1()`](POS_ENTRY_SHORT_PRICE_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_ENTRY_SHORT_PRICE_1Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ENTRY_SHORT_PRICE_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ENTRY_SHORT_PRICE_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ENTRY_SHORT_PRICE_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_ENTRY_SHORT_PRICE_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: POS_ENTRY_SHORT_PRICE_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for POS_ENTRY_SHORT_PRICE_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_ENTRY_SHORT_PRICE_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_ENTRY_SHORT_PRICE_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_ENTRY_SHORT_PRICE_1()";
            const SELECTOR: [u8; 4] = [107u8, 214u8, 181u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_ID()` and selector `0xefb59f41`.
```solidity
function POS_ID() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_IDCall {}
    ///Container type for the return parameters of the [`POS_ID()`](POS_IDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_IDReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_IDCall> for UnderlyingRustTuple<'_> {
                fn from(value: POS_IDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POS_IDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_IDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: POS_IDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POS_IDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_IDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_IDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_ID()";
            const SELECTOR: [u8; 4] = [239u8, 181u8, 159u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_TOKEN_0()` and selector `0x58b8cb98`.
```solidity
function POS_TOKEN_0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_TOKEN_0Call {}
    ///Container type for the return parameters of the [`POS_TOKEN_0()`](POS_TOKEN_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_TOKEN_0Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_TOKEN_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: POS_TOKEN_0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POS_TOKEN_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_TOKEN_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: POS_TOKEN_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POS_TOKEN_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_TOKEN_0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_TOKEN_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_TOKEN_0()";
            const SELECTOR: [u8; 4] = [88u8, 184u8, 203u8, 152u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_TOKEN_1()` and selector `0x611e3191`.
```solidity
function POS_TOKEN_1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_TOKEN_1Call {}
    ///Container type for the return parameters of the [`POS_TOKEN_1()`](POS_TOKEN_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_TOKEN_1Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_TOKEN_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: POS_TOKEN_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POS_TOKEN_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_TOKEN_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: POS_TOKEN_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POS_TOKEN_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_TOKEN_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_TOKEN_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_TOKEN_1()";
            const SELECTOR: [u8; 4] = [97u8, 30u8, 49u8, 145u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_TYPE_0()` and selector `0x4c7281cc`.
```solidity
function POS_TYPE_0() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_TYPE_0Call {}
    ///Container type for the return parameters of the [`POS_TYPE_0()`](POS_TYPE_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_TYPE_0Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_TYPE_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: POS_TYPE_0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POS_TYPE_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_TYPE_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: POS_TYPE_0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POS_TYPE_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_TYPE_0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_TYPE_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_TYPE_0()";
            const SELECTOR: [u8; 4] = [76u8, 114u8, 129u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `POS_TYPE_1()` and selector `0x684b7845`.
```solidity
function POS_TYPE_1() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_TYPE_1Call {}
    ///Container type for the return parameters of the [`POS_TYPE_1()`](POS_TYPE_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct POS_TYPE_1Return {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_TYPE_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: POS_TYPE_1Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POS_TYPE_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<POS_TYPE_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: POS_TYPE_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for POS_TYPE_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for POS_TYPE_1Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = POS_TYPE_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "POS_TYPE_1()";
            const SELECTOR: [u8; 4] = [104u8, 75u8, 120u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`PositionStoreUtils`](self) function calls.
    pub enum PositionStoreUtilsCalls {
        ACCOUNT_POSITION(ACCOUNT_POSITIONCall),
        POS_ACCOUNT(POS_ACCOUNTCall),
        POS_ACC_LONG_AMOUNT_0(POS_ACC_LONG_AMOUNT_0Call),
        POS_ACC_LONG_AMOUNT_1(POS_ACC_LONG_AMOUNT_1Call),
        POS_ACC_SHORT_AMOUNT_0(POS_ACC_SHORT_AMOUNT_0Call),
        POS_ACC_SHORT_AMOUNT_1(POS_ACC_SHORT_AMOUNT_1Call),
        POS_BORROWINDEX_0(POS_BORROWINDEX_0Call),
        POS_BORROWINDEX_1(POS_BORROWINDEX_1Call),
        POS_COLLATERAL_0(POS_COLLATERAL_0Call),
        POS_COLLATERAL_1(POS_COLLATERAL_1Call),
        POS_DEBTSCALED_0(POS_DEBTSCALED_0Call),
        POS_DEBTSCALED_1(POS_DEBTSCALED_1Call),
        POS_ENTRY_LONG_PRICE_0(POS_ENTRY_LONG_PRICE_0Call),
        POS_ENTRY_LONG_PRICE_1(POS_ENTRY_LONG_PRICE_1Call),
        POS_ENTRY_SHORT_PRICE_0(POS_ENTRY_SHORT_PRICE_0Call),
        POS_ENTRY_SHORT_PRICE_1(POS_ENTRY_SHORT_PRICE_1Call),
        POS_ID(POS_IDCall),
        POS_TOKEN_0(POS_TOKEN_0Call),
        POS_TOKEN_1(POS_TOKEN_1Call),
        POS_TYPE_0(POS_TYPE_0Call),
        POS_TYPE_1(POS_TYPE_1Call),
    }
    #[automatically_derived]
    impl PositionStoreUtilsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 53u8, 67u8, 126u8],
            [14u8, 242u8, 100u8, 161u8],
            [35u8, 28u8, 130u8, 213u8],
            [76u8, 114u8, 129u8, 204u8],
            [87u8, 197u8, 38u8, 255u8],
            [88u8, 184u8, 203u8, 152u8],
            [95u8, 200u8, 249u8, 50u8],
            [97u8, 30u8, 49u8, 145u8],
            [104u8, 75u8, 120u8, 69u8],
            [106u8, 8u8, 4u8, 66u8],
            [107u8, 214u8, 181u8, 211u8],
            [132u8, 175u8, 186u8, 57u8],
            [134u8, 140u8, 175u8, 243u8],
            [194u8, 193u8, 175u8, 43u8],
            [212u8, 104u8, 233u8, 82u8],
            [216u8, 151u8, 140u8, 73u8],
            [234u8, 55u8, 155u8, 127u8],
            [234u8, 94u8, 252u8, 45u8],
            [238u8, 234u8, 127u8, 172u8],
            [239u8, 181u8, 159u8, 65u8],
            [242u8, 180u8, 137u8, 87u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for PositionStoreUtilsCalls {
        const NAME: &'static str = "PositionStoreUtilsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 21usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ACCOUNT_POSITION(_) => {
                    <ACCOUNT_POSITIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_ACCOUNT(_) => {
                    <POS_ACCOUNTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_ACC_LONG_AMOUNT_0(_) => {
                    <POS_ACC_LONG_AMOUNT_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_ACC_LONG_AMOUNT_1(_) => {
                    <POS_ACC_LONG_AMOUNT_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_ACC_SHORT_AMOUNT_0(_) => {
                    <POS_ACC_SHORT_AMOUNT_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_ACC_SHORT_AMOUNT_1(_) => {
                    <POS_ACC_SHORT_AMOUNT_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_BORROWINDEX_0(_) => {
                    <POS_BORROWINDEX_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_BORROWINDEX_1(_) => {
                    <POS_BORROWINDEX_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_COLLATERAL_0(_) => {
                    <POS_COLLATERAL_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_COLLATERAL_1(_) => {
                    <POS_COLLATERAL_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_DEBTSCALED_0(_) => {
                    <POS_DEBTSCALED_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_DEBTSCALED_1(_) => {
                    <POS_DEBTSCALED_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_ENTRY_LONG_PRICE_0(_) => {
                    <POS_ENTRY_LONG_PRICE_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_ENTRY_LONG_PRICE_1(_) => {
                    <POS_ENTRY_LONG_PRICE_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_ENTRY_SHORT_PRICE_0(_) => {
                    <POS_ENTRY_SHORT_PRICE_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_ENTRY_SHORT_PRICE_1(_) => {
                    <POS_ENTRY_SHORT_PRICE_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_ID(_) => <POS_IDCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::POS_TOKEN_0(_) => {
                    <POS_TOKEN_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_TOKEN_1(_) => {
                    <POS_TOKEN_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_TYPE_0(_) => {
                    <POS_TYPE_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::POS_TYPE_1(_) => {
                    <POS_TYPE_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<PositionStoreUtilsCalls>] = &[
                {
                    fn POS_BORROWINDEX_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_BORROWINDEX_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_BORROWINDEX_1)
                    }
                    POS_BORROWINDEX_1
                },
                {
                    fn POS_ACC_SHORT_AMOUNT_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_ACC_SHORT_AMOUNT_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_ACC_SHORT_AMOUNT_1)
                    }
                    POS_ACC_SHORT_AMOUNT_1
                },
                {
                    fn POS_BORROWINDEX_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_BORROWINDEX_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_BORROWINDEX_0)
                    }
                    POS_BORROWINDEX_0
                },
                {
                    fn POS_TYPE_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_TYPE_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_TYPE_0)
                    }
                    POS_TYPE_0
                },
                {
                    fn POS_ACC_LONG_AMOUNT_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_ACC_LONG_AMOUNT_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_ACC_LONG_AMOUNT_0)
                    }
                    POS_ACC_LONG_AMOUNT_0
                },
                {
                    fn POS_TOKEN_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_TOKEN_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_TOKEN_0)
                    }
                    POS_TOKEN_0
                },
                {
                    fn POS_ACCOUNT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_ACCOUNTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_ACCOUNT)
                    }
                    POS_ACCOUNT
                },
                {
                    fn POS_TOKEN_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_TOKEN_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_TOKEN_1)
                    }
                    POS_TOKEN_1
                },
                {
                    fn POS_TYPE_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_TYPE_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_TYPE_1)
                    }
                    POS_TYPE_1
                },
                {
                    fn POS_ENTRY_LONG_PRICE_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_ENTRY_LONG_PRICE_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_ENTRY_LONG_PRICE_0)
                    }
                    POS_ENTRY_LONG_PRICE_0
                },
                {
                    fn POS_ENTRY_SHORT_PRICE_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_ENTRY_SHORT_PRICE_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_ENTRY_SHORT_PRICE_1)
                    }
                    POS_ENTRY_SHORT_PRICE_1
                },
                {
                    fn ACCOUNT_POSITION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <ACCOUNT_POSITIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::ACCOUNT_POSITION)
                    }
                    ACCOUNT_POSITION
                },
                {
                    fn POS_ACC_LONG_AMOUNT_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_ACC_LONG_AMOUNT_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_ACC_LONG_AMOUNT_1)
                    }
                    POS_ACC_LONG_AMOUNT_1
                },
                {
                    fn POS_DEBTSCALED_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_DEBTSCALED_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_DEBTSCALED_0)
                    }
                    POS_DEBTSCALED_0
                },
                {
                    fn POS_COLLATERAL_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_COLLATERAL_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_COLLATERAL_0)
                    }
                    POS_COLLATERAL_0
                },
                {
                    fn POS_ENTRY_SHORT_PRICE_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_ENTRY_SHORT_PRICE_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_ENTRY_SHORT_PRICE_0)
                    }
                    POS_ENTRY_SHORT_PRICE_0
                },
                {
                    fn POS_DEBTSCALED_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_DEBTSCALED_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_DEBTSCALED_1)
                    }
                    POS_DEBTSCALED_1
                },
                {
                    fn POS_ACC_SHORT_AMOUNT_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_ACC_SHORT_AMOUNT_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_ACC_SHORT_AMOUNT_0)
                    }
                    POS_ACC_SHORT_AMOUNT_0
                },
                {
                    fn POS_ENTRY_LONG_PRICE_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_ENTRY_LONG_PRICE_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_ENTRY_LONG_PRICE_1)
                    }
                    POS_ENTRY_LONG_PRICE_1
                },
                {
                    fn POS_ID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_IDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_ID)
                    }
                    POS_ID
                },
                {
                    fn POS_COLLATERAL_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionStoreUtilsCalls> {
                        <POS_COLLATERAL_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionStoreUtilsCalls::POS_COLLATERAL_1)
                    }
                    POS_COLLATERAL_1
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ACCOUNT_POSITION(inner) => {
                    <ACCOUNT_POSITIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_ACCOUNT(inner) => {
                    <POS_ACCOUNTCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_ACC_LONG_AMOUNT_0(inner) => {
                    <POS_ACC_LONG_AMOUNT_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_ACC_LONG_AMOUNT_1(inner) => {
                    <POS_ACC_LONG_AMOUNT_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_ACC_SHORT_AMOUNT_0(inner) => {
                    <POS_ACC_SHORT_AMOUNT_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_ACC_SHORT_AMOUNT_1(inner) => {
                    <POS_ACC_SHORT_AMOUNT_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_BORROWINDEX_0(inner) => {
                    <POS_BORROWINDEX_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_BORROWINDEX_1(inner) => {
                    <POS_BORROWINDEX_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_COLLATERAL_0(inner) => {
                    <POS_COLLATERAL_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_COLLATERAL_1(inner) => {
                    <POS_COLLATERAL_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_DEBTSCALED_0(inner) => {
                    <POS_DEBTSCALED_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_DEBTSCALED_1(inner) => {
                    <POS_DEBTSCALED_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_ENTRY_LONG_PRICE_0(inner) => {
                    <POS_ENTRY_LONG_PRICE_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_ENTRY_LONG_PRICE_1(inner) => {
                    <POS_ENTRY_LONG_PRICE_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_ENTRY_SHORT_PRICE_0(inner) => {
                    <POS_ENTRY_SHORT_PRICE_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_ENTRY_SHORT_PRICE_1(inner) => {
                    <POS_ENTRY_SHORT_PRICE_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_ID(inner) => {
                    <POS_IDCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::POS_TOKEN_0(inner) => {
                    <POS_TOKEN_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_TOKEN_1(inner) => {
                    <POS_TOKEN_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::POS_TYPE_0(inner) => {
                    <POS_TYPE_0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::POS_TYPE_1(inner) => {
                    <POS_TYPE_1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ACCOUNT_POSITION(inner) => {
                    <ACCOUNT_POSITIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_ACCOUNT(inner) => {
                    <POS_ACCOUNTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_ACC_LONG_AMOUNT_0(inner) => {
                    <POS_ACC_LONG_AMOUNT_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_ACC_LONG_AMOUNT_1(inner) => {
                    <POS_ACC_LONG_AMOUNT_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_ACC_SHORT_AMOUNT_0(inner) => {
                    <POS_ACC_SHORT_AMOUNT_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_ACC_SHORT_AMOUNT_1(inner) => {
                    <POS_ACC_SHORT_AMOUNT_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_BORROWINDEX_0(inner) => {
                    <POS_BORROWINDEX_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_BORROWINDEX_1(inner) => {
                    <POS_BORROWINDEX_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_COLLATERAL_0(inner) => {
                    <POS_COLLATERAL_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_COLLATERAL_1(inner) => {
                    <POS_COLLATERAL_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_DEBTSCALED_0(inner) => {
                    <POS_DEBTSCALED_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_DEBTSCALED_1(inner) => {
                    <POS_DEBTSCALED_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_ENTRY_LONG_PRICE_0(inner) => {
                    <POS_ENTRY_LONG_PRICE_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_ENTRY_LONG_PRICE_1(inner) => {
                    <POS_ENTRY_LONG_PRICE_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_ENTRY_SHORT_PRICE_0(inner) => {
                    <POS_ENTRY_SHORT_PRICE_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_ENTRY_SHORT_PRICE_1(inner) => {
                    <POS_ENTRY_SHORT_PRICE_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_ID(inner) => {
                    <POS_IDCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::POS_TOKEN_0(inner) => {
                    <POS_TOKEN_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_TOKEN_1(inner) => {
                    <POS_TOKEN_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_TYPE_0(inner) => {
                    <POS_TYPE_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::POS_TYPE_1(inner) => {
                    <POS_TYPE_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`PositionStoreUtils`](self) contract instance.

See the [wrapper's documentation](`PositionStoreUtilsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> PositionStoreUtilsInstance<T, P, N> {
        PositionStoreUtilsInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<PositionStoreUtilsInstance<T, P, N>>,
    > {
        PositionStoreUtilsInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        PositionStoreUtilsInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`PositionStoreUtils`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`PositionStoreUtils`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct PositionStoreUtilsInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for PositionStoreUtilsInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("PositionStoreUtilsInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > PositionStoreUtilsInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`PositionStoreUtils`](self) contract instance.

See the [wrapper's documentation](`PositionStoreUtilsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<PositionStoreUtilsInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> PositionStoreUtilsInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> PositionStoreUtilsInstance<T, P, N> {
            PositionStoreUtilsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > PositionStoreUtilsInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ACCOUNT_POSITION`] function.
        pub fn ACCOUNT_POSITION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ACCOUNT_POSITIONCall, N> {
            self.call_builder(&ACCOUNT_POSITIONCall {})
        }
        ///Creates a new call builder for the [`POS_ACCOUNT`] function.
        pub fn POS_ACCOUNT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_ACCOUNTCall, N> {
            self.call_builder(&POS_ACCOUNTCall {})
        }
        ///Creates a new call builder for the [`POS_ACC_LONG_AMOUNT_0`] function.
        pub fn POS_ACC_LONG_AMOUNT_0(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_ACC_LONG_AMOUNT_0Call, N> {
            self.call_builder(&POS_ACC_LONG_AMOUNT_0Call {})
        }
        ///Creates a new call builder for the [`POS_ACC_LONG_AMOUNT_1`] function.
        pub fn POS_ACC_LONG_AMOUNT_1(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_ACC_LONG_AMOUNT_1Call, N> {
            self.call_builder(&POS_ACC_LONG_AMOUNT_1Call {})
        }
        ///Creates a new call builder for the [`POS_ACC_SHORT_AMOUNT_0`] function.
        pub fn POS_ACC_SHORT_AMOUNT_0(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_ACC_SHORT_AMOUNT_0Call, N> {
            self.call_builder(&POS_ACC_SHORT_AMOUNT_0Call {})
        }
        ///Creates a new call builder for the [`POS_ACC_SHORT_AMOUNT_1`] function.
        pub fn POS_ACC_SHORT_AMOUNT_1(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_ACC_SHORT_AMOUNT_1Call, N> {
            self.call_builder(&POS_ACC_SHORT_AMOUNT_1Call {})
        }
        ///Creates a new call builder for the [`POS_BORROWINDEX_0`] function.
        pub fn POS_BORROWINDEX_0(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_BORROWINDEX_0Call, N> {
            self.call_builder(&POS_BORROWINDEX_0Call {})
        }
        ///Creates a new call builder for the [`POS_BORROWINDEX_1`] function.
        pub fn POS_BORROWINDEX_1(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_BORROWINDEX_1Call, N> {
            self.call_builder(&POS_BORROWINDEX_1Call {})
        }
        ///Creates a new call builder for the [`POS_COLLATERAL_0`] function.
        pub fn POS_COLLATERAL_0(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_COLLATERAL_0Call, N> {
            self.call_builder(&POS_COLLATERAL_0Call {})
        }
        ///Creates a new call builder for the [`POS_COLLATERAL_1`] function.
        pub fn POS_COLLATERAL_1(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_COLLATERAL_1Call, N> {
            self.call_builder(&POS_COLLATERAL_1Call {})
        }
        ///Creates a new call builder for the [`POS_DEBTSCALED_0`] function.
        pub fn POS_DEBTSCALED_0(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_DEBTSCALED_0Call, N> {
            self.call_builder(&POS_DEBTSCALED_0Call {})
        }
        ///Creates a new call builder for the [`POS_DEBTSCALED_1`] function.
        pub fn POS_DEBTSCALED_1(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_DEBTSCALED_1Call, N> {
            self.call_builder(&POS_DEBTSCALED_1Call {})
        }
        ///Creates a new call builder for the [`POS_ENTRY_LONG_PRICE_0`] function.
        pub fn POS_ENTRY_LONG_PRICE_0(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_ENTRY_LONG_PRICE_0Call, N> {
            self.call_builder(&POS_ENTRY_LONG_PRICE_0Call {})
        }
        ///Creates a new call builder for the [`POS_ENTRY_LONG_PRICE_1`] function.
        pub fn POS_ENTRY_LONG_PRICE_1(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_ENTRY_LONG_PRICE_1Call, N> {
            self.call_builder(&POS_ENTRY_LONG_PRICE_1Call {})
        }
        ///Creates a new call builder for the [`POS_ENTRY_SHORT_PRICE_0`] function.
        pub fn POS_ENTRY_SHORT_PRICE_0(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_ENTRY_SHORT_PRICE_0Call, N> {
            self.call_builder(&POS_ENTRY_SHORT_PRICE_0Call {})
        }
        ///Creates a new call builder for the [`POS_ENTRY_SHORT_PRICE_1`] function.
        pub fn POS_ENTRY_SHORT_PRICE_1(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_ENTRY_SHORT_PRICE_1Call, N> {
            self.call_builder(&POS_ENTRY_SHORT_PRICE_1Call {})
        }
        ///Creates a new call builder for the [`POS_ID`] function.
        pub fn POS_ID(&self) -> alloy_contract::SolCallBuilder<T, &P, POS_IDCall, N> {
            self.call_builder(&POS_IDCall {})
        }
        ///Creates a new call builder for the [`POS_TOKEN_0`] function.
        pub fn POS_TOKEN_0(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_TOKEN_0Call, N> {
            self.call_builder(&POS_TOKEN_0Call {})
        }
        ///Creates a new call builder for the [`POS_TOKEN_1`] function.
        pub fn POS_TOKEN_1(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_TOKEN_1Call, N> {
            self.call_builder(&POS_TOKEN_1Call {})
        }
        ///Creates a new call builder for the [`POS_TYPE_0`] function.
        pub fn POS_TYPE_0(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_TYPE_0Call, N> {
            self.call_builder(&POS_TYPE_0Call {})
        }
        ///Creates a new call builder for the [`POS_TYPE_1`] function.
        pub fn POS_TYPE_1(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, POS_TYPE_1Call, N> {
            self.call_builder(&POS_TYPE_1Call {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > PositionStoreUtilsInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}

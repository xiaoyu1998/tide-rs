/**

Generated by the following Solidity interface...
```solidity
interface TwapStoreUtils {
    function TWAP_AVERAGE_PRICE() external view returns (bytes32);
    function TWAP_LAST_BLOCK_TIME_STAMP() external view returns (bytes32);
    function TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD() external view returns (bytes32);
    function TWAP_LAST_PRICE_CUMMULATIVE_KEY() external view returns (bytes32);
    function TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD() external view returns (bytes32);
    function TWAP_PERIOD() external view returns (bytes32);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "TWAP_AVERAGE_PRICE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TWAP_LAST_BLOCK_TIME_STAMP",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TWAP_LAST_PRICE_CUMMULATIVE_KEY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TWAP_PERIOD",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod TwapStoreUtils {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x610288610034600b8282823980515f1a607314602857634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006b575f3560e01c80631d6048961461006f57806351634c8b146100895780636f817dc6146100915780637ca2518414610099578063e1fd4eb6146100a1578063fd910c06146100a9575b5f5ffd5b6100776100b1565b60405190815260200160405180910390f35b61007761010b565b610077610159565b61007761019a565b6100776101c9565b61007761021c565b6040516020016100f2906020808252601f908201527f545741505f4c4153545f50524943455f43554d4d554c41544956455f4b455900604082015260600190565b6040516020818303038152906040528051906020012081565b6040516020016100f29060208082526024908201527f545741505f4c4153545f424c4f434b5f54494d455f5354414d505f42595f5045604082015263149253d160e21b606082015260800190565b6040516020016100f2906020808252601a908201527f545741505f4c4153545f424c4f434b5f54494d455f5354414d50000000000000604082015260600190565b6040516020016100f2906020808252600b908201526a1515d05417d411549253d160aa1b604082015260600190565b6040516020016100f29060208082526029908201527f545741505f4c4153545f50524943455f43554d4d554c41544956455f4b45595f604082015268109657d411549253d160ba1b606082015260800190565b6040516020016100f290602080825260129082015271545741505f415645524147455f505249434560701b60408201526060019056fea2646970667358221220cf96b328d75e3e6b23cb99b47fc1191c85f6c33fddc79728858e5010611b901964736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x02\x88a\x004`\x0B\x82\x82\x829\x80Q_\x1A`s\x14`(WcNH{q`\xE0\x1B_R_`\x04R`$_\xFD[0_R`s\x81S\x82\x81\xF3\xFEs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0kW_5`\xE0\x1C\x80c\x1D`H\x96\x14a\0oW\x80cQcL\x8B\x14a\0\x89W\x80co\x81}\xC6\x14a\0\x91W\x80c|\xA2Q\x84\x14a\0\x99W\x80c\xE1\xFDN\xB6\x14a\0\xA1W\x80c\xFD\x91\x0C\x06\x14a\0\xA9W[__\xFD[a\0wa\0\xB1V[`@Q\x90\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0wa\x01\x0BV[a\0wa\x01YV[a\0wa\x01\x9AV[a\0wa\x01\xC9V[a\0wa\x02\x1CV[`@Q` \x01a\0\xF2\x90` \x80\x82R`\x1F\x90\x82\x01R\x7FTWAP_LAST_PRICE_CUMMULATIVE_KEY\0`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81V[`@Q` \x01a\0\xF2\x90` \x80\x82R`$\x90\x82\x01R\x7FTWAP_LAST_BLOCK_TIME_STAMP_BY_PE`@\x82\x01Rc\x14\x92S\xD1`\xE2\x1B``\x82\x01R`\x80\x01\x90V[`@Q` \x01a\0\xF2\x90` \x80\x82R`\x1A\x90\x82\x01R\x7FTWAP_LAST_BLOCK_TIME_STAMP\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[`@Q` \x01a\0\xF2\x90` \x80\x82R`\x0B\x90\x82\x01Rj\x15\x15\xD0T\x17\xD4\x11T\x92S\xD1`\xAA\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\0\xF2\x90` \x80\x82R`)\x90\x82\x01R\x7FTWAP_LAST_PRICE_CUMMULATIVE_KEY_`@\x82\x01Rh\x10\x96W\xD4\x11T\x92S\xD1`\xBA\x1B``\x82\x01R`\x80\x01\x90V[`@Q` \x01a\0\xF2\x90` \x80\x82R`\x12\x90\x82\x01RqTWAP_AVERAGE_PRICE`p\x1B`@\x82\x01R``\x01\x90V\xFE\xA2dipfsX\"\x12 \xCF\x96\xB3(\xD7^>k#\xCB\x99\xB4\x7F\xC1\x19\x1C\x85\xF6\xC3?\xDD\xC7\x97(\x85\x8EP\x10a\x1B\x90\x19dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x730000000000000000000000000000000000000000301460806040526004361061006b575f3560e01c80631d6048961461006f57806351634c8b146100895780636f817dc6146100915780637ca2518414610099578063e1fd4eb6146100a1578063fd910c06146100a9575b5f5ffd5b6100776100b1565b60405190815260200160405180910390f35b61007761010b565b610077610159565b61007761019a565b6100776101c9565b61007761021c565b6040516020016100f2906020808252601f908201527f545741505f4c4153545f50524943455f43554d4d554c41544956455f4b455900604082015260600190565b6040516020818303038152906040528051906020012081565b6040516020016100f29060208082526024908201527f545741505f4c4153545f424c4f434b5f54494d455f5354414d505f42595f5045604082015263149253d160e21b606082015260800190565b6040516020016100f2906020808252601a908201527f545741505f4c4153545f424c4f434b5f54494d455f5354414d50000000000000604082015260600190565b6040516020016100f2906020808252600b908201526a1515d05417d411549253d160aa1b604082015260600190565b6040516020016100f29060208082526029908201527f545741505f4c4153545f50524943455f43554d4d554c41544956455f4b45595f604082015268109657d411549253d160ba1b606082015260800190565b6040516020016100f290602080825260129082015271545741505f415645524147455f505249434560701b60408201526060019056fea2646970667358221220cf96b328d75e3e6b23cb99b47fc1191c85f6c33fddc79728858e5010611b901964736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0kW_5`\xE0\x1C\x80c\x1D`H\x96\x14a\0oW\x80cQcL\x8B\x14a\0\x89W\x80co\x81}\xC6\x14a\0\x91W\x80c|\xA2Q\x84\x14a\0\x99W\x80c\xE1\xFDN\xB6\x14a\0\xA1W\x80c\xFD\x91\x0C\x06\x14a\0\xA9W[__\xFD[a\0wa\0\xB1V[`@Q\x90\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0wa\x01\x0BV[a\0wa\x01YV[a\0wa\x01\x9AV[a\0wa\x01\xC9V[a\0wa\x02\x1CV[`@Q` \x01a\0\xF2\x90` \x80\x82R`\x1F\x90\x82\x01R\x7FTWAP_LAST_PRICE_CUMMULATIVE_KEY\0`@\x82\x01R``\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x81V[`@Q` \x01a\0\xF2\x90` \x80\x82R`$\x90\x82\x01R\x7FTWAP_LAST_BLOCK_TIME_STAMP_BY_PE`@\x82\x01Rc\x14\x92S\xD1`\xE2\x1B``\x82\x01R`\x80\x01\x90V[`@Q` \x01a\0\xF2\x90` \x80\x82R`\x1A\x90\x82\x01R\x7FTWAP_LAST_BLOCK_TIME_STAMP\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[`@Q` \x01a\0\xF2\x90` \x80\x82R`\x0B\x90\x82\x01Rj\x15\x15\xD0T\x17\xD4\x11T\x92S\xD1`\xAA\x1B`@\x82\x01R``\x01\x90V[`@Q` \x01a\0\xF2\x90` \x80\x82R`)\x90\x82\x01R\x7FTWAP_LAST_PRICE_CUMMULATIVE_KEY_`@\x82\x01Rh\x10\x96W\xD4\x11T\x92S\xD1`\xBA\x1B``\x82\x01R`\x80\x01\x90V[`@Q` \x01a\0\xF2\x90` \x80\x82R`\x12\x90\x82\x01RqTWAP_AVERAGE_PRICE`p\x1B`@\x82\x01R``\x01\x90V\xFE\xA2dipfsX\"\x12 \xCF\x96\xB3(\xD7^>k#\xCB\x99\xB4\x7F\xC1\x19\x1C\x85\xF6\xC3?\xDD\xC7\x97(\x85\x8EP\x10a\x1B\x90\x19dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `TWAP_AVERAGE_PRICE()` and selector `0xfd910c06`.
```solidity
function TWAP_AVERAGE_PRICE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TWAP_AVERAGE_PRICECall {}
    ///Container type for the return parameters of the [`TWAP_AVERAGE_PRICE()`](TWAP_AVERAGE_PRICECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TWAP_AVERAGE_PRICEReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TWAP_AVERAGE_PRICECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TWAP_AVERAGE_PRICECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TWAP_AVERAGE_PRICECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TWAP_AVERAGE_PRICEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TWAP_AVERAGE_PRICEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TWAP_AVERAGE_PRICEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TWAP_AVERAGE_PRICECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TWAP_AVERAGE_PRICEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TWAP_AVERAGE_PRICE()";
            const SELECTOR: [u8; 4] = [253u8, 145u8, 12u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TWAP_LAST_BLOCK_TIME_STAMP()` and selector `0x6f817dc6`.
```solidity
function TWAP_LAST_BLOCK_TIME_STAMP() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TWAP_LAST_BLOCK_TIME_STAMPCall {}
    ///Container type for the return parameters of the [`TWAP_LAST_BLOCK_TIME_STAMP()`](TWAP_LAST_BLOCK_TIME_STAMPCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TWAP_LAST_BLOCK_TIME_STAMPReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TWAP_LAST_BLOCK_TIME_STAMPCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TWAP_LAST_BLOCK_TIME_STAMPCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TWAP_LAST_BLOCK_TIME_STAMPCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TWAP_LAST_BLOCK_TIME_STAMPReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TWAP_LAST_BLOCK_TIME_STAMPReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TWAP_LAST_BLOCK_TIME_STAMPReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TWAP_LAST_BLOCK_TIME_STAMPCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TWAP_LAST_BLOCK_TIME_STAMPReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TWAP_LAST_BLOCK_TIME_STAMP()";
            const SELECTOR: [u8; 4] = [111u8, 129u8, 125u8, 198u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD()` and selector `0x51634c8b`.
```solidity
function TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall {}
    ///Container type for the return parameters of the [`TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD()`](TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD()";
            const SELECTOR: [u8; 4] = [81u8, 99u8, 76u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TWAP_LAST_PRICE_CUMMULATIVE_KEY()` and selector `0x1d604896`.
```solidity
function TWAP_LAST_PRICE_CUMMULATIVE_KEY() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TWAP_LAST_PRICE_CUMMULATIVE_KEYCall {}
    ///Container type for the return parameters of the [`TWAP_LAST_PRICE_CUMMULATIVE_KEY()`](TWAP_LAST_PRICE_CUMMULATIVE_KEYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TWAP_LAST_PRICE_CUMMULATIVE_KEYReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TWAP_LAST_PRICE_CUMMULATIVE_KEYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TWAP_LAST_PRICE_CUMMULATIVE_KEYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TWAP_LAST_PRICE_CUMMULATIVE_KEYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TWAP_LAST_PRICE_CUMMULATIVE_KEYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TWAP_LAST_PRICE_CUMMULATIVE_KEYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TWAP_LAST_PRICE_CUMMULATIVE_KEYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TWAP_LAST_PRICE_CUMMULATIVE_KEYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TWAP_LAST_PRICE_CUMMULATIVE_KEYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TWAP_LAST_PRICE_CUMMULATIVE_KEY()";
            const SELECTOR: [u8; 4] = [29u8, 96u8, 72u8, 150u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD()` and selector `0xe1fd4eb6`.
```solidity
function TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall {}
    ///Container type for the return parameters of the [`TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD()`](TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD()";
            const SELECTOR: [u8; 4] = [225u8, 253u8, 78u8, 182u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TWAP_PERIOD()` and selector `0x7ca25184`.
```solidity
function TWAP_PERIOD() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TWAP_PERIODCall {}
    ///Container type for the return parameters of the [`TWAP_PERIOD()`](TWAP_PERIODCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TWAP_PERIODReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TWAP_PERIODCall> for UnderlyingRustTuple<'_> {
                fn from(value: TWAP_PERIODCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for TWAP_PERIODCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TWAP_PERIODReturn> for UnderlyingRustTuple<'_> {
                fn from(value: TWAP_PERIODReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for TWAP_PERIODReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TWAP_PERIODCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TWAP_PERIODReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TWAP_PERIOD()";
            const SELECTOR: [u8; 4] = [124u8, 162u8, 81u8, 132u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`TwapStoreUtils`](self) function calls.
    pub enum TwapStoreUtilsCalls {
        TWAP_AVERAGE_PRICE(TWAP_AVERAGE_PRICECall),
        TWAP_LAST_BLOCK_TIME_STAMP(TWAP_LAST_BLOCK_TIME_STAMPCall),
        TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD(TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall),
        TWAP_LAST_PRICE_CUMMULATIVE_KEY(TWAP_LAST_PRICE_CUMMULATIVE_KEYCall),
        TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD(
            TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall,
        ),
        TWAP_PERIOD(TWAP_PERIODCall),
    }
    #[automatically_derived]
    impl TwapStoreUtilsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [29u8, 96u8, 72u8, 150u8],
            [81u8, 99u8, 76u8, 139u8],
            [111u8, 129u8, 125u8, 198u8],
            [124u8, 162u8, 81u8, 132u8],
            [225u8, 253u8, 78u8, 182u8],
            [253u8, 145u8, 12u8, 6u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TwapStoreUtilsCalls {
        const NAME: &'static str = "TwapStoreUtilsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::TWAP_AVERAGE_PRICE(_) => {
                    <TWAP_AVERAGE_PRICECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TWAP_LAST_BLOCK_TIME_STAMP(_) => {
                    <TWAP_LAST_BLOCK_TIME_STAMPCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD(_) => {
                    <TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TWAP_LAST_PRICE_CUMMULATIVE_KEY(_) => {
                    <TWAP_LAST_PRICE_CUMMULATIVE_KEYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD(_) => {
                    <TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TWAP_PERIOD(_) => {
                    <TWAP_PERIODCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TwapStoreUtilsCalls>] = &[
                {
                    fn TWAP_LAST_PRICE_CUMMULATIVE_KEY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TwapStoreUtilsCalls> {
                        <TWAP_LAST_PRICE_CUMMULATIVE_KEYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TwapStoreUtilsCalls::TWAP_LAST_PRICE_CUMMULATIVE_KEY)
                    }
                    TWAP_LAST_PRICE_CUMMULATIVE_KEY
                },
                {
                    fn TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TwapStoreUtilsCalls> {
                        <TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                TwapStoreUtilsCalls::TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD,
                            )
                    }
                    TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD
                },
                {
                    fn TWAP_LAST_BLOCK_TIME_STAMP(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TwapStoreUtilsCalls> {
                        <TWAP_LAST_BLOCK_TIME_STAMPCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TwapStoreUtilsCalls::TWAP_LAST_BLOCK_TIME_STAMP)
                    }
                    TWAP_LAST_BLOCK_TIME_STAMP
                },
                {
                    fn TWAP_PERIOD(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TwapStoreUtilsCalls> {
                        <TWAP_PERIODCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TwapStoreUtilsCalls::TWAP_PERIOD)
                    }
                    TWAP_PERIOD
                },
                {
                    fn TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TwapStoreUtilsCalls> {
                        <TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                TwapStoreUtilsCalls::TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD,
                            )
                    }
                    TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD
                },
                {
                    fn TWAP_AVERAGE_PRICE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TwapStoreUtilsCalls> {
                        <TWAP_AVERAGE_PRICECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TwapStoreUtilsCalls::TWAP_AVERAGE_PRICE)
                    }
                    TWAP_AVERAGE_PRICE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::TWAP_AVERAGE_PRICE(inner) => {
                    <TWAP_AVERAGE_PRICECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TWAP_LAST_BLOCK_TIME_STAMP(inner) => {
                    <TWAP_LAST_BLOCK_TIME_STAMPCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD(inner) => {
                    <TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TWAP_LAST_PRICE_CUMMULATIVE_KEY(inner) => {
                    <TWAP_LAST_PRICE_CUMMULATIVE_KEYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD(inner) => {
                    <TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TWAP_PERIOD(inner) => {
                    <TWAP_PERIODCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::TWAP_AVERAGE_PRICE(inner) => {
                    <TWAP_AVERAGE_PRICECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TWAP_LAST_BLOCK_TIME_STAMP(inner) => {
                    <TWAP_LAST_BLOCK_TIME_STAMPCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD(inner) => {
                    <TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TWAP_LAST_PRICE_CUMMULATIVE_KEY(inner) => {
                    <TWAP_LAST_PRICE_CUMMULATIVE_KEYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD(inner) => {
                    <TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TWAP_PERIOD(inner) => {
                    <TWAP_PERIODCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TwapStoreUtils`](self) contract instance.

See the [wrapper's documentation](`TwapStoreUtilsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TwapStoreUtilsInstance<T, P, N> {
        TwapStoreUtilsInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<TwapStoreUtilsInstance<T, P, N>>,
    > {
        TwapStoreUtilsInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        TwapStoreUtilsInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`TwapStoreUtils`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`TwapStoreUtils`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TwapStoreUtilsInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for TwapStoreUtilsInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TwapStoreUtilsInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TwapStoreUtilsInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`TwapStoreUtils`](self) contract instance.

See the [wrapper's documentation](`TwapStoreUtilsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<TwapStoreUtilsInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> TwapStoreUtilsInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> TwapStoreUtilsInstance<T, P, N> {
            TwapStoreUtilsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TwapStoreUtilsInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`TWAP_AVERAGE_PRICE`] function.
        pub fn TWAP_AVERAGE_PRICE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TWAP_AVERAGE_PRICECall, N> {
            self.call_builder(&TWAP_AVERAGE_PRICECall {})
        }
        ///Creates a new call builder for the [`TWAP_LAST_BLOCK_TIME_STAMP`] function.
        pub fn TWAP_LAST_BLOCK_TIME_STAMP(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TWAP_LAST_BLOCK_TIME_STAMPCall, N> {
            self.call_builder(&TWAP_LAST_BLOCK_TIME_STAMPCall {})
        }
        ///Creates a new call builder for the [`TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD`] function.
        pub fn TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIOD(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall,
            N,
        > {
            self.call_builder(
                &TWAP_LAST_BLOCK_TIME_STAMP_BY_PERIODCall {
                },
            )
        }
        ///Creates a new call builder for the [`TWAP_LAST_PRICE_CUMMULATIVE_KEY`] function.
        pub fn TWAP_LAST_PRICE_CUMMULATIVE_KEY(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            TWAP_LAST_PRICE_CUMMULATIVE_KEYCall,
            N,
        > {
            self.call_builder(
                &TWAP_LAST_PRICE_CUMMULATIVE_KEYCall {
                },
            )
        }
        ///Creates a new call builder for the [`TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD`] function.
        pub fn TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIOD(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall,
            N,
        > {
            self.call_builder(
                &TWAP_LAST_PRICE_CUMMULATIVE_KEY_BY_PERIODCall {
                },
            )
        }
        ///Creates a new call builder for the [`TWAP_PERIOD`] function.
        pub fn TWAP_PERIOD(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TWAP_PERIODCall, N> {
            self.call_builder(&TWAP_PERIODCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TwapStoreUtilsInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
